{
  Al-Kharid Miner rock
  Author: ineedbot
  Date: 7/20/2022

  Handles everything rock related
}

{$IFNDEF INEEDBOT_AKM_TREE}
{$DEFINE INEEDBOT_AKM_TREE}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the rock tile
}
function TBot.FindRockTile(OurPos: TPoint; Tile: TPoint): TRectangle;
begin
  if Tile.X = -1 then
  begin
    Result := [Point(-1, -1), Point(-1, -1), Point(-1, -1), Point(-1, -1)];
    exit();
  end;

  Result := Self.RSW.GetTileMSEx(OurPos, Tile, 4);
end;

{
  Gets the search box
}
function TBot.GetRockSearchBox(Tile: TRectangle): TBox;
begin
  if Tile.Top.X = -1 then
  begin
    Result := MainScreen.GetPlayerBox();
    Result := Result.Expand(Round(Result.ToRectangle().Radius() * Self.SelfBoxRadiusExpand));
    exit();
  end;

  Result := Tile.Expand(Round(Tile.Radius() * Self.RockColor.RadiusExpand)).Bounds();
end;

{
  Returns all the found rocks in box
}
function TBot.FindRockColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.RockColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.RockColor.FilterSize), __GT__);
end;

{
  Tries to find the rock at the tile, returns true if it does, also the area of where it is
}
function TBot.FindRock(PlayerPos: TPoint; RockPos: TPoint; out B: TBox; out ATPA: T2DPointArray): Boolean;
var
  Tile: TRectangle;
begin
  // get the tile location on the mainscreen, and check if its visible
  Tile := Self.FindRockTile(PlayerPos, RockPos);

  B := Self.GetRockSearchBox(Tile);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());

  // find the tree's colors in this tile
  ATPA := Self.FindRockColor(B);

  if Length(ATPA) > 0 then
  begin
    B := ATPA.Biggest().Bounds();
    Result := True;
  end;
end;

{
  Hovers over next rock
}
function TBot.HoverNextRock(ClickPt, OurPos: TPoint): Boolean;
var
  RockTile: TPoint;
  B: TBox;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  i, CurRock: Int32;
begin
  if Self.CurrentMiningRockTile.X = -1 then
  begin
    if ClickPt.X <> -1 then
    begin
      if Self.FindRock(OurPos, [-1, -1], B, ATPA) then
      begin
        for TPA in ATPA do
        begin
          B := TPA.Bounds();

          if B.Contains(ClickPt) then
            continue;

          Mouse.Move(B);
          Result := True;
          break;
        end;
      end;
    end;
  end
  else
  begin
    for i := Low(Self.RockTiles) to High(Self.RockTiles) do
    begin
      RockTile := Self.RockTiles[i];

      if RockTile = Self.CurrentMiningRockTile then
      begin
        CurRock := i;
        continue;
      end;

      if not Self.FindRock(OurPos, RockTile, B, ATPA) then
        continue;

      Mouse.Move(B);
      Result := True;
      break;
    end;

    if Length(Self.RockTiles) > 1 then
    begin
      Self.FindRock(OurPos, Self.RockTiles[(CurRock + 1) mod Length(Self.RockTiles)], B, ATPA);
      Mouse.Move(B);
    end;
  end;
end;

{
  Attempts to click on a rock, returns if it does
}
function TBot.ClickRock(out WasClicked: Boolean; out ClickPt: TPoint; out B: TBox; OurPos: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  CRockTiles, TPA: TPointArray;
  TT, MousePos: TPoint;
  ATPA: T2DPointArray;
begin
  if OurPos = Point(-1, -1) then
    OurPos := Self.RSW.GetMyPos();

  // sort by our mouse position
  MousePos := Self.RSW.MSToWorldEx(OurPos, Mouse.Position());

  // shake up the tiles
  CRockTiles := Copy(Self.RockTiles);
  CRockTiles.Sort(MousePos);
  CRockTiles.RandomizeNearDists(OurPos, 8, 0.025);

  ClickPt := Point(-1, -1);

  for TT in CRockTiles do
  begin
    if not Self.FindRock(OurPos, TT, B, ATPA) then
      continue;

    // apply velocity
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickRock: Tile velocity no visible', True);
        break;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image().DrawBox(B, clMoneyGreen);
    end;

    Result := True;
    Self.CurrentMiningRockTile := TT;

    Script.OldMouseMovingCallback := Mouse.OnMoving;
    Mouse.OnMoving := WhileMouseMovesLookForUpText;
    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Self.RockUptexts;

    if TT.X = -1 then
    begin
      ATPA.SortByMiddle(Mouse.Position());
      for TPA in ATPA do
      begin
        B := TPA.Bounds();

        Mouse.Move(B);
        Script.RareSmallWait();

        if MainScreen.IsUpText(Self.RockUptexts, Random(100, 250)) then
          break;
      end;
    end
    else
    begin
      Mouse.Move(B);
      Script.RareSmallWait();
    end;

    Script.MouseLooksForUpText := [];
    Mouse.OnMoving := Script.OldMouseMovingCallback;
    Script.OldMouseMovingCallback := nil;


    if not MainScreen.IsUpText(Self.RockUptexts, Random(100, 250)) then
    begin
      Script.WriteMsg('ClickRock: Bad uptext', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    ClickPt := Mouse.Position();
    if not MainScreen.IsUpText(Self.RockOptions, Random(100, 250)) or (Random() < 0.025) then
      WasClicked := ChooseOption.Select(Self.RockOptions)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := MainScreen.DidRedClick();
    end;

    if not WasClicked then
    begin
      Script.WriteMsg('ClickRock: Didnt click', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    break;
  end;
end;

{
  While we walk to the rocks
}
procedure WalkingToRocks(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel, ClickPt: TPoint;
  B: TBox;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make sure close, so we get into position better
    if Position.DistanceTo(Destination) < 8 then
    begin
      // make the mouse fast, because we are moving, its harder to keep up with objs
      S := Mouse.Speed;
      Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

      MSVel := Script.WalkerVelToMSVel(Velocity);
      // if we clicked the fish spot, then stop the walker
      if Bot.ClickRock(WasClicked, ClickPt, B, Position, MSVel) and WasClicked then
      begin
        Script.WriteMsg('Clicked the rock while moving, nice!');
        Walker^.Enabled := False;
        Bot.WalkerWasEarlySuccess := True;
      end;

      // reset the mosue speed back
      Mouse.Speed := S;
    end
    else
      Mouse.Move(Bot.GetRockSearchBox(Bot.FindRockTile(Position, [-1, -1]))); // make sure our mouse doesnt hover over other rocks
  end;
end;

{
  Walks to the rocks,
  Returns true if we clicked the rock spot while walking
}
function TBot.GoToRocks(Force: Boolean = False; Click: Boolean = True): Boolean;
var
  Where, OurPos: TPoint;
  PathIdx: Int32;
  Walked: Boolean;
begin
  Script.WriteMsg('Going to rocks...', True);
  OurPos := Self.RSW.GetMyPos();
  Where := Self.RockTiles[Self.WalkedRock];
  if Force then
    Where := Self.RockWalkTile;

  if Where.X = -1 then
    exit();

  if Force or (OurPos.DistanceTo(Where) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Where).Mean()) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to rock spot...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.ClickWhileWalking := Click;
    Self.RSW.OnWalkingEvent := WalkingToRocks;

    try
      Walked := True;
      Self.RSW.Enabled := True;
      Self.WalkerWasEarlySuccess := False;

      if (Length(Self.ToRocksPaths) > 0) and Force then
      begin
        PathIdx := SRL.TruncatedGauss(Low(Self.ToRocksPaths), High(Self.ToRocksPaths));

        if OurPos.DistanceTo(Self.ToRocksPaths[PathIdx][Low(Self.ToRocksPaths[PathIdx])]) <
          OurPos.DistanceTo(Self.ToRocksPaths[PathIdx][High(Self.ToRocksPaths[PathIdx])]) then
          Walked := Self.RSW.WalkPath(Self.ToRocksPaths[PathIdx], 8);
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Where.Random(-3, 3, True), 0);
    except
      Walked := False;
    end;
    
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to rock spot');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;

  // set the 'next' rock spot...
  if not Force then
    Self.UpdateWalkedRock(False);
end;

{
  Checks for runelite plugin
  Returns true if using runelite plugin
  Sets Mining to true or false.
}
function TBot.CheckRuneliteMiningPlugin(out Mining: Boolean): Boolean;
var
  B: TBox;
  FColor: TOCRColorRule;
begin
  exit();
  B := [MainScreen.X1(), MainScreen.Y1(), MainScreen.X1() + 150, MainScreen.Y1() + 200];

  FColor := TOCRColorRule.Create([65280, 10]);
  if OCR.LocateText(B, 'Mining', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Mining := True;
  end;

  FColor := TOCRColorRule.Create([255, 10]);
  if OCR.LocateText(B, 'NOT mining', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Mining := False;
  end;
end;

{
  Waits while we are mining the rock
}
procedure TBot.WhileMining(RockTile: TPoint; ClickPt: TPoint = [-1, -1]; ClickB: TBox = [-1, -1, -1, -1]);
var
  TimeoutCounter: TCountdown;
  OurPos, ClickLoc: TPoint;
  B: TBox;
  InvCount, IC: Int32;
  Mining: Boolean;
  ATPA: T2DPointArray;
  Dist: Double;
begin                                
  InvCount := Inventory.Count();

  // check and see if this a far click
  if ClickPt.X <> -1 then
  begin
    ClickLoc := MainScreen.PointToMM(ClickPt).ToPoint();
    Dist := ClickLoc.DistanceTo(Minimap.Center());
    Script.WriteMsg('Checking far click: ' + ToStr(Dist), True);

    if Dist > 8 then
    begin
      Inc(Self.DidMove);
      Inc(Self.DidMove);
      Inc(Self.DidMove);
      ClickPt := [-1, -1];
      Script.WriteMsg('Did a far click... ' + ToStr(Self.DidMove), True);
      Wait(750, 1250);
    end
    else
      Dec(Self.DidMove);
  end;

  // Self.AfterActionAntiBan(True);

  // wait for us to stop moving before we start monitoring the tree tile.
  while RSClient.IsLoggedIn() and (Minimap.HasFlag() or Minimap.IsPlayerMoving()) do
    Self.DoMainLoopStuff('Going to clicked rock...', False);

  Self.UpdateWalkedRock(True);

  OurPos := Self.RSW.GetMyPos();

  if InvCount < 27 then
    Self.HoverNextRock(ClickPt, OurPos);

  // we timeout if we do not gain something into our inventory
  TimeoutCounter.Init(Self.MineWaitTime);
  while RSClient.IsLoggedIn() do
  begin
    if Self.CheckRuneliteMiningPlugin(Mining) then
    begin
      if Mining then
        Script.WriteMsg('WhileMining: Runelite says we are mining!', True)
      else
      begin
        Script.WriteMsg('WhileMining: Runelite says we are not mining', True);
        break;
      end;
    end
    else
    begin
      if not Self.FindRock(OurPos, RockTile, B, ATPA) then
      begin
        Script.WriteMsg('WhileMining: Rock not found', True);
        break;
      end;

      // if got a click pt
      if ClickPt.X <> -1 then
      begin
        // if chopping anywhere, FindRock isnt accurate enough for this, so we gotta check ourselves
        if RockTile.X = -1 then
        begin
          ATPA := Self.FindRockColor(ClickB);

          // make sure theres still colors in this box
          if Length(ATPA) <= 0 then
          begin
            Script.WriteMsg('WhileMining: no rock colors inside clickBox', True);
            break;
          end;

          B := ATPA.Biggest().Bounds();
        end;

        // make sure that its still in the box
        if not B.Contains(ClickPt) then
        begin
          Script.WriteMsg('WhileMining: ClickPt not inside B', True);
          break;
        end;
      end;

      IC := Inventory.Count();
      if IC >= (Inventory.HIGH_SLOT + 1) then
      begin
        Script.WriteMsg('WhileMining: Inv full!', True);
        break;
      end;

      if IC <> InvCount then
      begin
        Script.WriteMsg('WhileMining: Got an item!', True);
        break;
      end;
      InvCount := IC;

      if TimeoutCounter.IsFinished() then
      begin
        Script.WriteMsg('WhileMining: Timed out', True);
        break;
      end;
    end;

    Self.DoMainLoopStuff('Mining rock...', True);
  end;

  if TimeoutCounter.IsFinished() then
    Script.WriteMsg('WhileMining: No ore gained in timeout...', True);

  Script.SetStatus('Rock mining completed!');

  // check if we are not in the spot
  if Self.DidMove < 0 then
    Self.DidMove := 0;

  if Self.DidMove > 6 then
  begin
    Self.DidMove := 0;
    Self.GoToRocks(True, False);
  end;
end;

{
  Executes when we need to gather items to fill our inventory
}
function TBot.DoGathering(): Boolean;
var
  Clicked: Boolean;
  ClickPt: TPoint;
  B: TBox;
begin
  if (Self.ClickRock(Clicked, ClickPt, B) and Clicked) or
    Self.GoToRocks() or
    (Self.ClickRock(Clicked, ClickPt, B) and Clicked) then
  begin
    Result := True;
    Self.WhileMining(Self.CurrentMiningRockTile, ClickPt, B);
  end;
end;

{$ENDIF} // INEEDBOT_AKM_TREE
