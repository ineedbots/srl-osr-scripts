{
  BankStander bank
  Author: ineedbot
  Date: 7/9/2022

  Bank
}

{$IFNDEF INEEDBOT_BANKSTANDER_BANK}
{$DEFINE INEEDBOT_BANKSTANDER_BANK}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the bank tile
}
function TBot.FindBankTile(OurPos: TPoint; BankTile: TPoint): TRectangle;
begin
  if BankTile.X = -1 then
  begin
    Result := [Point(-1, -1), Point(-1, -1), Point(-1, -1), Point(-1, -1)];
    exit();
  end;

  Result := Self.RSW.GetTileMSEx(OurPos, BankTile);
end;

{
  Gets the search box
}
function TBot.GetBankSearchBox(BankTile: TRectangle): TBox;
begin
  if BankTile.Top.X = -1 then
  begin
    Result := MainScreen.GetPlayerBox();
    Result := Result.Expand(Round(Result.ToRectangle().Radius() * Self.SelfBoxRadiusExpand));
    exit();
  end;

  Result := BankTile.Expand(Round(BankTile.Radius() * Self.BankColor.RadiusExpand)).Bounds();
end;

{
  Returns all the found banks
}
function TBot.FindBankColor(Area: TBox): T2DPointArray;
begin
  if (Length(Self.BankColor.RSObject.Colors) <= 0) and (Length(Self.BankColor.RSObject.ColorClusters) <= 0) then
    exit();

  Result := MainScreen.FindObject(Self.BankColor.RSObject, Area);
  Result.FilterSize(Self.BankColor.FilterSize, __GT__);
end;

{
  Returns true if bank is visible, B is bounds of it
}
function TBot.FindBank(OurTile, BankTile: TPoint; out B: TBox; out ATPA: T2DPointArray): Boolean;
var
  Tile: TRectangle;
begin
  Tile := Self.FindBankTile(OurTile, BankTile);

  B := Self.GetBankSearchBox(Tile);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());

  // check the bank's colors within the tile
  ATPA := Self.FindBankColor(B);

  if Length(ATPA) <= 0 then
  begin
    if BankTile.X <> -1 then
    begin
      B := Tile.Bounds().Expand(-MainScreen.ConvertDistance(Self.BankColor.NoColorTileExpand)); // couldnt find color... use the fixd tile
      Result := True;
    end;
  end
  else
  begin  
    B := ATPA.Biggest().Bounds();
    Result := True;
  end;
end;

{
  Returns true if we clicked any bank
}
function TBot.ClickBank(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]): Boolean;
var
  BankTiles, TPA: TPointArray;
  BankTile: TPoint;
  B: TBox;
  ATPA: T2DPointArray;
begin
  // bank might be already opened, lets return true
  if Bank.IsOpen() or BankPin.IsOpen() then
  begin
    WasClicked := True;
    exit(True);
  end;

  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // randomize the tiles a bit, shake em up
  BankTiles := Copy(Self.BankLocations);
  BankTiles.Sort(OurTile);
  BankTiles.RandomizeNearDists(OurTile, 12, 0.2);

  Script.SetStatus('Finding bank...');

  // search for every bank
  for BankTile in BankTiles do
  begin
    // try see if we can find this bank
    if not Self.FindBank(OurTile, BankTile, B, ATPA) then
      continue;

    // look for the bank for each blob of color
    if BankTile.X = -1 then
    begin
      ATPA.SortBySize();
      for TPA in ATPA do
      begin
        Mouse.Move(TPA.Bounds());
        Script.RareSmallWait();

        if MainScreen.IsUpText(Bank.FINDER_UPTEXT, Random(100, 250)) then
          break;
      end;
    end
    else
    begin
      Mouse.Move(B);
      Script.RareSmallWait();
    end;

    if not MainScreen.IsUpText(Bank.FINDER_UPTEXT, Random(100, 250)) then
    begin
      Script.SetStatus('Bad uptext for bank');
      continue;
    end;

    Result := True;

    Script.SetStatus('Confirmed bank! Opening bank...');

    // open the bank
    if ('Banker' in MainScreen.GetUpText()) or (Random() < 0.20) then
      WasClicked := ChooseOption.Select(Bank.FINDER_OPTION)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := MainScreen.DidRedClick();
    end;

    if not WasClicked then
    begin
      Script.WriteMsg('ClickBank: Didnt click', True);
      continue;
    end;

    break;
  end;
end;

{
  Waits for the bank to open, while doing so, it will input bankpin
  Returns if the bank or depositbox was opened.
}
function TBot.WaitBankOpen(): Boolean;
var
  BankOpenCountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  BankOpenCountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // is the bank open?
    if Bank.IsOpen(True) or BankPin.IsOpen() then
    begin
      Script.WriteMsg('WaitBankOpen: Bank opened!', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitBankOpen: Still moving...', True);
      BankOpenCountDown.Restart();
    end
    else if BankOpenCountDown.TimeRemaining() < 3500 then
      Bank.FixUpText();

    // timed out?
    if BankOpenCountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitBankOpen: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to clicked bank...', False);
  end;

  Script.WriteMsg('WaitBankOpen: Timed out...', True);
  // bank didnt open... failed.
end;

{
  Banks for supercombats
}
function TBot.DoSuperCombatBank(Pattern: TIntegerArray; MBox: TBox; out DeferToOrginal: Boolean): Boolean;
var
  AttItem, StrItem, DefItem: TRSItem;
  AttBox, StrBox, DefBox, SomeBox: TBox;
  Order: TIntegerArray;
  i: Int32;
begin
  DeferToOrginal := False;
  AttItem := 'Super attack(4)';
  StrItem := 'Super strength(4)';
  DefItem := 'Super defence(4)';

  Script.WriteMsg('Doing super combat bank!', True);

  // gather info for items
  if not Bank.FindBankItem(AttItem, AttBox) then
  begin
    Script.WriteMsg('Couldn''t find AttItem in bank');
    Script.Stop('No materials left in bank!');
    exit();
  end;

  if not Bank.FindBankItem(StrItem, StrBox) then
  begin
    Script.WriteMsg('Couldn''t find StrItem in bank');
    Script.Stop('No materials left in bank!');
    exit();
  end;

  if not Bank.FindBankItem(DefItem, DefBox) then
  begin
    Script.WriteMsg('Couldn''t find DefItem in bank');
    Script.Stop('No materials left in bank!');
    exit();
  end;

  // deposit
  if Random() < 0.9 then
    Bank.DepositAllItems(False)
  else if not Bank.DepositItemsIntoBank(Pattern, 28, -2, False) then
  begin
    Script.WriteMsg('Failed to deposit items');
    exit();
  end;

  Wait(0, 1000, wdLeft);
  Script.AntiBan.AfterBankAntiBan(7);

  // withdraw
  Order := [0, 1, 2, 3];
  for i := High(Order) downto 0 do
    Swap(Order[i], Order[Random(0, i)]);

  while Length(Order) > 0 do
  begin
    case Order.Pop() of
      0: SomeBox := MBox;
      1: SomeBox := AttBox;
      2: SomeBox := StrBox;
      3: SomeBox := DefBox;
    end;

    if not Bank.WithdrawItemFromBank(SomeBox, 7, False, 7, False) then
    begin
      Script.WriteMsg('Failed to withdraw');
      exit();
    end;

    Wait(0, 1000, wdLeft);
    Script.AntiBan.AfterBankAntiBan(2);
  end;

  Wait(750, 1500, wdLeft);
  Result := True;
end;

{
  Banks for glassmake!
}
function TBot.DoGlassMakeBank(Pattern: TIntegerArray; MBox, SMBox: TBox; out DeferToOrginal: Boolean): Boolean;
var
  i, IC: Int32;
  MatStr: String;
  SandSlots: TIntegerArray;
begin
  DeferToOrginal := False;

  MatStr := ToStr(Self.MaterialItems[0]).Lower();

  if (MatStr = 'giant seaweed') or (MatStr = '21504') then
  begin
    Script.WriteMsg('Doing giant seaweed bank!', True);

    // deposit
    if Self.UsingBankFillers and (Random() < 0.95) then
      Bank.DepositAllItems(False)
    else if not Bank.DepositItemsIntoBank(Pattern, 28, -2, False) then
    begin
      Script.WriteMsg('Failed to deposit items');
      exit();
    end;

    Wait(0, 1000, wdLeft);
    Script.AntiBan.AfterBankAntiBan(7);

    // primary SHOULD be giant seaweed
    if Script.ShiftClicking then
    begin
      // runelite shift click to withdraw-1
      for i := 1 to 3 do
      begin
        Mouse.ShiftClick(MBox);

        Wait(0, 500, wdLeft);
        Script.AntiBan.AfterBankAntiBan(2);
      end;

      if not Bank.WithdrawItemFromBank(SMBox, 18, False, 18, False) then
      begin
        Script.WriteMsg('Failed to withdraw sand');
        exit();
      end;
    end
    else
    begin
      // 6x6 method
      IC := Inventory.Count();

      // withdraw 6x sand 4 times
      for i := 1 to 4 do
      begin
        if not Bank.WithdrawItemFromBank(SMBox, 6, False, 6, False) then
        begin
          Script.WriteMsg('Failed to withdraw sand');
          exit();
        end;

        Wait(0, 500, wdLeft);
        Script.AntiBan.AfterBankAntiBan(2);
      end;

      // withdraw 6x giant seaweed (should only be 3)
      if not Bank.WithdrawItemFromBank(MBox, 6, False, 6, False) then
      begin
        Script.WriteMsg('Failed to withdraw giant seaweed');
        exit();
      end;

      Wait(0, 500, wdLeft);
      Script.AntiBan.AfterBankAntiBan(2);

      // deposit 6 sand
      // find the sand in the inv
      Inventory.WaitChange(IC, SRL.SkewedRand(2500, 2000, 3000));
      if not Inventory.FindItems(Self.SecondaryMaterialItems, SandSlots) then
      begin
        Script.WriteMsg('No sand in inv??');
        exit();
      end;

      // choose a slot
      if Random() < 0.9 then
        i := SandSlots[0]
      else
        i := SandSlots[Random(High(SandSlots))];

      // deposit it
      if not Bank.DepositItemsIntoBank([i], 6, 6, False) then
      begin
        Script.WriteMsg('Couldn''t deposit sand?');
        exit();
      end;
    end;

    Wait(750, 1500, wdLeft);
    Result := True;
  end
  else
  begin
    // do original if not using giant seaweed
    DeferToOrginal := True;
    Result := True;
  end;
end;

{
  Banks
}
function TBot.DoBanking(): Boolean;
var
  ToolSlots, Pattern, ProductSlots: TIntegerArray;
  i, CurProducts, FreeSpace, MatsToWith: Int32;
  Item: TRSItem;
  MBox, ACBox, SMBox: TBox;
  Found, DeferToOrginal: Boolean;
begin
  if not Bank.IsOpen(True) then
  begin
    if BankPin.IsOpen() then
    begin
      Script.WriteMsg('DoBanking: Entering pin...', True);
      Mouse.Move(Minimap.Bounds());
      BankPin.Enter(Login.GetPlayer().Pin);
      Wait(0, 5000, wdLeft);
      exit();
    end;

    Bank.FixUpText();
    exit();
  end;

  Self.StoppedShort := False;

  Inventory.FindItems(Self.ToolItems, ToolSlots);
  Script.WriteMsg('DoBanking: ToolSlots: ' + ToStr(ToolSlots), True);

  // randomize the deposit pattern
  Pattern := Bank.GetGoodPattern();

  // randomly chop it off for extra antiban
  if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));

  // make sure we do not deposit our tools
  for i in ToolSlots do
    Pattern.Remove(i);

  Script.WriteMsg('DoBanking: Pattern: ' + ToStr(Pattern), True);

  Script.SetStatus('Banking...');
  Wait(0, 1000, wdLeft);
  Script.AntiBan.AfterBankAntiBan(10);

  // search for materials
  for Item in Self.MaterialItems do
  begin
    if not Bank.FindBankItem(Item, MBox) then
      continue;

    Found := True;
    break;
  end;

  if not Found then
  begin
    Script.Stop('No materials left in bank!');
    exit();
  end;

  if Length(Self.SecondaryMaterialItems) > 0 then
  begin
    Found := False;
    for Item in Self.SecondaryMaterialItems do
    begin
      if not Bank.FindBankItem(Item, SMBox) then
        continue;

      Found := True;
      break;
    end;

    if not Found then
    begin
      Script.Stop('No secondary materials left in bank!');
      exit();
    end;
  end;

  if Self.UsingAmuletOfChem then
  begin
    if not Bank.FindBankItem(Self.AmuletOfChemItem, ACBox) then
    begin
      Script.Stop('No amulet of chem!!');
      exit();
    end;
  end;

  // remember how many produce we have, so we can count
  Inventory.FindItems(Self.ProductItems, ProductSlots);
  CurProducts := Length(ProductSlots);
  Script.WriteMsg('DoBanking: ProductSlots: ' + ToStr(ProductSlots), True);
  DeferToOrginal := True;

  case Self.CreationType of
    ERSCreationType.GLASSMAKE:
    begin
      if not Self.DoGlassMakeBank(Pattern, MBox, SMBox, DeferToOrginal) then
      begin
        Script.WriteMsg('Failed to DoGlassMakeBank items');
        Bank.Close(Script.ShouldPressKeyboard());
        exit();
      end;
    end;
    ERSCreationType.SUPERCOMBAT:
    begin
      if not Self.DoSuperCombatBank(Pattern, MBox, DeferToOrginal) then
      begin
        Script.WriteMsg('Failed to DoSuperCombatBank items');
        Bank.Close(Script.ShouldPressKeyboard());
        exit();
      end;
    end;
  end;

  if DeferToOrginal then
  begin
    // deposit our stuff
    Script.WriteMsg('Depositting our produce.', True);
    if ((Length(ToolSlots) <= 0) or Self.UsingBankFillers) and (Random() < 0.9) then
      Bank.DepositAllItems()
    else if not Bank.DepositItemsIntoBank(Pattern) then
    begin
      Script.WriteMsg('Failed to deposit items');
      Bank.Close(Script.ShouldPressKeyboard());
      exit();
    end;

    Wait(0, 1000, wdLeft);
    Script.AntiBan.AfterBankAntiBan(7);

    // withdraw the amulet
    if Self.UsingAmuletOfChem and Self.NeedToRefillAmuletOfChem then
    begin
      // withdraw it
      if not Bank.WithdrawItemFromBank(ACBox, 1) then
      begin
        Script.WriteMsg('Failed to withdraw amulet');
        exit();
      end;

      Wait(0, 1000, wdLeft);
      Script.AntiBan.AfterBankAntiBan(7);

      // find it
      Pattern.Clear();
      if not Inventory.FindItem(Self.AmuletOfChemItem, Pattern) then
      begin
        Script.WriteMsg('Couldn''t find amulet in inv');
        exit();
      end;

      // equip it
      i := Inventory.Count();

      Mouse.Move(Inventory.GetSlotBox(Pattern[0]));
      Wait(0, 750, wdLeft);

      // runelite shift click bank inventory!
      if not Script.ShiftClicking or (Random() < 0.1) then
        ChooseOption.Select('Wear')
      else
        Mouse.ShiftClick();

      Wait(0, 500, wdLeft);
      Script.AntiBan.AfterBankAntiBan(2);

      Inventory.WaitChange(i, SRL.SkewedRand(2500, 2000, 3000));

      Self.NeedToRefillAmuletOfChem := False;
      Self.AmuletOfChemCountdown.Restart();

      Wait(0, 1000, wdLeft);
      Script.AntiBan.AfterBankAntiBan(7);
    end;

    // withdraw our crap
    FreeSpace := (Inventory.HIGH_SLOT + 1) - Inventory.Count();

    if Length(Self.SecondaryMaterialItems) > 0 then
    begin
      MatsToWith := Floor(FreeSpace / (1 + Self.SecondaryMaterialRatio));

      // lets withdraw our material
      if not Bank.WithdrawItemFromBank(MBox, MatsToWith) then
      begin
        Script.WriteMsg('Failed to withdraw materials');
        Bank.Close(Script.ShouldPressKeyboard());
        exit();
      end;

      Wait(0, 1000, wdLeft);
      Script.AntiBan.AfterBankAntiBan(7);

      if not Bank.WithdrawItemFromBank(SMBox, MatsToWith * Self.SecondaryMaterialRatio) then
      begin
        Script.WriteMsg('Failed to withdraw secondary materials');
        Bank.Close(Script.ShouldPressKeyboard());
        exit();
      end;
    end
    else
    begin
      if Self.MaterialRatio = 1 then
        MatsToWith := -3
      else
        MatsToWith := FreeSpace - (FreeSpace mod Self.MaterialRatio);

      if not Bank.WithdrawItemFromBank(MBox, MatsToWith) then
      begin
        Script.WriteMsg('Failed to withdraw materials');
        Bank.Close(Script.ShouldPressKeyboard());
        exit();
      end;
    end;
  end;

  ProductSlots.Clear();
  Inventory.FindItems(Self.ProductItems, ProductSlots);
  Self.Did += CurProducts - Length(ProductSlots);

  Script.SetStatus('Depositted!');
  Script.WriteMsg('Banked... Currently did ' + IntToStr(Self.Did) + '!');

  Script.AntiBan.AfterBankAntiBan(15);

  Bank.Close(Script.ShouldPressKeyboard());
  Script.WriteMsg('Finished banking...', True);

  Result := True;
end;

{
  Returns true if it opened the bank
}
function TBot.OpenBank(): Boolean;
var
  WasClicked: Boolean;
begin
  if Bank.IsOpen() or BankPin.IsOpen() then
  begin
    Script.WriteMsg('Bank is opened', True);
    exit(True);
  end;

  Script.WriteMsg('Searching for bank', True);
  if Self.ClickBank(WasClicked) and WasClicked then
    exit(True);
end;

{
  Trys to open the bank
}
function TBot.DoOpenBank(): Boolean;
begin
  Script.WriteMsg('Opening bank..', True);

  if Self.OpenBank() then
  begin
    if Self.CreationType = ERSCreationType.GLASSMAKE then
      Self.AfterActionAntiBan(False)
    else
      Self.AfterActionAntiBan(True, False);

    if Self.WaitBankOpen() then
      Result := True;

    exit();
  end;

  Script.WriteMsg('Failed to open bank');
  Wait(1000, 2500, wdLeft);
end;

{$ENDIF} // INEEDBOT_BANKSTANDER_BANK
