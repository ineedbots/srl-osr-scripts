{
  BankStander transform
  Author: ineedbot
  Date: 7/9/2022

  Transform
}

{$IFNDEF INEEDBOT_BANKSTANDER_TRANSFORM}
{$DEFINE INEEDBOT_BANKSTANDER_TRANSFORM}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Transforms the item with a tool
}
procedure TBot.Transform(Item: TRSItem; MaterialSlots, ToolSlots: TIntegerArray);
var
  ToolSlot, MaterialSlot, MCount, MC, StopShort, OGMCount: Int32;
  Made: Boolean;
  CountDown: TCountDown;
begin
  // can be secondary material too!
  ToolSlot := ToolSlots[Random(High(ToolSlots))];

  MaterialSlot := MaterialSlots[Random(High(MaterialSlots))];
  MCount := Length(MaterialSlots);
  OGMCount := MCount;

  StopShort := MCount;
  if Random() < 0.05 then
    StopShort := SRL.SkewedRand(MCount, MCount, 0);

  Script.WriteMsg('Starting the transformation', True);

  // start transforming
  if Random() < 0.5 then
  begin
    Inventory.SetSelectedSlot(ToolSlot);
    Wait(0, 1000, wdLeft);
    Inventory.ClickSlot(MaterialSlot);
  end
  else
  begin
    Inventory.SetSelectedSlot(MaterialSlot);
    Wait(0, 1000, wdLeft);
    Inventory.ClickSlot(ToolSlot);
  end;

  if Self.MakeNum = -1 then
    Made := True;

  if not Made and Make.IsOpen(SRL.SkewedRand(1500, 1250, 2500)) then
  begin
    Wait(0, 3333, wdLeft);
    if Length(Make.GetItemButtons()) > Self.MakeNum then
      Made := Make.Select(Self.MakeNum, MAKE_QUANTITY_ALL, Script.ShouldPressKeyboard());
  end;

  if not Made then
  begin
    Script.WriteMsg('Failed to open make', True);
    exit();
  end;

  Self.AfterActionAntiBan(True, False);
  CountDown.Init(Self.TransformWaitTime);

  Script.WriteMsg('Making...', True);

  while RSClient.IsLoggedIn() do
  begin
    if Self.HandleAmuletOfChem() then
    begin
      Script.WriteMsg('Transform: HandleAmuletOfChem!', True);
      break;
    end;

    // check inv
    MaterialSlots.Clear();
    Inventory.FindItem(Item, MaterialSlots);
    MC := Length(MaterialSlots);

    if MC < Self.MaterialRatio then
    begin
      Script.WriteMsg('Transform: No more material', True);
      break;
    end;

    if MC <> MCount then
    begin
      Script.WriteMsg('Transform: InvCount changed, restarting countdown', True);
      CountDown.Restart();
    end;

    if (StopShort - (OGMCount - MC)) <= 0 then
    begin
      if Random() < 0.65 then
        Self.StoppedShort := True;

      Script.WriteMsg('Stopping short for antiban', True);
      break;
    end;

    MCount := MC;

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('Transform: Countdown expired', True);
      break;
    end;

    if Chat.LeveledUp() then
    begin
      Script.WriteMsg('Transform: Leveld', True);
      if Random() < 0.2 then
      begin
        Wait(0, 1500, wdLeft);

        while Chat.ClickContinue(Script.ShouldPressKeyboard()) do
          Wait(75, 500);
      end;
      break;
    end;

    if not Self.ShouldMakeProduct() then
    begin
      Script.WriteMsg('Transform: shouldn''t make product', True);
      break;
    end;

    Self.DoMainLoopStuff('Transforming items...', True);
  end;

  Wait(0, 5555, wdLeft);
end;

{
  Does transform type
}
function TBot.DoTransform(): Boolean;
var
  MaterialSlots, ToolSlots: TIntegerArray;
  Item: TRSItem;
begin
  if not Inventory.FindItems(Self.ToolItems, ToolSlots) then
  begin
    Script.WriteMsg('No tools', True);
    exit();
  end;

  Script.WriteMsg('DoTransform: ToolSlots: ' + ToStr(ToolSlots), True);

  Script.WriteMsg('Transforming items...', True);

  for Item in Self.MaterialItems do
  begin
    if Inventory.FindItem(Item, MaterialSlots) then
    begin
      Script.WriteMsg('DoTransform: MaterialSlots: ' + ToStr(MaterialSlots), True);
      Self.Transform(Item, MaterialSlots, ToolSlots);
      Result := True;
      break;
    end;
  end;

  Script.WriteMsg('No materials', True);
end;

{
  Combines
}
function TBot.DoCombine(): Boolean;
var
  MaterialSlots, SecondaryMaterialSlots: TIntegerArray;
  Item: TRSItem;
begin
  if not Inventory.FindItems(Self.SecondaryMaterialItems, SecondaryMaterialSlots) then
  begin
    Script.WriteMsg('No secondary materials', True);
    exit();
  end;

  Script.WriteMsg('DoCombine: SecondaryMaterialSlots: ' + ToStr(SecondaryMaterialSlots), True);

  Script.WriteMsg('Combining items...', True);

  for Item in Self.MaterialItems do
  begin
    if Inventory.FindItem(Item, MaterialSlots) then
    begin
      Script.WriteMsg('DoCombine: MaterialSlots: ' + ToStr(MaterialSlots), True);
      Self.Transform(Item, MaterialSlots, SecondaryMaterialSlots);
      Result := True;
      break;
    end;
  end;

  Script.WriteMsg('No materials', True);
end;

{
  Cleans the herbs
}
function TBot.Clean(Item: TRSItem; out Pattern: TIntegerArray; i: Int32; out AfkClean: Boolean): Boolean;
var
  MaterialSlots: TIntegerArray;
  MCount, OGMCount, StopShort, ii, MC: Int32;
  CountDown: TCountDown;
  Uptxt: String;
begin
  i := i;
  if not Inventory.FindItem(Item, MaterialSlots) then
    exit();

  MCount := Length(MaterialSlots);
  OGMCount := MCount;

  StopShort := MCount;
  if Random() < 0.05 then
    StopShort := SRL.SkewedRand(MCount, MCount, 0);

  // remove all slots with no item!
  for ii := High(Pattern) downto Low(Pattern) do
    if MaterialSlots.Find(Pattern[ii]) = -1 then
      Pattern.Remove(Pattern[ii]);

  if Length(Pattern) <= 0 then
    exit();

  Mouse.Move(Inventory.GetSlotBox(Pattern[0]));

  Uptxt := MainScreen.GetUpText();
  if (Uptxt.Count('Clean') > 0) and (Random() < 0.975) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := True;
  end
  else
    Result := ChooseOption.Select('Clean');

  Pattern.Remove(Pattern[0]);

  if Result and AfkClean then
  begin       
    Script.WriteMsg('Starting the cleaning', True);

    CountDown.Init(Self.TransformWaitTime);

    while RSClient.IsLoggedIn() do
    begin
      // check inv
      MaterialSlots.Clear();
      Inventory.FindItem(Item, MaterialSlots);
      MC := Length(MaterialSlots);

      if MC < Self.MaterialRatio then
      begin
        Script.WriteMsg('Clean: No more material', True);
        break;
      end;

      if MC <> MCount then
      begin
        Script.WriteMsg('Clean: InvCount changed, restarting countdown', True);
        CountDown.Restart();
      end;

      if (StopShort - (OGMCount - MC)) <= 0 then
      begin
        if Random() < 0.65 then
          Self.StoppedShort := True;

        Script.WriteMsg('Stopping short for antiban', True);
        break;
      end;

      MCount := MC;

      if CountDown.IsFinished() then
      begin
        Script.WriteMsg('Clean: Countdown expired', True);
        break;
      end;

      if Chat.LeveledUp() then
      begin
        Script.WriteMsg('Clean: Leveld', True);
        if Random() < 0.2 then
        begin
          Wait(0, 1500, wdLeft);
          
          while Chat.ClickContinue(Script.ShouldPressKeyboard()) do
            Wait(75, 500);
        end;
        break;
      end;

      if Random() < (0.05 / 14) then
      begin
        AfkClean := False;
        break;
      end;

      if not Self.ShouldMakeProduct() then
      begin
        Script.WriteMsg('Clean: shouldn''t make product', True);
        break;
      end;

      Self.DoMainLoopStuff('Cleaning items...', True);
    end;
  end;
end;


{
  Clean the herbs
}
function TBot.DoClean(): Boolean;
var
  Item: TRSItem;
  Pattern, MaterialSlots: TIntegerArray;
  i, S: Int32;
  AfkClean: Boolean;
begin
  Pattern := Bank.GetGoodPattern();

  S := Mouse.Speed;
  Mouse.Speed += Script.FastMouseAdd + Random(-2, 2);

  if Random() < 0.05 then
    AfkClean := True;

  while RSClient.IsLoggedIn() do
  begin
    // make sure nothing is selected
    Inventory.SetSelectedSlot(-1);

    MaterialSlots.Clear();
    if not Inventory.FindItems(Self.MaterialItems, MaterialSlots) or (Length(MaterialSlots) < Self.MaterialRatio) then
    begin
      Script.WriteMsg('DoClean: no mats', True);
      break;
    end;

    if Self.StoppedShort then
    begin
      Script.WriteMsg('DoClean: stopping short', True);
      break;
    end;

    if not Self.ShouldMakeProduct() then
    begin
      Script.WriteMsg('DoClean: shouldn''t make product', True);
      break;
    end;

    if Random() < (0.05 / 28) then
      AfkClean := True;

    for Item in Self.MaterialItems do
    begin
      if Self.Clean(Item, Pattern, i, AfkClean) then
        Result := True;
    end;

    if Length(Pattern) < Self.MaterialRatio then
    begin
      Self.StoppedShort := True;
      break;
    end;

    Inc(i);
  end;

  Mouse.Speed := S;
  Wait(0, 5555, wdLeft);
  Script.WriteMsg('No materials', True);
end;

{$ENDIF} // INEEDBOT_BANKSTANDER_TRANSFORM
