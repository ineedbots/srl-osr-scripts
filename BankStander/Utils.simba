{
  BankStander utils
  Author: ineedbot
  Date: 7/9/2022

  utils
}

{$IFNDEF INEEDBOT_BANKSTANDER_UTILS}
{$DEFINE INEEDBOT_BANKSTANDER_UTILS}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Config.simba}

{$include_once Bank.simba}
{$include_once Transform.simba}

{
  Handles amulet of chem
}
function TBot.HandleAmuletOfChem(): Boolean;
var
  ChatMsg: String;
begin
  if not Self.UsingAmuletOfChem or MainScreen.AnyInterfaceOpen() then
    exit();

  if Self.AmuletOfChemCountdown.IsFinished() then
  begin
    Self.NeedToRefillAmuletOfChem := True;
    Script.WriteMsg('Amulet of chem timeout', True);
    Result := True;
  end;

  if Chat.IsOpen() then
  begin
    ChatMsg := Chat.GetMessage(7, [CHAT_COLOR_BLACK, CHAT_COLOR_RED, CHAT_COLOR_LIGHT_RED]).Strip();

    if ChatMsg.IsInString(Self.AmuletCrumbledTexts) then
    begin
      Script.WriteMsg('Amulet of chem text found!', True);

      if not Script.ExamineRandomItem() then
      begin
        Script.TogglePlayerReportOption();
        Script.TogglePlayerReportOption();
      end;

      Self.NeedToRefillAmuletOfChem := True;
      Result := True;
    end;
  end;
end;

{
  Should we create the product?
}
function TBot.ShouldMakeProduct(): Boolean;
var
  Slots: TIntegerArray;
  AttItem, StrItem, DefItem: TRSItem;
begin
  // glassmake hack, because we always want to bank after clicking the spell
  if Self.CreationType = ERSCreationType.GLASSMAKE then
  begin
    if not Self.DoGlassMake() then
      Self.AfterActionAntiBan(True, True, True)
    else
      Self.ClearFailCount();
    
    exit();
  end;

  if Self.StoppedShort then
    exit();

  if Self.UsingAmuletOfChem and Self.NeedToRefillAmuletOfChem then
    exit();

  if not Inventory.FindItems(Self.MaterialItems, Slots) then
    exit();

  if Length(Slots) < Self.MaterialRatio then
    exit();

  Slots.Clear();

  // cehck super combat stuff
  if Self.CreationType = ERSCreationType.SUPERCOMBAT then
  begin
    AttItem := 'Super attack(4)';
    StrItem := 'Super strength(4)';
    DefItem := 'Super defence(4)';

    if not Inventory.FindItem(AttItem) then
      exit();

    if not Inventory.FindItem(StrItem) then
      exit();

    if not Inventory.FindItem(DefItem) then
      exit();

    exit(True);
  end;

  if Length(Self.SecondaryMaterialItems) > 0 then
  begin
    if not Inventory.FindItems(Self.SecondaryMaterialItems, Slots) then
      exit();

    if Length(Slots) < Self.SecondaryMaterialRatio then
      exit();
  end;

  exit(True);
end;

{
  From Flight's AIOFisher
}
procedure TBot.DoSkillHover();
begin
  case Random() of
    0.0..0.6: Script.Antiban.HoverSkill(ERSSKILL.CRAFTING, Random(1700, 3200), True);
    0.6..0.8: Script.Antiban.HoverSkill(ERSSKILL.HERBLORE, Random(1700, 3200), True);
    else Script.Antiban.HoverSkill(ERSSKILL.FLETCHING, Random(1700, 3200), True);
  end;
end;

{
  Does general checks and does antiban.
}
function TBot.DoAntiBan(): Boolean;
begin
  Script.DoGeneralChecks();

  if not RSClient.IsLoggedIn() then
    exit();

  // check we we leveled up
  if Chat.LeveledUp() then
  begin
    Wait(0, 2500, wdLeft);
    while Chat.ClickContinue(Script.ShouldPressKeyboard()) do
      Wait(75, 500);
  end;

  // general antiban
  Result := Script.Antiban.DismissRandom() or Script.Antiban.DoAntiban(Script.AllowBreaks, Script.AllowBreaks);
end;

{
  From Slacky's BarbFisher
}
procedure TBot.AfterActionAntiBan(DoAB: Boolean = True; DoInterfaceClose: Boolean = True; WasFailure: Boolean = False);
begin
  Wait(0, 750, wdLeft);

  if DoAB then
    Self.DoAntiban();

  if WasFailure then
  begin
    Script.WriteMsg('Failed!: ' + ToStr(Self.FailCount), True);

    // fix angle
    if Self.FailCount = 0 then
      Minimap.SetCompassNorth((Random() > 0.2))
    else
      Minimap.SetCompassAngle(Random() * 360.0);
    
    // make sure cam is high
    MainScreen.SetHighestPitch();

    // make sure nothing is selected in our inventory, might prevent us from interacting with stuff
    Inventory.SetSelectedSlot(-1);

    if MainScreen.IsUpText('->') then
      Mouse.Click(MOUSE_LEFT);

    if DoInterfaceClose and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface();

    // fix these up
    if Script.ShiftClicking then
      Keyboard.KeyUp(VK_SHIFT);

    if Script.MiddleClicking then
      Mouse.Release(MOUSE_MIDDLE);

    Inc(Self.FailCount);

    if Self.FailCount > 10 then
      Script.Stop('FailCount too high!');
  end;
end;

{
  Clears failcount
}
procedure TBot.ClearFailCount();
begin
  Self.FailCount := 0;
end;

{
  Debug draws the stuff
}
procedure TBot.DebugDraw();
var
  ATPA: T2DPointArray;
  OurTile, TP: TPoint;
  TPA: TPointArray;
  CompAng: Double;
  TileRect: TRectangle;
  B: TBox;
  Text: String;
  T, M, P: TIntegerArray;
  i: Int32;
  Item: TRSItem;
  BtnArr: TRSButtonArray;
begin
  OurTile := Self.RSW.GetMyPos();
  CompAng := Minimap.GetCompassAngle(False);

  Text := 'Pos: ' + ToStr(OurTile) + LineEnding;
  RSClient.Image().DrawText(Text, [MainScreen.X1(), MainScreen.Y1() + 20], clGreen);

  if MainScreen.AnyInterfaceOpen() then
  begin
    if Bank.IsOpen() then
    begin
      for Item in Self.MaterialItems do
      begin
        if Bank.FindItem(Item, B) then
          RSClient.Image().DrawBox(B, clWhite);
      end;
    end;
  end
  else
  begin
    for TP in Self.BankLocations do
    begin
      TileRect := Self.FindBankTile(OurTile, TP);
      B := Self.GetBankSearchBox(TileRect); 
      ATPA := Self.FindBankColor(B);

      RSClient.Image().DrawBox(B, clGreen);  
      RSClient.Image().DrawRect(TileRect, clBlue);
      RSClient.Image().DrawATPA(ATPA);

      if TP.X <> -1 then
      begin
        RSClient.Image().DrawCross(Self.RSW.WorldToMM(OurTile, TP, CompAng), 4, clBlue);

        if Self.FindBank(OurTile, TP, B, ATPA) then
          RSClient.Image().DrawBox(B, clYellow);
      end
      else
      begin
        if Self.FindBank(OurTile, TP, B, ATPA) then
        begin
          for TPA in ATPA do
            RSClient.Image().DrawBox(TPA.Bounds(), clYellow);
        end;
      end;
    end;

    if Make.IsOpen() then
    begin
      BtnArr := Make.GetItemButtons();

      if (Self.MakeNum >= 0) and (Length(BtnArr) > Self.MakeNum) then
      begin
        B := BtnArr[Self.MakeNum].Bounds;
        RSClient.Image().DrawBox(B, clBlue);
      end;
    end;
  end;

  if Inventory.IsOpen() then
  begin
    Inventory.FindItems(Self.ToolItems, T);
    Inventory.FindItems(Self.MaterialItems, M);
    Inventory.FindItems(Self.ProductItems, P);

    for i := 0 to 27 do
    begin
      if T.Find(i) <> -1 then
        RSClient.Image().DrawBox(Inventory.GetSlotBox(i), clWhite)
      else if M.Find(i) <> -1 then
        RSClient.Image().DrawBox(Inventory.GetSlotBox(i), clRed)
      else if P.Find(i) <> -1 then
        RSClient.Image().DrawBox(Inventory.GetSlotBox(i), clMoneyGreen)
    end;
  end;
end;

{
  Draws the stuff onto the screen
}
procedure TBot.Draw();
begin
  if not Script.CanDraw() then
    exit();

  RSClient.Image().Clear();
  // TODO complete

  if Script.Debug then
    Self.DebugDraw();
end;

{
  Does the proggy report to the console window
}
procedure TBot.ReportConsole();
var
  WriteOut: String;
begin
  if not Script.CanReportConsole() then
    exit();

  WriteOut += LineEnding + 'Runtime: ' + SRL.MsToTime(Script.TrueRunTime.ElapsedTime(), Time_Short) + LineEnding;
  WriteOut += 'Status: ' + Script.Status + LineEnding;
  WriteOut += 'Energy: ' + ToStr(Script.AntiBanEnergy.EnergyLevel(Script.Antiban)) + LineEnding;
  WriteOut += 'Did: ' + IntToStr(Self.Did) + LineEnding;
  WriteOut += 'Taking long breaks: ' + ToStr(TAKEBREAKS) + LineEnding;
  WriteOut += 'Time until break: ' + Script.Antiban.TimeUntilBreak(Script.Antiban.Breaks[0]) + LineEnding;
  WriteOut += 'Time until shutdown: ' + SRL.MsToTime(Script.ShutdownTime - GetTimeRunning(), Time_Short);

  Script.WriteMsg(WriteOut, False, True, True);
end;

{
  General main loop stuff to do.
}
procedure TBot.DoMainLoopStuff(Status: String = ''; DoAB: Boolean = True);
begin
  if Status <> '' then
    Script.SetStatus(Status);

  if DoAB then
    Self.DoAntiBan();

  Self.ReportConsole();
  Self.Draw();
                                    
  // check if we gained xp, failsafe
  if RSClient.IsLoggedIn() and Self.GainingXP then
    Script.CheckActivity();

  Wait(Script.MainLoopWaitAmount(False));
end;

{
  Handles the extra timer
}
procedure ResumeScript(Task: PBreakTask);
begin
  Bot.AmuletOfChemCountdown.Restart();

  ResumeRunTime(Task);
end;

{$ENDIF} // INEEDBOT_BANKSTANDER_UTILS
