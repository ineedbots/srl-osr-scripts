{
  Barbarian Village Fisher
  Author: ineedbot
  Date: 10/20/2021

  Version: 1.1.0

  Fishes at barb village
}

program BarbarianVillageFisher;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL/OSR.simba}
{$i utils.simba}

const
  DEBUGMODE      = True; // For debugging purposes
  DRAWING        = True; // Draw stuff on the screen? Like proggies?
  MSWALKING      = False; // Use mainscreen walking?
  DOREPORTS      = False;  // Do proggies onto the console?

  TAKEBREAKS     = True;  // Take breaks?

  // Account details
  _USERNAME       = '';
  _PASSWORD       = '';
  _PIN            = '';
  _WORLDS         = [-1];
  TOTALRUNTIME    = 600;  // How many minutes should we operate for?


  // Configuration complete!
  // Below is script stuff

type
  TScriptColor = record
    RSObject                                                  : TRSObjectFinder;
    FilterSize                                                : Int32;
    RadiusExpand                                              : Double;
  end;

  TBot = record
    RSW                                                       : TRSWalker;
    RawFish, BurntFish, CookedFish                            : TRSItemArray;
    BaitItem, RodItem                                         : TRSItem;
    FishSpotColor, RodColor                                   : TScriptColor;
  end;

var
  Bot: TBot;

{
  From Flight's AIOFisher
}
procedure TBot.DoSkillHover();
begin
  case Random() of
    0.0..0.6: Script.Antiban.HoverSkill(ERSSKILL.FISHING, random(1700, 3200), True);
    else Script.Antiban.HoverSkill(ERSSKILL.COOKING, random(1700, 3200), True);
  end;
end;

{
  Does general checks and does antiban.
}
function TBot.DoAntiBan(): Boolean;
begin
  Script.DoGeneralChecks();

  if not RSClient.IsLoggedIn() or True then
    Exit();

  // check we we leveled up
  if Chat.LeveledUp() then
  begin
    Wait(0, 2500);
    while Chat.ClickContinue() do
      Wait(75, 500);
  end;

  // check if we gained xp, failsafe
  Script.CheckActivity();

  // TODO check for interfaces if opened... close em
  // make sure nothing is selected in our inventory, might prevent us from interacting with stuff
  Inventory.SetSelectedSlot(-1);

  // TODO use RSW.OnWalkEvent for dest tile, quickly detect our goal obj
  // TODO detect clues

  // general antiban
  Result := Script.Antiban.DismissRandom() or Script.Antiban.DoAntiban(Script.AllowBreaks, Script.AllowBreaks);
end;

{
  From Slacky's BarbFisher
}
procedure TBot.AfterActionAntiBan(DoAB: Boolean = True);
begin
  WaitEx(450,70);

  if DoAB then
    Self.DoAntiban();
end;

{
  Finds the color
}
function TBot.FindRodColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.RodColor.RSObject, Area);
  Result.FilterSize(Self.RodColor.FilterSize, __GT__);
end;

{
  Finds the color
}
function TBot.FindFishSpotColor(Area: TBox; SearchTime: Int32=0; Interval: Int32=-1): T2DPointArray;
var
  T: TCountDown;
  TPA: TPointArray;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  T.Init(SearchTime);
  while RSClient.IsLoggedIn() and (not T.IsFinished() or (SearchTime = 0)) do
  begin
    Result += MainScreen.FindObject(Self.FishSpotColor.RSObject, Area);

    if SearchTime = 0 then
      break;

    Wait(Interval);
  end;

  TPA := Result.Merge();
  Result := TPA.Cluster(Self.FishSpotColor.RSObject.ClusterDistance);
  Result.FilterSize(Self.FishSpotColor.FilterSize, __GT__);
end;

{
  Gets adjencent tiles
}
function TBot.GetAdjTiles(): array of TRectangle;
var
  i: Int32;
  MMC: TPoint;
  Ang, NormDist: Double;
  AdjRect: TRectangle;
  MMTiles: TPointArray;
begin
  MMC := Minimap.Center();
  Ang := Minimap.GetCompassAngle(False);
  NormDist := MainScreen.ConvertDistance(3);

  MMTiles := [[MMC.X-4,MMC.Y],[MMC.X,MMC.Y-4],[MMC.X+4,MMC.Y],[MMC.X,MMC.Y+4]];
  for i:=Low(MMTiles) to High(MMTiles) do
  begin
    MMTiles[i] := MMTiles[i].Rotate(Ang, MMC);
    AdjRect := Minimap.VecToMSRect(Vec3(MMTiles[i].X, MMTiles[i].Y, 0), Ang);
    AdjRect.Expand(NormDist);

    Result += AdjRect;
  end;
end;

{
  Is fishing?
}
function TBot.IsFishing(): Boolean;
var
  ATPA: T2DPointArray;
  ARect: array of TRectangle;
  Rect: TRectangle;
  B: TBox;
  FishInAdjTile: Boolean;
  TPA: TPointArray;
  Mean: TPoint;
begin
  // get adjecent tiles and all colors with the fish spot
  ATPA := Self.FindFishSpotColor(MainScreen.Bounds(), 500, Script.SleepRate);
  ARect := Self.GetAdjTiles();

  // look for at each fish spot
  for TPA in ATPA do
  begin
    Mean := TPA.Mean();

    // look through each adj tile
    for Rect in ARect do
    begin
      // check if this tile contains a fish tile
      if Rect.Contains(Mean) then
      begin
        FishInAdjTile := True;
        break;
      end;
    end;

    if FishInAdjTile then
      break;
  end;

  if not FishInAdjTile then
    Exit(False);

  if Script.Debug and Script.Drawing then
    RSClient.Image.DrawRect(Rect, clOrange);

  // check if there is a rod over the fish tile
  B := Rect.Expand(MainScreen.ConvertDistance(5)).Bounds();

  if Script.Debug and Script.Drawing then
    RSClient.Image.DrawBox(B, clGreen);

  ATPA := Self.FindRodColor(B);

  if Length(ATPA) <= 0 then
    Exit(False);

  if Script.Debug and Script.Drawing then
    RSClient.Image.DrawATPA(ATPA);

  Result := True;
end;

{
  Debug draws the stuff
}
procedure TBot.DebugDraw();
var
  ATPA: T2DPointArray;
  ARect: array of TRectangle;
  Rect: TRectangle;
begin
  {ATPA := Self.FindFishSpotColor(MainScreen.Bounds(), 500, Script.SleepRate);
  RSClient.Image.DrawATPA(ATPA);

  ATPA := Self.FindRodColor(MainScreen.Bounds());
  RSClient.Image.DrawATPA(ATPA);

  ARect := Self.GetAdjTiles();
  for Rect in ARect do
  begin
    RSClient.Image.DrawRect(Rect, clGreen);
  end; }

  WriteLn(Self.IsFishing());
end;

{
  Draws the stuff onto the screen
}
procedure TBot.Draw();
begin
  if not Script.CanDraw() then
    Exit();

  RSClient.Image.Clear();
  // TODO complete

  if Script.Debug then
    Self.DebugDraw();
end;

{
  Does the proggy report to the console window
}
procedure TBot.ReportConsole();
begin
  if not Script.CanReportConsole() then
    Exit();
end;

{
  General main loop stuff to do.
}
procedure TBot.DoMainLoopStuff(Status: String = ''; DoAB: Boolean = True);
begin
  if Status <> '' then
    Script.SetStatus(Status);

  if DoAB then
    Self.DoAntiBan();

  Self.ReportConsole();
  Self.Draw();

  Wait(Script.SleepRate);
end;

{
  Executes when we should do something about our full inventory
}
procedure TBot.DoFullInventory();
var
  T, RT, RS, S, B, F, FFR: TIntegerArray;
begin
  Inventory.FindItem('Raw trout', RT);
  Inventory.FindItem('Trout', T);
  Inventory.FindItem('Raw salmon', RS);
  Inventory.FindItem('Salmon', S);
  Inventory.FindItem(343, B);
  Inventory.FindItem('Feather', F);
  Inventory.FindItem('Fly fishing rod', FFR);

  Script.WriteMsg('Raw trout: ' + ToStr(RT));
  Script.WriteMsg('Trout: ' + ToStr(T));
  Script.WriteMsg('Raw salmon: ' + ToStr(RS));
  Script.WriteMsg('Salmon: ' + ToStr(S));
  Script.WriteMsg('Burnt fish: ' + ToStr(B));
  Script.WriteMsg('Feather: ' + ToStr(F));
  Script.WriteMsg('Fly fishing rod: ' + ToStr(FFR));

  Self.AfterActionAntiBan(True);
end;

{
  Executes when we need to gather items to fill our inventory
}
procedure TBot.DoGathering();
begin
  Self.AfterActionAntiBan(True);
end;

{
  Main loop of the script.
}
procedure TBot.Run();
begin
  while Script.Running do
  begin
    if RSClient.IsLoggedIn() then
    begin
      // TODO randomize
      if Inventory.IsFull() then
        Self.DoFullInventory()
      else
        Self.DoGathering();
    end
    else
    begin
      if Login.LoginPlayer() then
        Self.OnLogin();
    end;

    Self.DoMainLoopStuff();
  end;

  Logout.ClickLogout();
  Script.WriteMsg('Stop reason: ' + Script.StopReason);
  TerminateScript('Time to shutdown');
end;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// SETUP AND INIT STUFF

{
  When the player logs in.
}
procedure TBot.OnLogin();
begin
  // is this the first login?
  if not Script.DidLogin then
  begin
    Script.DidLogin := True;

    MM2MS.ZoomLevel         := Options.GetZoomLevel();
  end;

  Script.HPAmount             := Minimap.GetHPLevel();
  MainScreen.SetHighestPitch();
  Script.Activity.Countdown.Restart();
end;

{
  Frees the stuff when script completes
}
procedure TBot.Free();
begin
end;

{
  Inits the script...
}
procedure TBot.Init();
var
  Worlds: TIntegerArray;
begin
  // init the player
  if _WORLDS[0] <> -1 then
    Worlds := _WORLDS;

  Login.AddPlayer(_USERNAME, _PASSWORD, _PIN, Worlds);
  Script.AntiBanEnergy.SetupBiometrics();
  Script.AntiBan.Name := 'Antiban';

  Script.Debug := DEBUGMODE;
  Script.Drawing := DRAWING;
  Script.Reporting := DOREPORTS;
  Script.Running := True;
  Script.SleepRate := 75;
  Script.DrawRate := 2500;
  Script.ReportRate := 2500;
  Script.Activity.Countdown.Init(180000);

  Script.ShutdownTime := (TOTALRUNTIME * 60000) + Random(- (TOTALRUNTIME * 6000), (TOTALRUNTIME * 6000));

  Mouse.Speed             := 15 + Round(BioRandomFixed() * 10) + Random(-2, 2);
  Script.BaseMouseSpeed := Mouse.Speed;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.999;

  // init the antiban stuff
  Script.Antiban.OnStartBreak    := @PauseRunTime;
  Script.Antiban.OnFinishBreak   := @ResumeRunTime;

  Script.Antiban.AddTask(ONE_SECOND*30, @Mouse.RandomMovement);
  Script.Antiban.AddTask(ONE_SECOND*45, @Antiban.SetCompassNorth);
  Script.Antiban.AddTask(ONE_MINUTE*1,  @Antiban.RandomRotate);
  Script.Antiban.AddTask(ONE_MINUTE*2,  @Antiban.DoLoseFocus);
  Script.Antiban.AddTask(ONE_MINUTE*45,  @Script.UpdateZoomLevel);
  Script.Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  Script.Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  Script.Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Script.Antiban.AddTask(ONE_MINUTE*8,  @Self.DoSkillHover);
  Script.Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);

  if TAKEBREAKS then
  begin
    Script.Antiban.AddBreak(ONE_MINUTE*45, ONE_MINUTE*5, 0.2, 0.25);
    Script.Antiban.AddBreak(ONE_HOUR*2, ONE_MINUTE*10, 0.2, 0.5);
    Script.Antiban.AddBreak(ONE_HOUR*4, ONE_MINUTE*45, 0.2, 0.75);
    Script.Antiban.AddBreak(ONE_HOUR*17, ONE_HOUR*7, 0.2, 1.0);
  end;

  Self.RSW.Setup('world');
  Self.RSW.ScreenWalk     := MSWALKING;
  Script.AllowBreaks := True;

  Self.CookedFish := ['Trout', 'Salmon'];
  Self.RawFish := ['Raw trout', 'Raw salmon'];
  Self.BurntFish := [343];
  Self.BaitItem := 'Feather';
  Self.RodItem := 'Fly fishing rod';

  with Self.FishSpotColor do
  begin
    RSObject.Colors += CTS2(14793370, 10, 0.22, 1.46);
    RSObject.Grow := 3;
    RSObject.ClusterDistance := 7;
    FilterSize := 50;
  end;

  with Self.RodColor do
  begin
    RSObject.Colors += CTS2(10552, 3, 0.19, 0.01);
    RSObject.Grow := 2;
    RSObject.ClusterDistance := 5;
    FilterSize := 50;
  end;

  // do login init stuff
  if RSClient.IsLoggedIn() then
    Self.OnLogin();

  // start the timers
  Script.TrueRunTime.Start();
  Script.ReportCounter.Init(Script.ReportRate);
  Script.DrawCounter.Init(Script.DrawRate);

  AddOnTerminate(@Self.Free);
end;

{
  Entry point, inits and starts the bot main loop.
}
begin
  Bot.Init();
  Bot.Run();
end.
