{
  Barbarian Village Fisher
  Author: ineedbot
  Date: 10/20/2021

  Version: 1.1.0

  Fishes at barb village
}

program BarbarianVillageFisher;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL/OSR.simba}
{$i utils.simba}

const
  DEBUGMODE      = True; // For debugging purposes
  DRAWING        = True; // Draw stuff on the screen? Like proggies?
  MSWALKING      = False; // Use mainscreen walking?
  DOREPORTS      = False;  // Do proggies onto the console?

  TAKEBREAKS     = True;  // Take breaks?
  SHIFTDROP      = True;  // Shift drop?
  COOKINGFISH    = True;  // Cooking?
  BANKFISH       = True;  // Do banking?

  // Account details
  _USERNAME       = '';
  _PASSWORD       = '';
  _PIN            = '';
  _WORLDS         = [-1];
  TOTALRUNTIME    = 600;  // How many minutes should we operate for?


  // Configuration complete!
  // Below is script stuff

type
  TBot = record
    WalkedFishForward, ShiftDropping, Banking, Cooking        : Boolean;
    FishSpotColorWait, FishWaitTime, WalkedFish, CookWaitTime : Int32;
    FishSpotUpText, FireUpText                                : TStringArray;
    RSW                                                       : TRSWalker;
    RawFish, BurntFish, CookedFish                            : TRSItemArray;
    BaitItem, RodItem                                         : TRSItem;
    FishSpotColor, RodColor, FireColor, BankColor             : TScriptColor;
    FireTile, BankWalkTile, FishWalkTile                      : TPoint;
    BankTiles, FishTiles                                      : TPointArray;
  end;

var
  Bot: TBot;

{
  From Flight's AIOFisher
}
procedure TBot.DoSkillHover();
begin
  case Random() of
    0.0..0.6: Script.Antiban.HoverSkill(ERSSKILL.FISHING, random(1700, 3200), True);
    else Script.Antiban.HoverSkill(ERSSKILL.COOKING, random(1700, 3200), True);
  end;
end;

{
  Does general checks and does antiban.
}
function TBot.DoAntiBan(): Boolean;
begin
  Script.DoGeneralChecks();

  if not RSClient.IsLoggedIn() then
    Exit();

  // check we we leveled up
  if Chat.LeveledUp() then
  begin
    Wait(0, 2500);
    while Chat.ClickContinue() do
      Wait(75, 500);
  end;

  // check if we gained xp, failsafe
  Script.CheckActivity();

  // TODO check for interfaces if opened... close em
  // make sure nothing is selected in our inventory, might prevent us from interacting with stuff
  Inventory.SetSelectedSlot(-1);

  // TODO use RSW.OnWalkEvent for dest tile, quickly detect our goal obj
  // TODO detect clues

  // general antiban
  Result := Script.Antiban.DismissRandom() or Script.Antiban.DoAntiban(Script.AllowBreaks, Script.AllowBreaks);
end;

{
  From Slacky's BarbFisher
}
procedure TBot.AfterActionAntiBan(DoAB: Boolean = True);
begin
  WaitEx(450,70);

  if DoAB then
    Self.DoAntiban();
end;

{
  Finds the color
}
function TBot.FindRodColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.RodColor.RSObject, Area);
  Result.FilterSize(Self.RodColor.FilterSize, __GT__);
end;

{
  Finds the color
}
function TBot.FindFishSpotColor(Area: TBox; SearchTime: Int32=0; Interval: Int32=-1): T2DPointArray;
var
  T: TCountDown;
  TPA: TPointArray;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  T.Init(SearchTime);
  while RSClient.IsLoggedIn() and (not T.IsFinished() or (SearchTime = 0)) do
  begin
    Result += MainScreen.FindObject(Self.FishSpotColor.RSObject, Area);

    if SearchTime = 0 then
      break;

    Wait(Interval);
  end;

  TPA := Result.Merge();
  Result := TPA.Cluster(Self.FishSpotColor.RSObject.ClusterDistance);
  Result.FilterSize(Self.FishSpotColor.FilterSize, __GT__);
end;

{
  Gets adjencent tiles
}
function TBot.GetAdjTiles(): array of TRectangle;
var
  i: Int32;
  MMC: TPoint;
  Ang, NormDist: Double;
  AdjRect: TRectangle;
  MMTiles: TPointArray;
begin
  MMC := Minimap.Center();
  Ang := Minimap.GetCompassAngle(False);
  NormDist := MainScreen.ConvertDistance(3);

  MMTiles := [[MMC.X-4,MMC.Y],[MMC.X,MMC.Y-4],[MMC.X+4,MMC.Y],[MMC.X,MMC.Y+4]];
  for i:=Low(MMTiles) to High(MMTiles) do
  begin
    MMTiles[i] := MMTiles[i].Rotate(Ang, MMC);
    AdjRect := Minimap.VecToMSRect(Vec3(MMTiles[i].X, MMTiles[i].Y, 0), Ang);
    AdjRect.Expand(NormDist);

    Result += AdjRect;
  end;
end;

{
  Is fishing?
}
function TBot.IsFishing(WaitTime: Int32 = 0): Boolean;
var
  ATPA: T2DPointArray;
  ARect: array of TRectangle;
  Rect: TRectangle;
  B: TBox;
  FishInAdjTile: Boolean;
  TPA: TPointArray;
  Mean: TPoint;
begin
  // get adjecent tiles and all colors with the fish spot
  ATPA := Self.FindFishSpotColor(MainScreen.Bounds(), WaitTime, Script.SleepRate);
  ARect := Self.GetAdjTiles();

  // look for at each fish spot
  for TPA in ATPA do
  begin
    Mean := TPA.Mean();

    // look through each adj tile
    for Rect in ARect do
    begin
      // check if this tile contains a fish tile
      if Rect.Contains(Mean) then
      begin
        FishInAdjTile := True;
        break;
      end;
    end;

    if FishInAdjTile then
      break;
  end;

  if not FishInAdjTile then
    Exit(False);

  if Script.Debug and Script.Drawing then
    RSClient.Image.DrawRect(Rect, clOrange);

  // check if there is a rod over the fish tile
  B := Rect.Expand(MainScreen.ConvertDistance(5)).Bounds();

  if Script.Debug and Script.Drawing then
    RSClient.Image.DrawBox(B, clGreen);

  ATPA := Self.FindRodColor(B);

  if Length(ATPA) <= 0 then
    Exit(False);

  if Script.Debug and Script.Drawing then
    RSClient.Image.DrawATPA(ATPA);

  Result := True;
end;

{
  Returns all fires in the area
}
function TBot.FindFireColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.FireColor.RSObject, Area);
  Result.FilterSize(Self.FireColor.FilterSize, __GT__);
end;

{
  Returns all the found banks
}
function TBot.FindBankColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.BankColor.RSObject, Area);
  Result.FilterSize(Self.BankColor.FilterSize, __GT__);
end;

{
  Debug draws the stuff
}
procedure TBot.DebugDraw();
var
  ATPA: T2DPointArray;
  OurTile, TP: TPoint;
  CompAng: Double;
  TileRect: TRectangle;
  B: TBox;
  Text: String;
  RF, CF, BF, F, R: TIntegerArray;
  i: Int32;
begin
  OurTile := Self.RSW.GetMyPos();
  CompAng := Minimap.GetCompassAngle(False);

  ATPA := Self.FindFishSpotColor(MainScreen.Bounds());
  RSClient.Image.DrawATPA(ATPA);

  TileRect := Self.RSW.GetTileMSEx(OurTile, Self.FireTile);
  B := TileRect.Expand(Round(TileRect.Radius() * Self.FireColor.RadiusExpand)).Bounds();
  RSClient.Image.DrawBox(B, clBlue);
  ATPA := Self.FindFireColor(B);
  RSClient.Image.DrawTPA(ATPA.Biggest(), clOrange);
  RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, Self.FireTile, CompAng), 4, clOrange);
  RSClient.Image.DrawRect(TileRect, clGreen);

  for TP in Self.FishTiles do
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, TP, CompAng), 4, clBlue);

  for TP in Self.BankTiles do
  begin
    TileRect := Self.RSW.GetTileMSEx(OurTile, TP, 4);
    B := TileRect.Expand(Round(TileRect.Radius() * Self.BankColor.RadiusExpand)).Bounds();
    RSClient.Image.DrawBox(B, clBlue);
    ATPA := Self.FindBankColor(B);
    RSClient.Image.DrawTPA(ATPA.Biggest(), clOrange);
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, TP, CompAng), 4, clGreen);
    RSClient.Image.DrawRect(TileRect, clGreen);
  end;

  Text := 'Pos: ' + ToStr(OurTile) + NL
    + 'Fishing: ' + ToStr(Self.IsFishing());
  RSClient.Image.DrawText(Text, [MainScreen.X1, MainScreen.Y1 + 20], clGreen);

  if Inventory.IsOpen() then
  begin
    Inventory.FindItems(Self.RawFish, RF);
    Inventory.FindItems(Self.CookedFish, CF);
    Inventory.FindItems(Self.BurntFish, BF);
    Inventory.FindItem(Self.BaitItem, F);
    Inventory.FindItem(Self.RodItem, R);

    for i:=0 to 27 do
    begin
      if RF.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clWhite)
      else if CF.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clRed)
      else if BF.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clMoneyGreen)
      else if F.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clOrange)
      else if R.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clGray);
    end;
  end;
end;

{
  Draws the stuff onto the screen
}
procedure TBot.Draw();
begin
  if not Script.CanDraw() then
    Exit();

  RSClient.Image.Clear();
  // TODO complete

  if Script.Debug then
    Self.DebugDraw();
end;

{
  Does the proggy report to the console window
}
procedure TBot.ReportConsole();
begin
  if not Script.CanReportConsole() then
    Exit();
end;

{
  General main loop stuff to do.
}
procedure TBot.DoMainLoopStuff(Status: String = ''; DoAB: Boolean = True);
begin
  if Status <> '' then
    Script.SetStatus(Status);

  if DoAB then
    Self.DoAntiBan();

  Self.ReportConsole();
  Self.Draw();

  Wait(Script.SleepRate);
end;

{
  Waits while fishing
}
procedure TBot.WhileFishing();
var
  CountDown: TCountDown;
  InvCount, IC: Int32;
begin
  while RSClient.IsLoggedIn() and Minimap.HasFlag() and Minimap.IsPlayerMoving() do
    Self.DoMainLoopStuff('Going to the clicked fishing spot', True);

  Wait(2000, 3000);

  Script.WriteMsg('We are fishing...', True);
  InvCount := Inventory.Count();
  CountDown.Init(Self.FishWaitTime);

  while RSClient.IsLoggedIn() do
  begin
    if not Self.IsFishing(Self.FishSpotColorWait) then
    begin
      Script.WriteMsg('We are not fishing anymore...', True);
      break;
    end;

    IC := Inventory.Count();
    if IC >= 28 then
    begin
      Script.WriteMsg('Inv is full, we stopped fishing', True);
      break;
    end;

    if IC <> InvCount then
    begin
      Script.WriteMsg('Our inventory changed, restart the timeout timer', True);
      CountDown.Restart();
    end;
    InvCount := IC;

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('No fish caught in time, we are not fishing anymore', True);
      break;
    end;

    Self.DoMainLoopStuff('Fishing...', True);
  end;
end;

{
  Returns true if clicked on a fishing spot
}
function TBot.ClickFish(): Boolean;
var
  FishSpots: T2DPointArray;
  CFishTiles, TPA: TPointArray;
  OurPos: TPoint;
  CurrentFishTileIdx: Int32;
  Clicked: Boolean;
begin
  Script.WriteMsg('Going to click a fish spot...', True);
  OurPos := Self.RSW.GetMyPos();

  CFishTiles := Copy(Self.FishTiles);
  CFishTiles.Sort(OurPos);
  CurrentFishTileIdx := Self.FishTiles.Find(CFishTiles[0]);

  FishSpots := Self.FindFishSpotColor(MainScreen.Bounds(), Self.FishSpotColorWait, Script.SleepRate);

  if Length(FishSpots) <= 0 then
  begin
    Script.WriteMsg('No fish spots found', True);
    Exit(False);
  end;

  Script.WriteMsg('Fish spot found, checking uptext', True);
  // should be okay, all fishspot are lure spots
  Result := True;
  Self.WalkedFish := CurrentFishTileIdx;
  FishSpots.SortByMiddle(MainScreen.Center());

  // check each of the spots for the uptext, then click
  for TPA in FishSpots do
  begin
    Mouse.Move(TPA.Bounds());

    if not MainScreen.IsUpText(Self.FishSpotUpText) then
      continue;

    Script.WriteMsg('Clicking fish...', True);
    if Random() < 10 then
    begin
      Mouse.Click(MOUSE_LEFT);
      Clicked := Mouse.DidClick(True);
    end
    else
      Clicked := ChooseOption.Select(Self.FishSpotUpText);

    if Clicked then
    begin
      Self.AfterActionAntiBan(True);
      Self.WhileFishing();
    end;
    break;
  end;
end;

{
  Walks to the fish
}
procedure TBot.GoToFish(Force: Boolean = False);
var
  Where, OurPos: TPoint;
  Walked: Boolean;
begin
  Script.WriteMsg('Going to fish spot...', True);
  OurPos := Self.RSW.GetMyPos();
  Where := Self.FishTiles[Self.WalkedFish];
  if Force then
    Where := Self.FishWalkTile;

  if (OurPos.DistanceTo(Where) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Where).Mean()) or
    Force then
  begin
    Script.SetStatus('Going to fish spot...');
    try
      Walked := Self.RSW.WebWalk(Where.Random(-8, 8, True), 0, BioRandomFixed());
    except
    end;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to fish spot');
      Exit();
    end;
  end;

  // set the 'next' fish spot...
  if (Self.FishTiles.Len() > 1) and not Force then
  begin
    if Self.WalkedFishForward then
    begin
      Self.WalkedFish += 1;
      if Self.WalkedFish > High(Self.FishTiles) then
      begin
        Self.WalkedFish -= 2;
        Self.WalkedFishForward := False;
      end;
    end
    else
    begin
      Self.WalkedFish -= 1;
      if Self.WalkedFish < Low(Self.FishTiles) then
      begin
        Self.WalkedFish += 2;
        Self.WalkedFishForward := True;
      end;
    end;
  end;
end;

{
  Walks to the fire
}
procedure TBot.GoToFire(Force: Boolean = False);
var
  Walked: Boolean;
  OurPos: TPoint;
begin
  OurPos := Self.RSW.GetMyPos();
  if (OurPos.DistanceTo(Self.FireTile) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Self.FireTile).Mean()) or
    Force then
  begin
    Script.SetStatus('Going to fire...');
    try
      Walked := Self.RSW.WebWalk(Self.FireTile.Random(-8, 8, True), 0, BioRandomFixed());
    except
    end;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to fire!');
      Exit();
    end;
  end;
end;

{
  Waits while cooking
}
procedure TBot.WhileCooking(RSItem: TRSItem);
var
  RawSlots: TIntegerArray;
  C: Int32;
  CountDown: TCountDown;
begin
  Inventory.FindItem(RSItem, RawSlots);
  C := Length(RawSlots);
  CountDown.Init(Self.CookWaitTime);

  while RSClient.IsLoggedIn() and RawSlots.Clear() and Inventory.FindItem(RSItem, RawSlots) do
  begin
    if C <> Length(RawSlots) then
    begin
      Script.WriteMsg('WhileCooking: Restarting timer', True);
      CountDown.Restart();
    end;
    C := Length(RawSlots);

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WhileCooking: Timed out.', True);
      break;
    end;

    Self.DoMainLoopStuff('Cooking the food', True);
  end;
end;

{
  Starts cooking the fish
}
function TBot.StartCooking(RSItem: TRSItem): Boolean;
var
  RawSlots: TIntegerArray;
  TileRect: TRectangle;
  B: TBox;
  ATPA: T2DPointArray;
  OurTile: TPoint;
begin
  OurTile := Self.RSW.GetMyPos();
  TileRect := Self.RSW.GetTileMSEx(OurTile, Self.FireTile);

  B := TileRect.Expand(Round(TileRect.Radius() * Self.FireColor.RadiusExpand)).Bounds();
  B.LimitTo(MainScreen.Bounds());
  if not MainScreen.IsVisible(B.Middle()) then
  begin
    Script.WriteMsg('StartCooking: Tile no visible', True);
    Exit();
  end;

  ATPA := Self.FindFireColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(5))
  else
    B := ATPA.Biggest().Bounds();

  if not Inventory.FindItem(RSItem, RawSlots) then
  begin
    Script.WriteMsg('StartCooking: No item found', True);
    Exit();
  end;

  Inventory.SetSelectedSlot(RawSlots[Random(0, High(RawSlots))]);
  Wait(0, 1000);
  Mouse.Move(B);

  if MainScreen.IsUpText(Self.FireUpText) and (Random() < 10) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := Mouse.DidClick(True);
  end
  else
    Result := ChooseOption.Select(Self.FireUpText);

  if not Result then
  begin
    Script.WriteMsg('StartCooking: Didnt click', True);
    Exit();
  end;

  Minimap.WaitFlag();

  if not Make.IsOpen(2500 + Random(1000)) then
  begin
    Script.WriteMsg('StartCooking: Make screen didnt open', True);
    Exit(False);
  end;

  Make.Select(0, MAKE_QUANTITY_ALL, BioRandomCoinFlip());
  Self.WhileCooking(RSItem);
end;

{
  Cooks the food
}
procedure TBot.CookFish(RSItem: TRSItem);
begin
  Self.GoToFire();
  if not Self.StartCooking(RSItem) then
    Self.GoToFire(True);
end;

{
  Executes when we need to gather items to fill our inventory
}
procedure TBot.DoGathering();
begin
  if not Self.ClickFish() then
    Self.GoToFish();

  Self.AfterActionAntiBan(True);
end;

{
  Executes when we should do something about our full inventory
}
procedure TBot.DoFullInventory();
var
  RSItem: TRSItem;
begin
  if Self.Cooking and Inventory.FindItems(Self.RawFish) then
  begin
    for RSItem in Self.RawFish do
    begin
      if not Inventory.FindItem(RSItem) then
        continue;

      Self.CookFish(RSItem);
    end;
    Exit();
  end;

  if Self.Banking then
  begin
  end
  else
  begin
  end;

  Self.RSW.WebWalk(Self.BankWalkTile);
  Self.AfterActionAntiBan(True);
end;

{
  Main loop of the script.
}
procedure TBot.Run();
begin
  while Script.Running do
  begin
    if RSClient.IsLoggedIn() then
    begin
      // TODO randomize
      if Inventory.IsFull() then
        Self.DoFullInventory()
      else
        Self.DoGathering();
    end
    else
    begin
      if Login.LoginPlayer() then
        Self.OnLogin();
    end;

    Self.DoMainLoopStuff();
  end;

  Logout.ClickLogout();
  Script.WriteMsg('Stop reason: ' + Script.StopReason);
  TerminateScript('Time to shutdown');
end;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// SETUP AND INIT STUFF

{
  When the player logs in.
}
procedure TBot.OnLogin();
begin
  // is this the first login?
  if not Script.DidLogin then
  begin
    Script.DidLogin := True;

    MM2MS.ZoomLevel         := Options.GetZoomLevel();
  end;

  Script.HPAmount             := Minimap.GetHPLevel();
  MainScreen.SetHighestPitch();
  Script.Activity.Countdown.Restart();
end;

{
  Frees the stuff when script completes
}
procedure TBot.Free();
begin
end;

{
  Inits the script...
}
procedure TBot.Init();
var
  Worlds: TIntegerArray;
begin
  // init the player
  if _WORLDS[0] <> -1 then
    Worlds := _WORLDS;

  Login.AddPlayer(_USERNAME, _PASSWORD, _PIN, Worlds);
  Script.AntiBanEnergy.SetupBiometrics();
  Script.AntiBanEnergy.BoxPTRad := 0.3;
  Script.AntiBan.Name := 'Antiban';

  Script.Debug := DEBUGMODE;
  Script.Drawing := DRAWING;
  Script.Reporting := DOREPORTS;
  Script.Running := True;
  Script.SleepRate := 75;
  Script.DrawRate := 2500;
  Script.ReportRate := 2500;
  Script.Activity.Countdown.Init(180000);

  Script.ShutdownTime := (TOTALRUNTIME * 60000) + Random(- (TOTALRUNTIME * 6000), (TOTALRUNTIME * 6000));

  Mouse.Speed             := 20 + Round(BioRandomFixed() * 10) + Random(-2, 2);
  Script.BaseMouseSpeed := Mouse.Speed;                                 
  Script.MaxTiredMouseSpeed := 10;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.999;

  // init the antiban stuff
  Script.Antiban.OnStartBreak    := @PauseRunTime;
  Script.Antiban.OnFinishBreak   := @ResumeRunTime;

  Script.Antiban.AddTask(ONE_SECOND*30, @Mouse.RandomMovement);
  Script.Antiban.AddTask(ONE_SECOND*45, @Antiban.SetCompassNorth);
  Script.Antiban.AddTask(ONE_MINUTE*1,  @Antiban.RandomRotate);
  Script.Antiban.AddTask(ONE_MINUTE*2,  @Antiban.DoLoseFocus);
  Script.Antiban.AddTask(ONE_MINUTE*45,  @Script.UpdateZoomLevel);
  Script.Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSItems);
  Script.Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSNPCs);
  Script.Antiban.AddTask(ONE_MINUTE*4,  @Antiban.HoverMSPlayers);
  Script.Antiban.AddTask(ONE_MINUTE*8,  @Self.DoSkillHover);
  Script.Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);

  if TAKEBREAKS then
  begin
    Script.Antiban.AddBreak(ONE_MINUTE*45, ONE_MINUTE*5, 0.2, 0.25);
    Script.Antiban.AddBreak(ONE_HOUR*2, ONE_MINUTE*10, 0.2, 0.5);
    Script.Antiban.AddBreak(ONE_HOUR*4, ONE_MINUTE*45, 0.2, 0.75);
    Script.Antiban.AddBreak(ONE_HOUR*17, ONE_HOUR*7, 0.2, 1.0);
  end;

  Self.ShiftDropping := SHIFTDROP;
  Self.Cooking := COOKINGFISH;
  Self.Banking := BANKFISH;

  Self.RSW.Setup('world');
  Self.RSW.ScreenWalk     := MSWALKING;
  Script.AllowBreaks := True;
  Self.FishSpotColorWait := 500;
  Self.FishWaitTime := 15000;
  Self.CookWaitTime := 5000;
  Self.FishSpotUpText := ['Lure Rod Fishing spot', 'Lure'];
  Self.FireUpText := ['Use Raw salmon -> Fire', 'Use Raw trout -> Fire', 'Fire'];

  Self.FireTile := [4229, 2719];
  Self.BankWalkTile := WorldWeb.LOCATION_EDGEVILLE_BANK;

  Self.BankTiles := [[4190, 2484], [4190, 2492]];
  Self.FishTiles := [[4248,2718], [4221,2751]];
  Self.FishWalkTile := [4248,2718];

  Self.CookedFish := ['Trout', 'Salmon'];
  Self.RawFish := ['Raw trout', 'Raw salmon'];
  Self.BurntFish := [343];
  Self.BaitItem := 'Feather';
  Self.RodItem := 'Fly fishing rod';

  with Self.FishSpotColor do
  begin
    RSObject.Colors += CTS2(14793370, 10, 0.22, 1.46);
    RSObject.Grow := 3;
    RSObject.ClusterDistance := 7;
    FilterSize := 50;
  end;

  with Self.RodColor do
  begin
    RSObject.Colors += CTS2(10036, 5, 0.13, 0.01);
    RSObject.Grow := 2;
    RSObject.ClusterDistance := 5;
    FilterSize := 50;
  end;

  with Self.BankColor do
  begin
    RSObject.Colors += CTS2(605780, 3, 0.10, 0.96);
    RSObject.ColorClusters += [
      CTS2(6120041, 4, 1.11, 1.12), // Grey
      CTS2(1069929, 2, 0.15, 1.05), // Brown
      3];
    RSObject.Grow := 1;
    RSObject.ClusterDistance := 3;
    FilterSize := 10;
    RadiusExpand := 1.5;
  end;

  with Self.FireColor do
  begin
    RSObject.Colors += CTS2(16204, 2);
    RSObject.ClusterDistance := 5;
    RSObject.Grow := 2;
    RSObject.Erode := 2;
    FilterSize := 16;

    RadiusExpand := 2;
  end;

  // do login init stuff
  if RSClient.IsLoggedIn() then
    Self.OnLogin();

  // start the timers
  Script.TrueRunTime.Start();
  Script.ReportCounter.Init(Script.ReportRate);
  Script.DrawCounter.Init(Script.DrawRate);

  AddOnTerminate(@Self.Free);
end;

{
  Entry point, inits and starts the bot main loop.
}
begin
  Bot.Init();
  Bot.Run();
end.
