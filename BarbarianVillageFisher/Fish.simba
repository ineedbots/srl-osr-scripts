{
  Barbarian Village Fisher
  Author: ineedbot
  Date: 7/6/2022

  Fish
}

{$IFNDEF INEEDBOT_BVF_FISH}
{$DEFINE INEEDBOT_BVF_FISH}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the color
}
function TBot.FindRodColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.RodColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.RodColor.FilterSize), __GT__);
end;

{
  Finds the color
}
function TBot.FindFishSpotColor(Area: TBox; SearchTime: Int32=0; Interval: Int32=-1): T2DPointArray;
var
  T: TCountDown;
  TPA: TPointArray;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  T.Init(SearchTime);
  while not T.IsFinished() or (SearchTime = 0) do
  begin
    Result += MainScreen.FindObject(Self.FishSpotColor.RSObject, Area);

    if SearchTime = 0 then
      break;

    Wait(Interval);
  end;

  TPA := Result.Merge();
  Result := TPA.Cluster(MainScreen.ConvertDistance(Self.FishSpotColor.RSObject.ClusterDistance));
  Result.FilterSize(MainScreen.ConvertDistance(Self.FishSpotColor.FilterSize), __GT__);
end;

{
  Is fishing?
}
function TBot.IsFishing(WaitTime: Int32 = 0): Boolean;
var
  ATPA: T2DPointArray;
  ARect: array of TRectangle;
  Rect: TRectangle;
  B: TBox;
  FishInAdjTile: Boolean;
  TPA: TPointArray;
  Mean: TPoint;
begin
  // get adjecent tiles and all colors with the fish spot
  ATPA := Self.FindFishSpotColor(MainScreen.Bounds(), WaitTime, Script.SleepRate);
  ARect := Script.GetAdjTiles();

  // look for at each fish spot
  for TPA in ATPA do
  begin
    Mean := TPA.Mean();

    // look through each adj tile
    for Rect in ARect do
    begin
      // check if this tile contains a fish tile
      if Rect.Contains(Mean) then
      begin
        FishInAdjTile := True;
        break;
      end;
    end;

    if FishInAdjTile then
      break;
  end;

  if not FishInAdjTile then
  begin
    Script.WriteMsg('No fish spots found in adj tiles', True);
    exit(False);
  end;

  if Script.Debug and Script.Drawing then
    RSClient.Image().DrawRect(Rect, clOrange);

  // check if there is a rod over the fish tile
  B := Rect.Expand(MainScreen.ConvertDistance(Self.RodColor.NoColorTileExpand)).Bounds();

  if Script.Debug and Script.Drawing then
    RSClient.Image().DrawBox(B, clGreen);

  ATPA := Self.FindRodColor(B);

  if Length(ATPA) <= 0 then
  begin
    Script.WriteMsg('No rod found over the fish spot tile', True);
    exit(False);
  end;

  if Script.Debug and Script.Drawing then
    RSClient.Image().DrawATPA(ATPA);

  Result := True;
end;

{
  Returns true if clicked on a fishing spot
}
function TBot.ClickFish(out WasClicked: Boolean; SortByPnt: TPoint; WaitTime: Int32; Velocity: TPoint = Point(0, 0)): Boolean;
var
  FishSpots: T2DPointArray;
  TPA: TPointArray;
  B: TBox;
begin
  Script.WriteMsg('Going to click a fish spot...', True);

  FishSpots := Self.FindFishSpotColor(MainScreen.Bounds(), WaitTime, Script.SleepRate);

  if Length(FishSpots) <= 0 then
  begin
    Script.WriteMsg('No fish spots found', True);
    exit(False);
  end;

  Script.WriteMsg('Fish spot color found, checking uptexts', True);
  FishSpots.SortByMiddle(SortByPnt);

  // check each of the spots for the uptext, then click
  for TPA in FishSpots do
  begin
    B := TPA.Bounds();

    if not MainScreen.IsVisible(B.Middle()) then
      continue;

    // check if we need apply velocity
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickFish: Tile velocity no visible', True);
        continue;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image().DrawBox(B, clMoneyGreen);
    end;

    // check the uptext!
    Script.OldMouseMovingCallback := Mouse.OnMoving;
    Mouse.OnMoving := WhileMouseMovesLookForUpText;
    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Self.FishSpotUpText;

    Mouse.Move(B);

    Script.MouseLooksForUpText := [];
    Mouse.OnMoving := Script.OldMouseMovingCallback;
    Script.OldMouseMovingCallback := nil;


    Script.RareSmallWait();

    // check uptext
    if not MainScreen.IsUpText(Self.FishSpotUpText, Random(100, 250)) then
    begin
      Script.WriteMsg('Bad uptext for fish spot', True);

      if Velocity = Point(0, 0) then
        continue // things are moving, we took up time by moving mouse, colors are innaccurate
      else
        break;
    end;

    Script.WriteMsg('Good uptext for fish spot! Clicking!', True);
    Result := True;

    // uptext found, click it!
    if not MainScreen.IsUpText(Self.FishSpotOptions, Random(100, 250)) or (Random() < 0.10) then
      WasClicked := ChooseOption.Select(Self.FishSpotOptions)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := MainScreen.DidRedClick();
    end;

    if not WasClicked then
    begin
      Script.WriteMsg('ClickFish: Didnt click', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    break;
  end;
end;

{
  While we walk to the fishes
}
procedure WalkingToFish(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    // if we clicked the fish spot, then stop the walker
    if Bot.ClickFish(WasClicked, Mouse.Position(), 0, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the fishing spot while moving, nice!');
      Walker^.Enabled := False;
      Bot.WalkerWasEarlySuccess := True;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;
end;

{
  Walks to the fish,
  Returns true if we clicked the fishing spot while walking
}
function TBot.GoToFish(Force: Boolean = False; Click: Boolean = True): Boolean;
var
  Where, OurPos: TPoint;
  PathIdx: Int32;
  Walked: Boolean;
begin
  Script.WriteMsg('Going to fish spot...', True);
  OurPos := Self.RSW.GetMyPos();
  Where := Self.FishTiles[Self.WalkedFish];
  if Force then
    Where := Self.FishWalkTile;

  if Force or (OurPos.DistanceTo(Where) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Where).Mean()) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to fish spot...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.ClickWhileWalking := Click;
    Self.RSW.OnWalkingEvent := WalkingToFish;

    try
      Walked := True;
      Self.RSW.Enabled := True;
      Self.WalkerWasEarlySuccess := False;

      if (Length(Self.ToFishPaths) > 0) and Force then
      begin
        PathIdx := SRL.TruncatedGauss(Low(Self.ToFishPaths), High(Self.ToFishPaths));

        if OurPos.DistanceTo(Self.ToFishPaths[PathIdx][Low(Self.ToFishPaths[PathIdx])]) <
          OurPos.DistanceTo(Self.ToFishPaths[PathIdx][High(Self.ToFishPaths[PathIdx])]) then
          Walked := Self.RSW.WalkPath(Self.ToFishPaths[PathIdx], 8);
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Where.Random(-6, 6, True), 0);
    except
      Walked := False;
    end;
    
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to fish spot');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;

  // set the 'next' fish spot...
  if not Force then
    Self.UpdateWalkedFish(False);
end;

{
  Checks for runelite plugin
  Returns true if using runelite plugin
  Sets Fishing to true or false.
}
function TBot.CheckRuneliteFishingPlugin(out Fishing: Boolean): Boolean;
var
  B: TBox;
  FColor: TOCRColorRule;
begin
  B := [MainScreen.X1(), MainScreen.Y1(), MainScreen.X1() + 150, MainScreen.Y1() + 200];

  FColor := TOCRColorRule.Create([65280, 10]);
  if OCR.LocateText(B, 'Fishing', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Fishing := True;
  end;

  FColor := TOCRColorRule.Create([255, 10]);
  if OCR.LocateText(B, 'NOT fishing', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Fishing := False;
  end;
end;

{
  Waits while fishing
}
procedure TBot.WhileFishing();
var
  CountDown: TCountDown;
  InvCount, IC: Int32;
  Fishing: Boolean;
begin
  // wait to stop moving
  while RSClient.IsLoggedIn() and Minimap.HasFlag(1000) and Minimap.IsPlayerMoving() do
    Self.DoMainLoopStuff('Going to the clicked fishing spot', True);

  // update WalkedFish
  Self.UpdateWalkedFish(True);

  // it takes a bit of time for the rod to show
  Wait(1000, 2000);

  Script.WriteMsg('We are fishing...', True);
  InvCount := Inventory.Count();
  CountDown.Init(Self.FishWaitTime);

  while RSClient.IsLoggedIn() do
  begin
    if Self.CheckRuneliteFishingPlugin(Fishing) then
    begin
      Script.WriteMsg('Detected runelite plugin!', True);
      if not Fishing then
      begin    
        Script.WriteMsg('Runelite told us we are not fishing anymore!', True);
        break;
      end;
    end
    else
    begin
      // make sure we are fishing
      if not Self.IsFishing(Self.FishSpotColorWait) then
      begin
        Script.WriteMsg('We are not fishing anymore...', True);
        break;
      end;

      IC := Inventory.Count();
      // check if we are full
      if IC >= (Inventory.HIGH_SLOT + 1) then
      begin
        Script.WriteMsg('Inv is full, we stopped fishing', True);
        break;
      end;

      // new inv count, we caught something
      if IC <> InvCount then
      begin
        Script.WriteMsg('Our inventory changed, restart the timeout timer', True);
        CountDown.Restart();
      end;
      InvCount := IC;

      // watch for timeout
      if CountDown.IsFinished() then
      begin
        Script.WriteMsg('No fish caught in time, we are not fishing anymore', True);
        break;
      end;
    end;

    Self.DoMainLoopStuff('Fishing...', True);
  end;
end;

{
  Returns true if clicked the fish
}
function TBot.TryClickFish(): Boolean;
var
  WasClicked: Boolean;
  i: Int32;
begin
  for i := 0 to 2 do
  begin
    // make sure we stop moving before trying to click again
    Minimap.WaitPlayerMoving();

    if Self.ClickFish(WasClicked, MainScreen.GetPlayerBox().Middle(), Self.FishSpotColorWait) and WasClicked then
      exit(True);
  end;
end;

////////////////////////////////////////

{
  Executes when we need to gather items to fill our inventory
}
function TBot.DoGathering(): Boolean;
begin
  if Self.TryClickFish() or
    Self.GoToFish() or
    Self.TryClickFish() then
  begin
    Self.AfterActionAntiBan(True);
    Self.WhileFishing();
    Result := True;
  end;
end;

{$ENDIF} // INEEDBOT_BVF_FISH
