{
  Barbarian Village Fisher
  Author: ineedbot
  Date: 7/6/2022

  Misc
}

{$IFNDEF INEEDBOT_BVF_MISC}
{$DEFINE INEEDBOT_BVF_MISC}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}

{
  Returns all fires in the area
}
function TBot.FindFireColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.FireColor.RSObject, Area);
  Result.FilterSize(Self.FireColor.FilterSize, __GT__);
end;

{
  Returns true if the fire is visible, B is the bounds of the fire on the screen
}
function TBot.FindFire(OurTile: TPoint; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  // get the colors and the tile boxes
  TileRect := Self.RSW.GetTileMSEx(OurTile, Self.FireTile);

  B := TileRect.Expand(Round(TileRect.Radius() * Self.FireColor.RadiusExpand)).Bounds();

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindFireColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(5))
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the fire, WasClicked true if clicked it
}
function TBot.ClickFire(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
begin
  // we only want to click the fire if we have an item selected
  if Inventory.GetSelectedSlot() = -1 then
  begin
    Script.WriteMsg('ClickFire: No item selected', True);
    exit();
  end;

  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // find the fire
  if not Self.FindFire(OurTile, B) then
  begin
    Script.WriteMsg('ClickFire: Fire not visible', True);
    exit();
  end;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickFire: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  Result := True;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.FireUpText;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if MainScreen.IsUpText(Self.FireUpText, Random(100, 250)) and (Random() < 10) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.FireUpText);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickFire: Didnt click', True);
    exit();
  end;
end;

{
  Returns true if we clicked the fire
}
function TBot.TryClickFire(RSItem: TRSItem): Boolean;
var
  _: TBox;
  RawSlots: TIntegerArray;
  OurTile: TPoint;
  WasClicked: Boolean;
begin
  Script.WriteMsg('Going to try start cooking', True);

  OurTile := Self.RSW.GetMyPos();
  if not Self.FindFire(OurTile, _) then
  begin
    Script.WriteMsg('Did not find fire', True);
    exit();
  end;

  Inventory.FindItem(RSItem, RawSlots);
  if RawSlots.Len() <= 0 then
  begin
    Script.WriteMsg('TryClickFire: No raw fish', True);
    exit();
  end;

  Inventory.SetSelectedSlot(RawSlots[Random(Low(RawSlots), High(RawSlots))]);
  Wait(0, 1500, wdLeft);
  if Self.ClickFire(WasClicked, OurTile) then
    Result := WasClicked;
end;

{
  While we walk to the fire
}
procedure WalkingToFire(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
  //_: TBox;
  RawSlots: TIntegerArray;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if (Destination = Walker^.Path[High(Walker^.Path)]) {and Bot.FindFire(Position, _)} then
  begin
    if Inventory.GetSelectedSlot() = -1 then
    begin
      if not Inventory.FindItem(Bot.CurrentCookingItem, RawSlots) then
        exit();

      Inventory.SetSelectedSlot(RawSlots[Random(Low(RawSlots), High(RawSlots))]);
      exit(); // try again next go, we moved our mouse, velocity, position is out of date
    end;

    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    // if we clicked the fish spot, then stop the walker
    if Bot.ClickFire(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the fire while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;
end;

{
  Walks to the fire, return true if we clicked it early
}
function TBot.GoToFire(RSItem: TRSItem; Force: Boolean = False): Boolean;
var
  Walked: Boolean;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
begin
  Script.WriteMsg('Going to fire....', True);
  OurPos := Self.RSW.GetMyPos();

  if (OurPos.DistanceTo(Self.FireTile) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Self.FireTile).Mean()) or
    Force then
  begin
    Script.SetStatus('Going to fire spot...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    Bot.CurrentCookingItem := RSItem;
    Self.RSW.OnWalkingEvent := @WalkingToFire;
    try
      Walked := Self.RSW.WebWalk(Self.FireTile.Random(-8, 8, True), 0, BioRandomFixed());
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to fire!');
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Waits while cooking
}
procedure TBot.WhileCooking(RSItem: TRSItem);
var
  RawSlots: TIntegerArray;
  C: Int32;
  CountDown: TCountDown;
begin
  Inventory.FindItem(RSItem, RawSlots);
  C := Length(RawSlots);
  CountDown.Init(Self.CookWaitTime);

  while RSClient.IsLoggedIn() and RawSlots.Clear() and Inventory.FindItem(RSItem, RawSlots) do
  begin
    if C <> Length(RawSlots) then
    begin
      Script.WriteMsg('WhileCooking: Restarting timer', True);
      CountDown.Restart();
    end;
    C := Length(RawSlots);

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WhileCooking: Timed out.', True);
      break;
    end;

    Self.DoMainLoopStuff('Cooking the food', True);
  end;
end;

{
  Returns if we start cooking the fish
}
function TBot.StartCooking(): Boolean;
begin
  Script.WriteMsg('StartCooking: Waiting make menu', True);

  Minimap.WaitFlag();

  if not Make.IsOpen(2500 + Random(1000)) then
  begin
    Script.WriteMsg('ClickFire: make didnt open', True);
    exit();
  end;

  Wait(0, 1000, wdLeft);

  Result := Make.Select(0, MAKE_QUANTITY_ALL, BioRandomCoinFlip());
end;

{
  Cooks the food
}
procedure TBot.CookFish(RSItem: TRSItem);
begin
  if Self.TryClickFire(RSItem) or
    Self.GoToFire(RSItem) or
    Self.TryClickFire(RSItem) or
    Self.GoToFire(RSItem, True) then
  begin
    if Self.StartCooking() then
    begin
      Self.AfterActionAntiBan(True);
      Self.WhileCooking(RSItem);
    end;
  end;
end;

{
  Drops all the logs in our inventory

  Part of this is from Flight's AIOFisher
}
procedure TBot.DropItems();
var
  R: Extended;
  Pattern, FishSlots: TIntegerArray;
  CurFish, i, S: Int32;
begin
  Script.SetStatus('Dropping fish...');

  // query the fish
  Inventory.FindItems(Self.RawFish, FishSlots);
  Inventory.FindItems(Self.CookedFish, FishSlots);
  Inventory.FindItems(Self.BurntFish, FishSlots);
  CurFish := FishSlots.Len();
  Script.WriteMsg('DropItems: Fish slots (before drop): ' + ToStr(FishSlots), True);

  // choose a random drop pattern
  R := Random();
  if R < 0.1 then
    Pattern := Inventory.ErrorPattern(DROP_PATTERN_TOPDOWN, 5)
  else if inRange(R, 0.1, 0.35) then
    Pattern := Inventory.ErrorPattern(DROP_PATTERN_SNAKE, 5)
  else
    Pattern := Inventory.ErrorPattern(DROP_PATTERN_MKEYS, 5);

  // possibly not drop all logs, for antiban
  if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));

  for i := High(Pattern) downto Low(Pattern) do
    if FishSlots.Find(Pattern[i]) = -1 then
      Pattern.Remove(Pattern[i]);

  S := Mouse.Speed;
  Mouse.Speed += Script.FastMouseAdd + Random(-2, 2);
  // drop
  if Self.ShiftDropping then
    Inventory.ShiftDrop(Pattern)
  else
  begin
    for i in Pattern do
    begin
      Inventory.HoverSlot(i);

      if MainScreen.IsUpText('Drop') then
        Mouse.Click(MOUSE_LEFT)
      else
        ChooseOption.Select('Drop');

      Wait(0, 1000, wdLeft);
    end;
  end;
  Mouse.Speed := S;

  // see how many logs we actually dropped, and log it
  FishSlots.Clear();
  Inventory.FindItems(Self.RawFish, FishSlots);
  Inventory.FindItems(Self.CookedFish, FishSlots);
  Inventory.FindItems(Self.BurntFish, FishSlots);
  Self.FishDone += CurFish - FishSlots.Len();
  Script.WriteMsg('DropItems: Fish slots (after drop): ' + ToStr(FishSlots), True);

  Script.SetStatus('Fish dropped!');
  Script.WriteMsg('Dropped fish... Currently fished ' + IntToStr(Self.FishDone) + ' fish!');
end;

{$ENDIF} // INEEDBOT_BVF_MISC
