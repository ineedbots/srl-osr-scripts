{
  Barbarian Village Fisher
  Author: ineedbot
  Date: 7/6/2022

  Misc
}

{$IFNDEF INEEDBOT_BVF_MISC}
{$DEFINE INEEDBOT_BVF_MISC}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the fire tile
}
function TBot.FindFireTile(OurPos: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.FireTile, 5);
end;

{
  Gets the fire box
}
function TBot.GetFireSearchBox(TileRect: TRectangle): TBox;
begin
  Result := TileRect.Expand(Round(TileRect.Radius() * Self.FireColor.RadiusExpand)).Bounds();
end;

{
  Returns all fires in the area
}
function TBot.FindFireColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.FireColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.FireColor.FilterSize), __GT__);
end;

{
  Returns true if the fire is visible, B is the bounds of the fire on the screen
}
function TBot.FindFire(OurTile: TPoint; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  // get the colors and the tile boxes
  TileRect := Self.FindFireTile(OurTile);

  B := Self.GetFireSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindFireColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.FireColor.NoColorTileExpand))
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the fire, WasClicked true if clicked it
}
function TBot.ClickFire(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // find the fire
  if not Self.FindFire(OurTile, B) then
  begin
    Script.WriteMsg('ClickFire: Fire not visible', True);
    exit();
  end;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickFire: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  Result := True;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.FireUpText;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if MainScreen.IsUpText(Self.FireOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.FireOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickFire: Didnt click', True);
    exit();
  end;
end;

{
  Returns true if we clicked the fire
}
function TBot.TryClickFire(RSItem: TRSItem): Boolean;
var
  _: TBox;
  RawSlots: TIntegerArray;
  OurTile: TPoint;
  WasClicked: Boolean;
begin
  Script.WriteMsg('Going to try start cooking', True);

  OurTile := Self.RSW.GetMyPos();
  if not Self.FindFire(OurTile, _) then
  begin
    Script.WriteMsg('Did not find fire', True);
    exit();
  end;

  Inventory.FindItem(RSItem, RawSlots);
  if Length(RawSlots) <= 0 then
  begin
    Script.WriteMsg('TryClickFire: No raw fish', True);
    exit();
  end;

  Inventory.SetSelectedSlot(RawSlots[Random(Low(RawSlots), High(RawSlots))]);
  Wait(0, 1500, wdLeft);
  if Self.ClickFire(WasClicked, OurTile) then
    Result := WasClicked;

  if not WasClicked then
    Inventory.SetSelectedSlot(-1);
end;

{
  While we walk to the fire
}
procedure WalkingToFire(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    // if we clicked the fish spot, then stop the walker
    if Bot.ClickFire(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the fire while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // make sure we can walk...
  Inventory.SetSelectedSlot(-1);

  if MainScreen.IsUpText('->') then
    Mouse.Click(MOUSE_LEFT);

  // mainscreen bank fix
  if Bot.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface(Script.ShouldPressKeyboard());
end;

{
  Walks to the fire, return true if we clicked it early
}
function TBot.GoToFire(RSItem: TRSItem; Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  OurPos: TPoint;
  B: TBox;
  BeforeCallback: TRSWalker_OnWalkEvent;
  OldUpTexts, OldOptions: TStringArray;
begin
  Script.WriteMsg('Going to fire....', True);
  OurPos := Self.RSW.GetMyPos();

  if Force or (OurPos.DistanceTo(Self.FireTile) > 30) or
    not Self.FindFire(OurPos, B) then
  begin
    Script.SetStatus('Going to fire spot...');

    OldUpTexts := Self.FireUpText;
    OldOptions := Self.FireOptions;
    BeforeCallback := @Self.RSW.OnWalkingEvent;

    Self.FireOptions := Self.FireAltOptions;
    Self.FireUpText := Self.FireAltUpTexts;

    Bot.CurrentCookingItem := RSItem;

    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToFire;
    try
      Walked := Self.RSW.WalkBlind(Self.FireTile.Random(-6, 6, True), 0);
    except
    end;

    Self.RSW.OnWalkingEvent := @BeforeCallback;
    Self.FireUpText := OldUpTexts;
    Self.FireOptions := OldOptions;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to fire!'); 
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Checks for runelite plugin
  Returns true if using runelite plugin
  Sets Cooking to true or false.
}
function TBot.CheckRuneliteCookingPlugin(out Cooking: Boolean): Boolean;
var
  B: TBox;
  FColor: TOCRColorRule;
begin
  B := [MainScreen.X1, MainScreen.Y1, MainScreen.X1 + 150, MainScreen.Y1 + 200];

  FColor := TOCRColorRule.Create([65280, 10]);
  if OCR.LocateText(B, 'Cooking', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Cooking := True;
  end;

  FColor := TOCRColorRule.Create([255, 10]);
  if OCR.LocateText(B, 'NOT cooking', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Cooking := False;
  end;
end;

{
  Waits while cooking
}
procedure TBot.WhileCooking(RSItem: TRSItem);
var
  RawSlots: TIntegerArray;
  C: Int32;
  CountDown: TCountDown;
  Cooking: Boolean;
begin
  Inventory.FindItem(RSItem, RawSlots);
  C := Length(RawSlots);
  CountDown.Init(Self.CookWaitTime);

  // wait a bit
  Wait(1000, 2000);

  while RSClient.IsLoggedIn() do
  begin
    if Self.CheckRuneliteCookingPlugin(Cooking) then
    begin      
        Script.WriteMsg('WhileCooking: Found runelite plugin!', True);
      if not Cooking then
      begin    
        Script.WriteMsg('WhileCooking: Runelite told us not cooking!!', True);
        break;
      end;
    end
    else
    begin
      RawSlots.Clear();

      if not Inventory.FindItem(RSItem, RawSlots) then
      begin
        Script.WriteMsg('WhileCooking: No more food in inv!', True);
        break;
      end;

      if C <> Length(RawSlots) then
      begin
        Script.WriteMsg('WhileCooking: Restarting timer', True);
        CountDown.Restart();
      end;
      C := Length(RawSlots);

      if CountDown.IsFinished() then
      begin
        Script.WriteMsg('WhileCooking: Timed out.', True);
        break;
      end;
    end;

    Self.DoMainLoopStuff('Cooking the food', True);
  end;
end;

{
  Returns if we start cooking the fish
}
function TBot.StartCooking(): Boolean;
begin
  Script.WriteMsg('StartCooking: Waiting make menu', True);

  Minimap.WaitFlag();

  if not Make.IsOpen(2500 + Random(1000)) then
  begin
    Script.WriteMsg('ClickFire: make didnt open', True);
    exit();
  end;

  Wait(250, 1500, wdLeft);

  Result := Make.Select(0, MAKE_QUANTITY_ALL, Script.ShouldPressKeyboard());
end;

{
  Cooks the food
}
procedure TBot.CookFish(RSItem: TRSItem);
begin
  if Self.TryClickFire(RSItem) or
    Self.GoToFire(RSItem) or
    Self.TryClickFire(RSItem) or
    Self.GoToFire(RSItem, True) or
    Self.TryClickFire(RSItem) then
  begin
    if Self.StartCooking() then
    begin
      Self.AfterActionAntiBan(True);
      Self.WhileCooking(RSItem);
    end;
  end;
end;

{
  Drops all the logs in our inventory

  Part of this is from Flight's AIOFisher
}
procedure TBot.DropItems();
var
  Pattern, FishSlots: TIntegerArray;
  CurFish, i, S: Int32;
begin
  Script.SetStatus('Dropping fish...');

  // query the fish
  Inventory.FindItems(Self.RawFish, FishSlots);
  Inventory.FindItems(Self.CookedFish, FishSlots);
  Inventory.FindItems(Self.BurntFish, FishSlots);
  CurFish := Length(FishSlots);
  Script.WriteMsg('DropItems: Fish slots (before drop): ' + ToStr(FishSlots), True);

  // choose a random drop pattern
  Pattern := Bank.GetGoodPattern();

  // possibly not drop all logs, for antiban
  if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));

  // only drop logs...
  for i := High(Pattern) downto Low(Pattern) do
    if FishSlots.Find(Pattern[i]) = -1 then
      Pattern.Remove(Pattern[i]);

  S := Mouse.Speed;
  Mouse.Speed += Script.FastMouseAdd + Random(-2, 2);
  // drop
  if Script.ShiftClicking then
    Inventory.ShiftDrop(Pattern)
  else
  begin
    for i in Pattern do
    begin
      Inventory.HoverSlot(i);

      if MainScreen.IsUpText('Drop') then
        Mouse.Click(MOUSE_LEFT)
      else
        ChooseOption.Select('Drop');

      Wait(0, 1000, wdLeft);
    end;
  end;
  Mouse.Speed := S;

  // see how many logs we actually dropped, and log it
  FishSlots.Clear();
  Inventory.FindItems(Self.RawFish, FishSlots);
  Inventory.FindItems(Self.CookedFish, FishSlots);
  Inventory.FindItems(Self.BurntFish, FishSlots);
  Self.FishDone += CurFish - Length(FishSlots);
  Script.WriteMsg('DropItems: Fish slots (after drop): ' + ToStr(FishSlots), True);

  Script.SetStatus('Fish dropped!');
  Script.WriteMsg('Dropped fish... Currently fished ' + IntToStr(Self.FishDone) + ' fish!');
end;

{$ENDIF} // INEEDBOT_BVF_MISC
