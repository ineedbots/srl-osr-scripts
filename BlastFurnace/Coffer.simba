{
  BlastFurnace
  Author: ineedbot
  Date: 6/30/2022

  Handles everything to do with the coffer
}

{$IFNDEF INEEDBOT_BLASTFURANCE_COFFER}
{$DEFINE INEEDBOT_BLASTFURANCE_COFFER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Bank.simba}

{
  Finds the coffer tile
}
function TBot.FindCofferTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.CofferTile, Self.CofferTileHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetCofferSearchBox(CofferTile: TRectangle): TBox;
begin
  Result := CofferTile.Expand(Round(CofferTile.Radius() * Self.CofferColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindCofferColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.CofferColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.CofferColor.FilterSize), __GT__);
end;

{
  Returns true if the coffer is visible, B is the bounds of the coffer on the screen
}
function TBot.FindCoffer(OurTile: TPoint; Height: Int32; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindCofferTile(OurTile, Height);

  B := Self.GetCofferSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindCofferColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.CofferColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the coffer, WasClicked true if clicked it
}
function TBot.ClickCoffer(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeightOffset(OurTile);

  // find the coffer
  if not Self.FindCoffer(OurTile, Height, B) then
  begin
    Script.WriteMsg('ClickCoffer: coffer not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickCoffer: Found coffer, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickCoffer: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.CofferUpTextsStr;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.CofferUpTextsStr, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickCoffer: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickCoffer: Good coffer uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.CofferOptionsTextsStr, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.CofferOptionsTextsStr);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickCoffer: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickCoffer: Clicked', True);
end;

{
  While we walk to the coffer
}
procedure WalkingToCoffer(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickCoffer(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the coffer while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // mainscreen bank fix
  if Bot.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface(Script.ShouldPressKeyboard());
end;

{
  Walks to the coffer, return true if we clicked it early
}
function TBot.GoToCoffer(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  Height: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to coffer....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);

  if Force or (OurPos.DistanceTo(Self.CofferTile) > 50) or not Self.FindCoffer(OurPos, Height, B) then
  begin
    Script.SetStatus('Going to coffer...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToCoffer;
    try
      Walked := Self.RSW.WalkBlind(Self.CofferTile.Random(-6, 6, True), 0);
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to coffer!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Waits for the coffer option to open
}
function TBot.WaitCofferOption(): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // look for the text
    if Chat.IsOpen() and Chat.GetChatTitle().Strip().StartsWith(Self.CofferChatTitleTexts[0]) then
    begin
      Script.WriteMsg('Found the coffer option', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitCofferOption: Still moving...', True);
      CountDown.Restart();
    end;

    // watch for time outs
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitCofferOption: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to coffer....', False);
  end;
end;

{
  Does coffer things
}
function TBot.GoRefillCoffer(): Boolean;
var
  Item: TRSItem;
  ClickedCoffer: Boolean;
begin
  Item := '';
  // get the coins if needed
  if not Inventory.FindItem(Self.CoinsItem) then
  begin
    if not Self.GoDoBank(False, True, Item, Self.CofferAmount) then
      Self.AfterActionAntiBan(True);
    Wait(0, 1500, wdLeft);
  end;

  // check if we have the coins
  if not Inventory.FindItem(Self.CoinsItem) then
  begin
    Script.WriteMsg('no coins');
    exit();
  end;

  // click it
  if (Self.ClickCoffer(ClickedCoffer) and ClickedCoffer)
    or Self.GoToCoffer()
    or (Self.ClickCoffer(ClickedCoffer) and ClickedCoffer)
    or Self.GoToCoffer(True)
    or (Self.ClickCoffer(ClickedCoffer) and ClickedCoffer) then
  begin
    Self.AfterActionAntiBan(True);

    // wait for the options to appear
    if Self.WaitCofferOption() then
    begin
      // select the option
      if Chat.ClickOption(Self.CofferOptions[0], Script.ShouldPressKeyboard()) then
      begin
        // answer the query
        Wait(50, 1250, wdLeft);
        if not Chat.AnswerQuery(Self.CofferQueries[0], IntToStr(Self.CofferAmount), 2500) then
        begin
          Script.WriteMsg('Failed to answer query');

          // check if we need to pay the foreman
          if Chat.GetChat().Strip().StartsWith(Self.CofferForemanTexts[0]) then
          begin
            Self.NeedToPayForeman := True;
            Result := True;
            Script.WriteMsg('Need to pay foreman');
          end;
        end
        else
          Result := True;

        Wait(750, 1500, wdLeft);
      end
      else
        Script.WriteMsg('Failed to open option');
    end
    else
      Script.WriteMsg('Coffer option didn''t appear');
  end;

  // withdraw the item again if needed
  if (Item <> '') or Inventory.FindItem(Self.CoinsItem) then
  begin
    if Item = '' then
      Item := 'was bar';

    if not Self.GoDoBank(False, True, Item, Self.CofferAmount) then
      Self.AfterActionAntiBan(True);
  end;
end;

{$ENDIF} // INEEDBOT_BLASTFURANCE_COFFER

