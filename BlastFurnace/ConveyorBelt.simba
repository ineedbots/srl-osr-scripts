{
  BlastFurnace
  Author: ineedbot
  Date: 6/30/2022

  Handles everything to do with the conveyor belt
}

{$IFNDEF INEEDBOT_BLASTFURANCE_CONVEYORBELT}
{$DEFINE INEEDBOT_BLASTFURANCE_CONVEYORBELT}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once MeltingPot.simba}
{$include_once Dispenser.simba}

{
  Finds the conveyor tile
}
function TBot.FindConveyorTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.ConveyorTile, Self.ConveyorTileHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetConveyorSearchBox(ConveyorTile: TRectangle): TBox;
begin
  Result := ConveyorTile.Expand(Round(ConveyorTile.Radius() * Self.ConveyorBeltColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindConveyorColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.ConveyorBeltColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.ConveyorBeltColor.FilterSize), __GT__);
end;

{
  Returns true if the cbelt is visible, B is the bounds of the belt on the screen
}
function TBot.FindConveyor(OurTile: TPoint; Height: Int32; out B: TBox; HasMeltingPotPT: Boolean = False; MeltingPotPT: TPoint = Point(0, 0)): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindConveyorTile(OurTile, Height);

  B := Self.GetConveyorSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindConveyorColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.ConveyorBeltColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
  begin
    if HasMeltingPotPT then
      B := ATPA.FurthestFrom(MeltingPotPT).Bounds()
    else
      B := ATPA.Biggest().Bounds();
  end;
end;

{
  Returns true if found the belt, WasClicked true if clicked it
}
function TBot.ClickConveyor(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  FoundPot: Boolean;
  PotPT: TPoint;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeightOffset(OurTile);

  if Self.FindMeltingPot(OurTile, Height, B) then
  begin
    FoundPot := True;
    PotPT := B.Middle();
  end;

  // find the belt
  if not Self.FindConveyor(OurTile, Height, B, FoundPot, PotPT) then
  begin
    Script.WriteMsg('ClickConveyor: Belt not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickConveyor: Found belt, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickConveyor: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.ConveyorUpTextsStr;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.ConveyorUpTextsStr, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickConveyor: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickConveyor: Good belt uptext, clicking', True);

  if MainScreen.IsUpText(Self.ConveyorOptionsTextsStr, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.ConveyorOptionsTextsStr);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickConveyor: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickConveyor: Clicked', True);
end;

{
  While we walk to the belt
}
procedure WalkingToConveyor(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickConveyor(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the belt while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;
end;

{
  Walks to the belt, return true if we clicked it early
}
function TBot.GoToConveyor(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  PathIdx, Height: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to belt....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);

  if Force or (OurPos.DistanceTo(Self.ConveyorTile) > 50) or not Self.FindConveyor(OurPos, Height, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      
    Script.SetStatus('Going to belt...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToConveyor;
    try
      PathIdx := SRL.TruncatedGauss(Low(Self.ToConveyorPaths), High(Self.ToConveyorPaths));

      if OurPos.DistanceTo(Self.ToConveyorPaths[PathIdx][Low(Self.ToConveyorPaths[PathIdx])]) <
        OurPos.DistanceTo(Self.ToConveyorPaths[PathIdx][High(Self.ToConveyorPaths[PathIdx])]) then
        Walked := Self.RSW.WalkPath(Self.ToConveyorPaths[PathIdx], 8)
      else
      begin
        Walked := True;
        Self.RSW.Enabled := True;
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Self.ConveyorTile.Offset(Self.ConveyorTileWalkOffset).Random(-6, 6, True), 0);
    except
      Walked := False;
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to belt!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Wait for ores to be placed
}
function TBot.WaitPlaceConveyor(IC: Int32; out FailReason: Int32): Boolean;
var
  CountDown: TCountdown;
  S: String;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // is the bankpin open?
    if BankPin.IsOpen() then
    begin
      Wait(1000, 1750);
      Script.WriteMsg('WaitPlaceConveyor: Entering pin...', True);
      Mouse.Move(Minimap.Bounds());
      BankPin.Enter(Login.GetPlayer().Pin);
      Wait(500, 1000);
      CountDown.Restart();
    end
    // check if our inv changed
    else if Inventory.Count() <> IC then
    begin
      Script.WriteMsg('WaitPlaceConveyor: Inv changed, must of placed!', True);
      exit(True);
    end;

    // check for failure messages
    if Chat.IsOpen() then
    begin
      // is it the add ore option?
      if Chat.GetChatTitle().Strip().StartsWith(Self.ConveyorChatAddOreTexts[0]) then
      begin
        FailReason := 1;
        exit(True);
      end;

      S := Chat.GetChat().Strip();

      // do we need to pay the foreman
      if S.StartsWith(Self.ConveyorChatForemanTexts[0]) then
      begin
        FailReason := 2;
        exit(False);
      end;

      // is there bars to collect or too many ores?
      if S.StartsWith(Self.ConveyorChatCollectTexts[0]) or S.StartsWith(Self.ConveyorChatOreSmeltsTexts[0]) then
      begin
        FailReason := 3;
        exit(False);
      end;
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitPlaceConveyor: Still moving...', True);
      CountDown.Restart();
    end;

    // did it timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitPlaceConveyor: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to belt...', False);
  end;

  Script.WriteMsg('WaitPlaceConveyor: Timed out...', True);
end;

{
  Empties coalbag
}
function TBot.EmptyCoalBag(): Boolean;
var
  CoalBagSlot, NumCoal, IC: Int32;
  CoalSlots: TIntegerArray;
begin
  // gather info
  Inventory.FindItem(Self.CoalBagItem, CoalBagSlot);
  Inventory.FindItem(Self.CoalItem, CoalSlots);

  // count the numbers
  NumCoal := Length(CoalSlots);
  IC := Inventory.Count();

  Script.WriteMsg('Emptying coalBag: ' + ToStr(Self.InCoalBag), True);

  // empty it
  // no lagarino pls
  if Script.ShiftClicking and (Random() < 0.9) then
  begin
    if not Inventory.ShiftClick(CoalBagSlot) then
    begin
      Script.WriteMsg('Couldn''t empty the coalbag with shift click??????');
      exit();
    end;
  end
  else
  begin
    if not Inventory.ClickSlot(CoalBagSlot, 'Empty') then
    begin
      Script.WriteMsg('Couldn''t empty the coalbag??????');
      exit();
    end;
  end;

  // wait for inv to change!
  if not Inventory.WaitChange(IC, SRL.SkewedRand(3000, 2500, 4000)) then
  begin
    Script.WriteMsg('Coal bag didn''t change inv count');
    exit();
  end;
  Wait(0, 750, wdLeft);

  // count the number!
  CoalSlots.Clear();
  if not Inventory.FindItem(Self.CoalItem, CoalSlots) then
  begin
    Script.WriteMsg('No coal from coalbag');
    exit();
  end;

  Self.InCoalBag -= (Length(CoalSlots) - NumCoal);
  NumCoal := Length(CoalSlots);

  Script.WriteMsg('CoalBag: ' + ToStr(Self.InCoalBag), True);
  Result := True;
end;

{
  Clicks the belt, waits for an output
}
function TBot.PlaceOnTheBelt(out Fatal: Boolean; CoalBag: Boolean): Boolean;
var
  CoalBagSlot, IC, NumCoal, NumOres, FailReason, x, y: Int32;
  OreSlots, CoalSlots: TIntegerArray;
  ClickedBelt, RLP: Boolean;
begin
  // gather info
  Inventory.FindItem(Self.CoalBagItem, CoalBagSlot);
  Inventory.FindItem(Self.CoalItem, CoalSlots);
  Inventory.FindItem(Self.OreItem, OreSlots);

  // remember numbers
  IC := Inventory.Count();
  NumCoal := Length(CoalSlots);
  NumOres := Length(OreSlots);

  Script.WriteMsg('NumCoal: ' + ToStr(NumCoal) + '  NumOres: ' + ToStr(NumOres), True);

  // click it!
  if not ((Self.ClickConveyor(ClickedBelt) and ClickedBelt)
    or Self.GoToConveyor()
    or (Self.ClickConveyor(ClickedBelt) and ClickedBelt)
    or Self.GoToConveyor(True)
    or (Self.ClickConveyor(ClickedBelt) and ClickedBelt)) then
  begin
    Script.WriteMsg('Failed to click the belt');
    exit();
  end;

  Self.AfterActionAntiBan(True, False);

  // get ready to use the coalbag
  Wait(0, 1500, wdLeft);
  if CoalBag and (Random() < 0.8) then
    Mouse.Move(Inventory.GetSlotBox(CoalBagSlot));

  // wait for an outcome
  if not Self.WaitPlaceConveyor(IC, FailReason) then
  begin
    // do we need to pay the foreman?
    if FailReason = 2 then
    begin
      Script.WriteMsg('Need to pay foreman');
      Self.NeedToPayForeman := True;

      Fatal := True;
    end;

    // need to check the values
    if FailReason = 3 then
    begin
      Self.GetCofferAmount(Self.RCoffer, RLP, x, y);

      // not using runelite, lets read the values from the things
      if not RLP then
      begin
        if not Self.CheckTheDispenser() then
          Self.AfterActionAntiBan(True, True, True);

        if not Self.CheckThePot() then
          Self.AfterActionAntiBan(True, True, True);
      end;

      Fatal := True;
    end;

    Script.WriteMsg('Couldn''t wait to place items on belt');
    exit();
  end;

  Wait(0, 1500, wdLeft);

  // need to do an option?
  if FailReason = 1 then
  begin
    // do it
    if not Chat.ClickOption(Self.ConveyorAddOreOptionTexts[0], Script.ShouldPressKeyboard()) then
    begin
      Script.WriteMsg('Couldn''t select option for belt!');
      exit();
    end;

    Wait(1500, 2500);
  end;

  // ok! the stuff was placed! count it!
  CoalSlots.Clear();
  if Inventory.FindItem(Self.CoalItem, CoalSlots) then
    Script.WriteMsg('Still have coal?');
  OreSlots.Clear();
  if Inventory.FindItem(Self.OreItem, OreSlots) then
    Script.WriteMsg('Still have ore?');

  if NumCoal <> Length(CoalSlots) then
    Self.RCoal += (NumCoal - Length(CoalSlots));

  if NumOres <> Length(OreSlots) then
  begin
    Self.ROres += (NumOres - Length(OreSlots));
    if (NumOres - Length(OreSlots)) >= Self.WorkingInvCount then
      Self.NeedToCollect := True;
  end;

  Script.WriteMsg('Placed the stuff, Coal ' + ToStr(Self.RCoal) + '  Ore: ' + ToStr(Self.ROres), True);
  Result := True;
end;

{
  Does conveyorbelt things
}
function TBot.GoDoConveyor(): Boolean;
var
  HasCoalBag, Fatal: Boolean;
  CoalBagSlot, i: Int32;
begin
  // gather info
  Script.WriteMsg('Doing belt...', True);
  HasCoalBag := (Inventory.FindItem(Self.CoalBagItem, CoalBagSlot) and (Self.InCoalBag > 0));

  if not Self.PlaceOnTheBelt(Fatal, HasCoalBag) then
  begin
    Script.WriteMsg('Failed to place stuff on the belt');
    exit();
  end;

  Result := True;

  // do coalbag
  if HasCoalBag then
  begin
    // empty the bag
    for i := 0 to 3 do
    begin
      if Self.EmptyCoalBag() then
        break;

      Wait(1000, 2000);
      Mouse.Move(Inventory.GetSlotBox(CoalBagSlot), True);

      if i = 3 then
      begin
        Script.WriteMsg('Failed to empty the coalbag');
        exit();
      end;
    end;

    // emptied, place
    for i := 0 to 3 do
    begin
      if Self.PlaceOnTheBelt(Fatal, False) then
        break;

      Wait(1000, 2000);

      if (i = 3) or Fatal then
      begin
        Script.WriteMsg('Failed to empty the coalbag');
        exit();
      end;
    end;
  end;
end;

{$ENDIF} // INEEDBOT_BLASTFURANCE_CONVEYORBELT

