{
  BlastFurnace
  Author: ineedbot
  Date: 6/30/2022

  Handles everything to do with the dispenser
}

{$IFNDEF INEEDBOT_BLASTFURANCE_DISPENSER}
{$DEFINE INEEDBOT_BLASTFURANCE_DISPENSER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once MeltingPot.simba}
{$include_once Sink.simba}

{
  Finds the Dispenser tile
}
function TBot.FindDispenserTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.DispenserTile, Self.DispenserTileHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetDispenserSearchBox(DispenserTile: TRectangle): TBox;
begin
  Result := DispenserTile.Expand(Round(DispenserTile.Radius() * Self.DispenserColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindDispenserColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.DispenserColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.DispenserColor.FilterSize), __GT__);
end;

{
  Returns all object colors within the box
}
function TBot.FindHotDispenserColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.HotDispenserColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.HotDispenserColor.FilterSize), __GT__);
end;

{
  Returns all object colors within the box
}
function TBot.FindCoolDispenserColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.CoolDispenserColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.CoolDispenserColor.FilterSize), __GT__);
end;

{
  Returns true if the dispenser is visible, B is the bounds of the dispenser on the screen
}
function TBot.FindDispenser(OurTile: TPoint; Height: Int32; out B: TBox; out DType: Int32): Boolean;
var
  TileRect: TRectangle;
  ATPA, ATPA2, ATPA3: T2DPointArray;
begin
  TileRect := Self.FindDispenserTile(OurTile, Height);

  B := Self.GetDispenserSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindDispenserColor(B);
  ATPA2 := Self.FindCoolDispenserColor(B);
  ATPA3 := Self.FindHotDispenserColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.DispenserColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();

  if (Length(ATPA2) <= 0) and (Length(ATPA3) <= 0) then
    DType := 0 // none
  else if Length(ATPA2) <= 0 then
    DType := 1 // hot
  else if Length(ATPA2) <= 0 then
    DType := 2 // cold
  else if Length(ATPA2.Biggest()) < Length(ATPA3.Biggest()) then
    DType := 1
  else
    DType := 2;
end;

{
  Should we click the dispenser??
}
function TBot.ShouldClickDispenser(Pos: TPoint): Boolean;
var
  TakeStr: String;
  B: TBox;
  DType, Height, x, y: Int32;
  RLP: Boolean;
begin
  TakeStr := 'Take';
  Height := Self.GetHeightOffset(Pos);

  if TakeStr.IsInString(Self.DispenserOptionsTextsStr) then
  begin
    Self.GetCofferAmount(Self.RCoffer, RLP, x, y);
    Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
    Self.GetWorkingInvCount(Self.WorkingInvCount);

    if Self.ShouldCollectBars() then
    begin
      if Self.UsingIceGloves then
        exit(True);

      if Self.FindDispenser(Pos, Height, B, DType) then
      begin
        if DType = 2 then
          exit(True);
      end;
    end;

    exit();
  end;

  Result := True;
end;

{
  Returns true if found the dispenser, WasClicked true if clicked it
}
function TBot.ClickDispenser(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height, DType: Int32;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeightOffset(OurTile);

  // find the
  if not Self.FindDispenser(OurTile, Height, B, DType) then
  begin
    Script.WriteMsg('ClickDispenser: not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickDispenser: Found, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickDispenser: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.DispenserUpTextsStr;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.DispenserUpTextsStr, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickDispenser: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickDispenser: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.DispenserOptionsTextsStr, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.DispenserOptionsTextsStr);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickDispenser: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickDispenser: Clicked', True);
end;

{
  Puts on the ice gloves if its in our inv
}
function TBot.PreTakeDispenser(): Boolean;
var
  IceGlovesSlot: Int32;
  TakeStr: String;
begin
  if not Self.UsingIceGloves then
    exit();

  TakeStr := 'Take';
  if not TakeStr.IsInString(Self.DispenserOptionsTextsStr) then
    exit();

  if not Inventory.FindItem(Self.IceGlovesItem, IceGlovesSlot) then
    exit();

  // wear the icegloves
  Result := Inventory.ClickSlot(IceGlovesSlot, 'Wear');

  if Result then
    Wait(0, 750, wdLeft);
end;

{
  While we walk to the dispenser
}
procedure WalkingToDispenser(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if (Destination = Walker^.Path[High(Walker^.Path)]) and Bot.ShouldClickDispenser(Position) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    Bot.PreTakeDispenser();

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickDispenser(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the dispenser while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // mainscreen bank fix
  if Bot.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface(Script.ShouldPressKeyboard());
end;

{
  Walks to the dispenser, return true if we clicked it early
}
function TBot.GoToDispenser(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  PathIdx, Height, DType: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to dispenser....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);

  if Force or (OurPos.DistanceTo(Self.DispenserTile) > 50) or not Self.FindDispenser(OurPos, Height, B, DType) then
  begin
    Script.SetStatus('Going to dispenser...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToDispenser;
    try
      PathIdx := SRL.TruncatedGauss(Low(Self.ToDispenserPaths), High(Self.ToDispenserPaths));

      if OurPos.DistanceTo(Self.ToDispenserPaths[PathIdx][Low(Self.ToDispenserPaths[PathIdx])]) <
        OurPos.DistanceTo(Self.ToDispenserPaths[PathIdx][High(Self.ToDispenserPaths[PathIdx])]) then
        Walked := Self.RSW.WalkPath(Self.ToDispenserPaths[PathIdx], 8)
      else
      begin
        Walked := True;
        Self.RSW.Enabled := True;
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Self.DispenserTile.Offset(Self.DispenserTileWalkOffset).Random(-6, 6, True), 0);
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to dispenser!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  waits for chat to open for the dispenser
}
function TBot.WaitCheckDispenser(): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // check if the check stuff is there
    if Chat.IsOpen() and
      (Chat.GetChat().Strip().StartsWith(Self.DispenserChatTexts[0]) or
      Chat.GetChat().Strip().StartsWith(Self.DispenserChatNoBars[0])) then
    begin
      Script.WriteMsg('WaitCheckDispenser: Found chat', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitCheckDispenser: Still moving...', True);
      CountDown.Restart();
    end;

    // timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitCheckDispenser: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Checking the dispenser....', False);
  end;
end;

{
  Checks the dispenser
}
procedure TBot.CheckTheDispenser();
var
  ClickedDispenser: Boolean;
  RLP: Boolean;
  x, y: Int32;
begin
  Script.WriteMsg('Reading dispenser');
  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  Self.DispenserOptionsTextsStr := Self.DispenserCheckOptionsTextStr;

  // click the dispenser
  if not ((Self.ClickDispenser(ClickedDispenser) and ClickedDispenser)
    or Self.GoToDispenser()
    or (Self.ClickDispenser(ClickedDispenser) and ClickedDispenser)
    or Self.GoToDispenser(True)
    or (Self.ClickDispenser(ClickedDispenser) and ClickedDispenser)) then
  begin
    Script.WriteMsg('Failed to click dispenser');
    exit();
  end;

  Self.AfterActionAntiBan(True);

  // wait for the chat to open
  Self.WaitCheckDispenser();
  Wait(0, 750, wdLeft);

  // read the values
  Self.GetCofferAmount(Self.RCoffer, RLP, x, y);
  Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  // get the next page
  Chat.ClickContinue(Script.ShouldPressKeyboard());
  Wait(0, 1500, wdLeft);

  // read the values
  Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  Wait(0, 750, wdLeft);
end;

{
  waits for the make screen to open or inv to change
}
function TBot.WaitGoCollectBars(IC: Int32): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // did our inv change? sometimes the make doesnt open when its for 1 bar
    if Inventory.Count() <> IC then
    begin
      Script.WriteMsg('WaitGoCollectBars: inv changed', True);
      exit(True);
    end;

    // make opened
    if Make.IsOpen() and (Length(Make.GetItemButtons()) > 0) then
    begin
      Script.WriteMsg('WaitGoCollectBars: make opened', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitGoCollectBars: Still moving...', True);
      CountDown.Restart();
    end;

    // timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitGoCollectBars: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Collecting bars....', False);
  end;
end;

{
  Should we collect the bars?
}
function TBot.ShouldCollectBars(): Boolean;
begin
  // bars?
  if Self.RBars <= 0 then
    exit();

  // check if we just placed our ores on the belt
  if not Self.NeedToCollect then
  begin
    // no ores? then collect
    if Self.ROres <= 0 then
      exit(True);

    // no coal? collect.
    if Self.RCoal < Self.CoalRequiredForOre() then
      exit(True);
  end;

  // is our inv gunna be full when we take it? collect
  Result := (Self.RBars >= Self.WorkingInvCount);
end;

{
  Does collection of the bars things
}
procedure TBot.GoCollectBars();
var
  RLP, ClickTheDispenser, ClickedDispenser: Boolean;
  BarSlots: TIntegerArray;
  x, y, DType, Height, IC, BarCount, GoldGlovesSlot: Int32;
  OurPos: TPoint;
  B: TBox;
  CountDown: TCountDown;
label
  go_exit;
begin
  // count the numbers
  Script.WriteMsg('Collecting bars', True);

  IC := Inventory.Count();
  Inventory.FindItem(Self.BarItem, BarSlots);
  BarCount := Length(BarSlots);

  // we want to take from the dispenser
  Self.DispenserOptionsTextsStr := Self.DispenserTakeOptionsTextStr;

  Self.GetCofferAmount(Self.RCoffer, RLP, x, y);
  Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
  Self.GetWorkingInvCount(Self.WorkingInvCount);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);

  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  // try to just click it first if we can ofc
  // are there bars ? can we see the dispenser?
  if Self.ShouldCollectBars() and Self.FindDispenser(OurPos, Height, B, DType) then
  begin
    Script.WriteMsg('DType: ' + ToStr(DType), True);

    // is it molten? can we grab it?
    if Self.UsingIceGloves or (DType = 2) then
    begin
      Script.WriteMsg('Clicking the dispenser!', True);
      Self.PreTakeDispenser();
      if Self.ClickDispenser(ClickedDispenser) and ClickedDispenser then
        ClickTheDispenser := True;
    end;
  end;

  // go to it
  if not ClickTheDispenser and not Self.GoToDispenser(True) then
  begin
    Script.WriteMsg('Waiting for the bars to cook.', True);

    ClickTheDispenser := False;
    CountDown.Init(SRL.SkewedRand(10000, 6000, 15000));

    // wait for it to be good to click!
    while RSClient.IsLoggedIn() do
    begin
      // read values
      Self.GetCofferAmount(Self.RCoffer, RLP, x, y);
      Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
      Self.GetWorkingInvCount(Self.WorkingInvCount);

      Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

      // we assume bars > 0 means dtype <> 0
      // if the bars are ready!
      if Self.ShouldCollectBars() then
      begin
        // check if we can take from the dispenser
        if Self.UsingIceGloves then
        begin
          ClickTheDispenser := True;
          break;
        end;

        // find the dispenser
        OurPos := Self.RSW.GetMyPos();
        Height := Self.GetHeightOffset(OurPos);
        if Self.FindDispenser(OurPos, Height, B, DType) then
        begin
          Script.WriteMsg('DType: ' + ToStr(DType), True);

          // check if we can grab the bars
          if DType = 2 then
          begin
            ClickTheDispenser := True;
            break;
          end
          else if DType = 1 then
          begin
            // need to throw water on it!
            Script.WriteMsg('Need to throw water on the dispenser');

            if Self.ThrowWaterOnDispenser() then
              CountDown.Restart();
          end
          else
          begin
            Script.WriteMsg('Got bars but cant see the color of the dispenser');

            Minimap.SetCompassAngle(SRL.SkewedRand(270, 240, 300));
          end;
        end
        else
          Script.WriteMsg('Couldn''t find the dispenser while waiting!', True);
      end;

      // we assume the coal and bars are here...
      if CountDown.IsFinished() then
      begin
        Script.WriteMsg('Timed out waiting for bars!');
        break;
      end;

      Self.DoMainLoopStuff('Waiting for bars', True);
    end;

    if not ClickTheDispenser then
    begin
      Script.WriteMsg('Failed to click the dispenser!');

      // read the values if we need to, miscounted somehow?
      if not RLP then
      begin
        Self.CheckTheDispenser();
        Self.CheckThePot();
      end;

      goto go_exit;
    end;

    Wait(0, 2000, wdLeft);

    // ok lets click it now!
    Self.PreTakeDispenser();
    if not Self.ClickDispenser(ClickedDispenser) or not ClickedDispenser then
    begin
      Script.WriteMsg('Failed to click the dispenser!!');
      goto go_exit;
    end;
  end;

  Self.AfterActionAntiBan(True);

  // wait for the collection
  if not Self.WaitGoCollectBars(IC) then
  begin
    Script.WriteMsg('Failed to collect bars');
    goto go_exit;
  end;
  Wait(250, 1500, wdLeft);

  // do make
  if Make.IsOpen() then
  begin
    if Length(Make.GetItemButtons()) > 0 then
    begin
      if not Make.Select(0, MAKE_QUANTITY_ALL, Script.ShouldPressKeyboard()) then
        Script.WriteMsg('Failed to select make option');
    end
    else
      Script.WriteMsg('No make options!');
  end
  else
    Script.WriteMsg('Make not open!');

  if not Inventory.WaitChange(IC, SRL.SkewedRand(2500, 2000, 3000)) then
  begin
    Script.WriteMsg('Inv count didnt change when taking bars');
    goto go_exit;
  end;

  Wait(0, 1500, wdLeft);

  // took from it! count how many
  BarSlots.Clear();
  if not Inventory.FindItem(Self.BarItem, BarSlots) then
    Script.WriteMsg('No bars??');

  // assume the value got bigger
  Self.RBars -= (Length(BarSlots) - BarCount);
  Script.WriteMsg('Num bars: ' + ToStr(Self.RBars));

go_exit:
  Self.AfterActionAntiBan(True);

  // make sure gold gloves are back on
  if Inventory.FindItem(Self.GoldGlovesItem, GoldGlovesSlot) then
  begin
    Inventory.ClickSlot(GoldGlovesSlot, 'Wear');
    Wait(0, 750, wdLeft);
  end;
end;

{$ENDIF} // INEEDBOT_BLASTFURANCE_DISPENSER

