{
  BlastFurnace
  Author: ineedbot
  Date: 6/30/2022

  Handles everything to do with the melting pot
}

{$IFNDEF INEEDBOT_BLASTFURANCE_MELTINGPOT}
{$DEFINE INEEDBOT_BLASTFURANCE_MELTINGPOT}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Find melting pot tile
}
function TBot.FindMeltingPotTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.MeltingPotTile, Self.MeltingPotTileHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetMeltingPotSearchBox(MeltingTile: TRectangle): TBox;
begin
  Result := MeltingTile.Expand(Round(MeltingTile.Radius() * Self.MeltingPotColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindMeltingPotColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.MeltingPotColor.RSObject, Area);
  Result.FilterSize(Self.MeltingPotColor.FilterSize, __GT__);
end;

{
  Returns true if the pot is visible, B is the bounds of the pot on the screen
}
function TBot.FindMeltingPot(OurTile: TPoint; Height: Int32; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindMeltingPotTile(OurTile, Height);

  B := Self.GetMeltingPotSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindMeltingPotColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.MeltingPotColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the pot, WasClicked true if clicked it
}
function TBot.ClickMeltingPot(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeightOffset(OurTile);

  // find the belt
  if not Self.FindMeltingPot(OurTile, Height, B) then
  begin
    Script.WriteMsg('ClickMeltingPot: not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickMeltingPot: Found, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickMeltingPot: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.MeltingPotUpTextsStr;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.MeltingPotUpTextsStr, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickMeltingPot: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickMeltingPot: Good uptext, clicking', True);

  if MainScreen.IsUpText(Self.MeltingPotOptionsTextsStr, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.MeltingPotOptionsTextsStr);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickMeltingPot: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickMeltingPot: Clicked', True);
end;

{
  While we walk to the pot
}
procedure WalkingToMeltingPot(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickMeltingPot(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the pot while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // mainscreen bank fix
  if Bot.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface(Script.ShouldPressKeyboard());
end;

{
  Walks to the pot, return true if we clicked it early
}
function TBot.GoToMeltingPot(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  Height: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to pot....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);

  if Force or (OurPos.DistanceTo(Self.MeltingPotTile) > 50) or not Self.FindMeltingPot(OurPos, Height, B) then
  begin
    Script.SetStatus('Going to pot...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToMeltingPot;
    try
      Walked := Self.RSW.WalkBlind(Self.MeltingPotTile.Random(-6, 6, True), 0);
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to pot!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Waits for the chat for the pot
}
function TBot.WaitPotChat(): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // look for the text of the pot
    if Chat.IsOpen() and Chat.GetChat().Strip().StartsWith(Self.PotChatTexts[0]) then
    begin
      Script.WriteMsg('WaitPotChat: found!.', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitPotChat: Still moving...', True);
      CountDown.Restart();
    end;

    // did we timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitPotChat: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to pot....', False);
  end;
end;

{
  Checks the pot
}
procedure TBot.CheckThePot();
var
  ClickedPot: Boolean;
  RLP: Boolean;
  x, y: Int32;
begin
  Script.WriteMsg('Reading pot');
  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  // click it
  if not ((Self.ClickMeltingPot(ClickedPot) and ClickedPot)
    or Self.GoToMeltingPot()
    or (Self.ClickMeltingPot(ClickedPot) and ClickedPot)
    or Self.GoToMeltingPot(True)
    or (Self.ClickMeltingPot(ClickedPot) and ClickedPot)) then
  begin
    Script.WriteMsg('Failed to click pot');
    exit();
  end;

  Self.AfterActionAntiBan(True);

  // wait for the chat to open
  if not Self.WaitPotChat() then
  begin
    Script.WriteMsg('Failed to have chat open for pot');
    exit();
  end;

  Wait(0, 750, wdLeft);

  // read the values
  Self.GetCofferAmount(Self.RCoffer, RLP, x, y);
  Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  // go to the next page
  Chat.ClickContinue(Script.ShouldPressKeyboard());
  Wait(0, 1500, wdLeft);

  // read the second page
  Self.GetStuffInsideMelter(RLP, x, y, Self.RCoal, Self.ROres, Self.RBars);
  Script.WriteMsg('Ores: ' + ToStr(Self.ROres) + '  Coal: ' + ToStr(Self.RCoal) + '  Bars: ' + ToStr(Self.RBars), True);

  Wait(0, 750, wdLeft);
end;

{$ENDIF} // INEEDBOT_BLASTFURANCE_MELTINGPOT

