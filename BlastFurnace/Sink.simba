{
  BlastFurnace
  Author: ineedbot
  Date: 6/30/2022

  Handles everything to do with the sink
}

{$IFNDEF INEEDBOT_BLASTFURANCE_SINK}
{$DEFINE INEEDBOT_BLASTFURANCE_SINK}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}
{$include_once ../Utils.simba}
{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Dispenser.simba}

{
  Finds the sink tile
}
function TBot.FindSinkTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.SinkTile, Self.SinkTileHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetSinkSearchBox(SinkTile: TRectangle): TBox;
begin
  Result := SinkTile.Expand(Round(SinkTile.Radius() * Self.SinkColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindSinkColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.SinkColor.RSObject, Area);
  Result.FilterSize(Self.SinkColor.FilterSize, __GT__);
end;

{
  Returns true if the sink is visible, B is the bounds of the sink on the screen
}
function TBot.FindSink(OurTile: TPoint; Height: Int32; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindSinkTile(OurTile, Height);

  B := Self.GetSinkSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindSinkColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.SinkColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the sink, WasClicked true if clicked it
}
function TBot.ClickSink(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeightOffset(OurTile);

  // find the sink
  if not Self.FindSink(OurTile, Height, B) then
  begin
    Script.WriteMsg('ClickSink: sink not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickSink: Found sink, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickSink: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.SinkUpTextsStr;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.SinkUpTextsStr, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickSink: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickSink: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.SinkOptionsTextsStr, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.SinkOptionsTextsStr);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickSink: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickSink: Clicked', True);
end;

{
  While we walk to the sink
}
procedure WalkingToSink(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickSink(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the sink while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // mainscreen bank fix
  if Bot.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface(Script.ShouldPressKeyboard());
end;

{
  Walks to the sink, return true if we clicked it early
}
function TBot.GoToSink(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  Height: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to sink....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);

  if Force or (OurPos.DistanceTo(Self.SinkTile) > 50) or not Self.FindSink(OurPos, Height, B) then
  begin
    Script.SetStatus('Going to coffer...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToSink;
    try
      Walked := Self.RSW.WalkBlind(Self.SinkTile.Random(-6, 6, True), 0);
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to sink!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  waits for the bucket to fill
}
function TBot.WaitFillBucket(): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // watch for the bucket to fill
    if Inventory.FindItem(Self.WaterBucketItem) then
    begin
      Script.WriteMsg('WaitFillBucket: Found water bucket', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitFillBucket: Still moving...', True);
      CountDown.Restart();
    end;

    // watch for timeout
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitFillBucket: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Filling the bucket....', False);
  end;
end;

{
  waits for the bucket to be emptied
}
function TBot.WaitUseBucket(): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // watch for the bucket to be used
    if not Inventory.FindItem(Self.WaterBucketItem) then
    begin
      Script.WriteMsg('WaitUseBucket: no Found water bucket', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitUseBucket: Still moving...', True);
      CountDown.Restart();
    end;

    // watch for timeout
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitUseBucket: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Using the bucket....', False);
  end;
end;

{
  Throws water on the dispenser
}
function TBot.ThrowWaterOnDispenser(): Boolean;
var
  HasBucket, HasWaterBucket, ClickedSink, ClickedDispenser: Boolean;
  BucketSlot, WaterBucketSlot, Height, DType: Int32;
  OurPos: TPoint;
  B: TBox;
begin
  // make sure our inv is ready
  Inventory.SetSelectedSlot(-1);

  // check if we have the tools
  HasBucket := Inventory.FindItem(Self.BucketItem, BucketSlot);
  HasWaterBucket := Inventory.FindItem(Self.WaterBucketItem, WaterBucketSlot);

  if not HasBucket and not HasWaterBucket then
  begin
    Script.WriteMsg('No bucket!');
    exit();
  end;

  // fill the bucket if needed
  if not HasWaterBucket then
  begin
    if (Self.ClickSink(ClickedSink) and ClickedSink)
      or Self.GoToSink()
      or (Self.ClickSink(ClickedSink) and ClickedSink)
      or Self.GoToSink(True)
      or (Self.ClickSink(ClickedSink) and ClickedSink) then
    begin
      // wait for the bucket to fill
      if not Self.WaitFillBucket() then
      begin
        Script.WriteMsg('Failed to fill bucket');
        exit();
      end;

      Wait(0, 1000, wdLeft);
    end
    else
    begin
      Script.WriteMsg('Failed to fill bucket');
      exit();
    end;
  end;

  HasWaterBucket := Inventory.FindItem(Self.WaterBucketItem, WaterBucketSlot);

  if not HasWaterBucket then
  begin
    Script.WriteMsg('No water bucket');
    exit();
  end;

  // find the dispenser
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeightOffset(OurPos);
  Self.DispenserOptionsTextsStr := Self.DispenserUseOptionsTextStr;

  // go to the dispenser
  if not Self.FindDispenser(OurPos, Height, B, DType) then
    Self.GoToDispenser(True, False);

  if not Self.FindDispenser(OurPos, Height, B, DType) then
  begin
    Script.WriteMsg('Couldn''t find dispenser');
    exit();
  end;

  // now use the water bucket on the dispenser
  Inventory.SetSelectedSlot(WaterBucketSlot);
  Wait(0, 1500, wdLeft);

  if not (Self.ClickDispenser(ClickedDispenser) and ClickedDispenser) then
  begin
    Script.WriteMsg('Couldn''t click dispenser');
    exit();
  end;

  Result := Self.WaitUseBucket();
end;

{$ENDIF} // INEEDBOT_BLASTFURANCE_SINK

