{
  Draynor Village Chopper bank
  Author: ineedbot
  Date: 7/4/2022

  Banking
}

{$IFNDEF INEEDBOT_DVC_BANK}
{$DEFINE INEEDBOT_DVC_BANK}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the bank tile
}
function TBot.FindBankTile(OurPos: TPoint; BankTile: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, BankTile);
end;

{
  Gets the search box
}
function TBot.GetBankSearchBox(BankTile: TRectangle): TBox;
begin
  Result := BankTile.Expand(Round(BankTile.Radius() * Self.BankColor.RadiusExpand)).Bounds();
end;

{
  Returns all the found banks
}
function TBot.FindBankColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.BankColor.RSObject, Area);
  Result.FilterSize(Self.BankColor.FilterSize, __GT__);
end;

{
  Returns true if bank is visible, B is bounds of it
}
function TBot.FindBank(OurTile, BankTile: TPoint; out B: TBox): Boolean;
var
  Tile: TRectangle;
  TPA: TPointArray;
begin
  TileRect := Self.FindBankTile(OurTile, BankTile);

  B := Self.GetBankSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  // check the bank's colors within the tile
  TPA := Self.FindBankColor(B).Biggest();

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.BankColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Waits for the bank to open, while doing so, it will input bankpin
  Returns if the bank or depositbox was opened.
}
function TBot.WaitBankOpen(): Boolean;
var
  BankOpenCountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  BankOpenCountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // is the bank open?
    if Bank.IsOpen(True) or DepositBox.IsOpen() then
    begin
      Script.WriteMsg('WaitBankOpen: Bank opened!', True);
      exit(True);
    end;

    // enter pin if needed
    if BankPin.IsOpen() then
    begin
      Wait(1000, 1750);
      Script.WriteMsg('WaitBankOpen: Entering pin...', True);
      BankPin.Enter(Login.GetPlayer().Pin);
      Wait(500, 1000);
      BankOpenCountDown.Restart();
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitBankOpen: Still moving...', True);
      BankOpenCountDown.Restart();
    end
    else if BankOpenCountDown.TimeRemaining() < 3500 then
      Bank.FixUpText();

    // timed out?
    if BankOpenCountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitBankOpen: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to clicked bank...', False);
  end;

  Script.WriteMsg('WaitBankOpen: Timed out...', True);
  // bank didnt open... failed.
end;

{
  Banks the items
}
procedure TBot.DoBanking();
var
  ToolSlots, LogSlots, Pattern: TIntegerArray;
  CurLogs, i: Int32;
  R: Extended;
  IsBank: Boolean;
begin
  if not Bank.IsOpen() and not DepositBox.IsOpen() then
    exit();

  IsBank := Bank.IsOpen();
  Script.SetStatus('Depositing items...');
  Script.AntiBan.AfterBankAntiBan(20);

  // query the items in our inventory
  if IsBank then
  begin
    Inventory.FindItems(Self.ToolItems, ToolSlots);
    Inventory.FindItems(Self.LogItems, LogSlots);
    Inventory.FindItems(Self.KnifedLogItems, LogSlots);
  end
  else
  begin
    DepositBox.FindItems(Self.ToolItems, ToolSlots);
    DepositBox.FindItems(Self.LogItems, LogSlots);
    DepositBox.FindItems(Self.KnifedLogItems, LogSlots);
  end;

  Script.WriteMsg('DepositItems: ToolSlots: ' + ToStr(ToolSlots), True);
  Script.WriteMsg('DepositItems: LogSlots: ' + ToStr(LogSlots), True);
  CurLogs := LogSlots.Len();

  // randomize the deposit pattern
  R := Random();
  if R < 0.1 then
    Pattern := Inventory.ErrorPattern(DROP_PATTERN_TOPDOWN, 5)
  else if inRange(R, 0.1, 0.35) then
    Pattern := Inventory.ErrorPattern(DROP_PATTERN_SNAKE, 5)
  else
    Pattern := Inventory.ErrorPattern(DROP_PATTERN_MKEYS, 5);

  // randomly chop it off for extra antiban
  if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));

  // make sure we do not deposit our tools
  for i in ToolSlots do
    Pattern.Remove(i);

  // deposit our stuff
  for i in Pattern do
  begin
    if IsBank then
    begin
      if Inventory.IsSlotUsed(i) then
      begin
        // TODO randomize using deposit buttons
        Bank.DepositSlot([i, BANK_DEPOSIT_ALL], False);
        Wait(750, 1250);
      end;
    end
    else
    begin
      if DepositBox.IsSlotUsed(i) then
      begin
        // TODO randomize using deposit buttons
        Mouse.Move(DepositBox.GetSlotBox(i));
        ChooseOption.Select('Deposit-All');
        Wait(750, 1250);
      end;
    end;
  end;

  // query how many logs we actually depositted
  LogSlots.Clear();

  if IsBank then
  begin
    Inventory.FindItems(Self.LogItems, LogSlots);
    Inventory.FindItems(Self.KnifedLogItems, LogSlots);
  end
  else
  begin
    DepositBox.FindItems(Self.LogItems, LogSlots);
    DepositBox.FindItems(Self.KnifedLogItems, LogSlots);
  end;

  // update how many we did
  Self.LogsDone += CurLogs - LogSlots.Len();

  Script.WriteMsg('DepositItems: LogSlots (after bank): ' + ToStr(LogSlots), True);

  Script.SetStatus('Logs depositted!');
  Script.WriteMsg('Banked log... Currently chopped ' + IntToStr(Self.LogsDone) + ' logs!');

  Script.AntiBan.AfterBankAntiBan(30);

  // randomly close the bank
  if (Random() > 0.75) or Self.RSW.ScreenWalk then
  begin
    if IsBank then
      Bank.Close()
    else
      DepositBox.Close();
  end;
end;

{
  Returns true if we clicked any bank
}
function TBot.ClickBank(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  BankTiles: TPointArray;
  BankTile: TPoint;
  B: TBox;
begin
  // bank might be already opened, lets return true
  if Bank.IsOpen() or BankPin.IsOpen() or DepositBox.IsOpen() then
  begin
    WasClicked := True;
    exit(True);
  end;

  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // randomize the tiles a bit, shake em up
  BankTiles := Copy(Self.BankTiles);
  BankTiles.Sort(OurTile);
  BankTiles.RandomizeNearDists(OurTile, 12, 0.2);

  Script.SetStatus('Finding bank...');

  // search for every bank
  for BankTile in BankTiles do
  begin
    // try see if we can find this bank
    if not Self.FindBank(OurTile, BankTile, B) then
      continue;

    // apply velocity
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickBank: Tile velocity no visible', True);
        break;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image.DrawBox(B, clMoneyGreen);
    end;

    // hover over the banktile and see if it is actually a bank
    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Bank.FINDER_UPTEXT;
    Mouse.Move(B);
    Script.MouseLooksForUpText := [];

    Script.RareSmallWait();

    if not MainScreen.IsUpText(Bank.FINDER_UPTEXT, Random(100, 250)) then
    begin
      Script.SetStatus('Bad uptext for bank');
      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Result := True;

    Script.SetStatus('Confirmed bank! Opening bank...');

    // banker can make us stuck
    if (Velocity <> Point(0, 0)) and ('Banker' in MainScreen.GetUpText()) then
      break;

    // open the bank
    if ('Banker' in MainScreen.GetUpText()) or (Random() < 0.20) then
      WasClicked := ChooseOption.Select(Bank.FINDER_OPTION)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := Mouse.DidClick(True);
    end;

    if not WasClicked then
    begin
      Script.WriteMsg('ClickBank: Didnt click', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    break;
  end;
end;

{
  While we walk to the bank
}
procedure WalkingToBank(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    // if we clicked the fish spot, then stop the walker
    if Bot.ClickBank(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the bank while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  if Bank.IsOpen() or BankPin.IsOpen() or DepositBox.IsOpen() then
    Walker^.Enabled := False;
end;

{
  Walks to the bank,
  Returns true if we clicked the bank while walking
}
function TBot.GoToBank(Force: Boolean = False): Boolean;
var
  OurPos: TPoint;
  Walked: Boolean;
  BeforeCallback: TRSWalker_OnWalkEvent;
begin
  Script.WriteMsg('Going to bank spot....', True);
  OurPos := Self.RSW.GetMyPos();

  if (OurPos.DistanceTo(Self.BankWalkTile) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Self.BankWalkTile).Mean()) or
    Force then
  begin
    Script.SetStatus('Going to bank spot...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    Self.RSW.OnWalkingEvent := @WalkingToBank;
    try
      Walked := Self.RSW.WebWalk(Self.BankWalkTile.Random(-8, 8, True), 0, BioRandomFixed());
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to bank spot');
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Does banking
}
procedure TBot.DoBank();
var
  WasClicked: Boolean;
begin
  if (Self.ClickBank(WasClicked) and WasClicked)
    or Self.GoToBank()
    or (Self.ClickBank(WasClicked) and WasClicked)
    or Self.GoToBank(True) then
  begin
    if Self.WaitBankOpen() then
    begin
      Self.DoBanking();
      Self.UpdateWalkedTree(True);
    end;
  end;
end;

{$ENDIF} // INEEDBOT_DVC_BANK

