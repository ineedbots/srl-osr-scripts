{
  Draynor Village Chopper misc
  Author: ineedbot
  Date: 7/4/2022

  Misc
}

{$IFNDEF INEEDBOT_DVC_MISC}
{$DEFINE INEEDBOT_DVC_MISC}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the tile
}
function TBot.FindNestTile(TP: TPoint; CompAng: Double): TRectangle;
begin
  Result := Minimap.PointToMsRect(TP, CompAng);
end;

{
  Gets the search box
}
function TBot.GetNestSearchBox(TileRect: TRectangle): TBox;
begin
  Result := TileRect.Expand(Round(TileRect.Radius() * Self.BirdNestColor.RadiusExpand)).Bounds();
end;

{
  Returns all bird's nest
}
function TBot.FindBirdNestColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.BirdNestColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.BirdNestColor.FilterSize), __GT__);
end;

{
  Gets nest item dots
}
function TBot.GetNestItemDots(): TPointArray;
begin
  Result := Minimap.GetDots(ERSMinimapDot.ITEM);
  if SRL.CountColor(CTS1(255, 75), Box(Minimap.Center().Offset(-1, -1), 1, 1)) > 0 then
    Result += Minimap.Center();
end;

{
  Returns true if found a birdsnest on the screen
}
function TBot.FoundBirdsNest(out B: TBox): Boolean;
var
  ATPA: T2DPointArray;
  TPA, Dots: TPointArray;
  CompAng: Single;
  TP: TPoint;
  TileRect: TRectangle;
begin
  Dots := Self.GetNestItemDots();
  if Length(Dots) <= 0 then
    exit();

  CompAng := Minimap.GetCompassAngle(False);

  for TP in Dots do
  begin
    TileRect := Self.FindNestTile(TP, CompAng);

    B := Self.GetNestSearchBox(TileRect);

    if not MainScreen.IsVisible(B.Middle()) then
      continue;

    B.LimitTo(MainScreen.Bounds());

    ATPA := Self.FindBirdNestColor(B);
    TPA := ATPA.Biggest();

    if Length(TPA) < Self.BirdNestColor.FilterSize then
      continue;

    B := TPA.Bounds();
    Result := True;
  end;
end;

{
  Returns true if picked up the nest
}
function TBot.ClickBirdsNest(B: TBox): Boolean;
begin
  Mouse.Move(B);

  Script.RareSmallWait();

  if MainScreen.IsUpText(Self.NestOptions) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    Result := ChooseOption.Select(Self.NestOptions);
end;

{
  Does birdnest stuff
}
procedure TBot.CheckBirdnest();
var
  B: TBox;
  S: String;
begin
  if Chat.IsOpen() then
  begin
    S := Chat.GetMessage(7, [CHAT_COLOR_BLACK, CHAT_COLOR_RED, CHAT_COLOR_LIGHT_RED]);

    if S.IsInString(Self.BirdNestText) then
    begin
      // TODO check cluescroll
      if Self.FoundBirdsNest(B) then
      begin
        if Inventory.IsFull() then
          Self.DropAThing();

        Script.WriteMsg('Picking up bird nest');

        if Self.ClickBirdsNest(B) then
        begin
          Minimap.WaitFlag();
          Minimap.WaitPlayerMoving();
          Wait(750, 1500, wdLeft);  
          Script.ExamineRandomItem();
        end;
      end;
    end;
  end;
end;

{
  Finds the tile
}
function TBot.FindFireTile(PlayerPos, FirePos: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(PlayerPos, FirePos);
end;

{
  Gets the search box
}
function TBot.GetFireSearchBox(Tile: TRectangle): TBox;
begin
  Result := Tile.Expand(Round(Tile.Radius() * Self.FireColor.RadiusExpand)).Bounds();
end;

{
  Returns all fires in the area
}
function TBot.FindFireColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.FireColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.FireColor.FilterSize), __GT__);
end;

{
  Tries to find a fire at the location
}
function TBot.FindFire(PlayerPos: TPoint; FirePos: TPoint; out B: TBox): Boolean;
var
  Tile: TRectangle;
  TPA: TPointArray;
begin
  // get the tile location on the mainscreen, and check if its visible
  Tile := Self.FindFireTile(PlayerPos, FirePos);

  B := Self.GetFireSearchBox(Tile);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());

  // find the tree's colors in this tile
  TPA := Self.FindFireColor(B).Biggest();

  if Length(TPA) > Self.FireColor.FilterSize then
  begin
    // make sure the middle of the tile is inside!
    Result := TPA.MinAreaCircle().Contains(TPA.Mean());
  end;
end;

{
  Drops an item
}
procedure TBot.DropAThing();
var
  Dropable: TIntegerArray;
begin
  Inventory.FindItems(Self.LogItems, Dropable);
  Inventory.FindItems(Self.KnifedLogItems, Dropable);

  Inventory.HoverSlot(Dropable[Random(Low(Dropable), High(Dropable))]);
  ChooseOption.Select('Drop');
end;

{
  Drops all the logs in our inventory

  Part of this is from Flight's AIOFisher
}
procedure TBot.DropItems();
var
  Pattern, LogSlots: TIntegerArray;
  CurLogs, i, S: Int32;
begin
  Script.SetStatus('Dropping logs...');
  Self.AfterActionAntiBan(True);

  // query the fish
  Inventory.FindItems(Self.LogItems, LogSlots);
  Inventory.FindItems(Self.KnifedLogItems, LogSlots);
  CurLogs := Length(LogSlots);
  Script.WriteMsg('DropItems: Log slots (before drop): ' + ToStr(LogSlots), True);

  // choose a random drop pattern
  Pattern := Bank.GetGoodPattern();

  // possibly not drop all logs, for antiban
  if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));

  // only drop logs...
  for i := High(Pattern) downto Low(Pattern) do
    if LogSlots.Find(Pattern[i]) = -1 then
      Pattern.Remove(Pattern[i]);

  S := Mouse.Speed;
  Mouse.Speed += Script.FastMouseAdd + Random(-2, 2);
  // drop
  if Script.ShiftClicking then
    Inventory.ShiftDrop(Pattern)
  else
  begin
    for i in Pattern do
    begin
      Inventory.HoverSlot(i);

      if MainScreen.IsUpText('Drop') then
        Mouse.Click(MOUSE_LEFT)
      else
        ChooseOption.Select('Drop');

      Wait(0, 1000, wdLeft);
    end;
  end;
  Mouse.Speed := S;

  // see how many logs we actually dropped, and log it
  LogSlots.Clear();
  Inventory.FindItems(Self.LogItems, LogSlots);
  Inventory.FindItems(Self.KnifedLogItems, LogSlots);
  Self.LogsDone += CurLogs - Length(LogSlots);
  Script.WriteMsg('DropItems: Log slots (after drop): ' + ToStr(LogSlots), True);

  Script.SetStatus('Logs dropped!');
  Script.WriteMsg('Dropped logs... Currently chopped ' + IntToStr(Self.LogsDone) + ' logs!');
  
  Self.AfterActionAntiBan(True);
end;

{
  Waits for the fire to be created, when it is returns true
}
function TBot.WaitFireCreated(XP: Int32): Boolean;
var
  FireTimeout: TCountdown;
  NowXP: Int32;
begin
  // init the stuff for waiting for the fire to be lit
  Script.SetStatus('Waiting for the fire to be lit...');
  FireTimeout.Init(Self.FireWaitTime);
  while RSClient.IsLoggedIn() do
  begin
    // check for level ups
    if Chat.LeveledUp() then
    begin
      Script.WriteMsg('WaitFireCreated: Clicking level up', True);
      while Chat.ClickContinue() do
        Wait(75, 500);

      Wait(2000, 3000, wdLeft);
      exit(True);
    end;

    // did we gain xp? if so then the fire is lit!
    NowXP := XPBar.ReadXPBar();
    if NowXP = -1 then
    begin
      Script.WriteMsg('WaitFireCreated: Cannot read XP Bar.', True);
      exit(False);
    end;

    if NowXP <> XP then
    begin
      Script.WriteMsg('WaitFireCreated: XP changed! Lit!', True);
      exit(True);
    end;

    if FireTimeout.IsFinished() then
      break;

    Self.DoMainLoopStuff('', False);
    if Self.CheckUnderattack() then
      exit();
  end;

  Script.WriteMsg('WaitFireCreated: Timed out...', True);
end;

{
  Waits for the log to placed onto the ground
}
function TBot.WaitPlaceLog(InvCount: Int32): Boolean;
var
  S: String;
  InvCountTimeout: TCountdown;
begin
  Script.SetStatus('Waiting for the log to place...');
  InvCountTimeout.Init(SRL.SkewedRand(3000, 2500, 3500));
  while RSClient.IsLoggedIn() do
  begin
    // do we have a smaller bag?
    // then the log must be on the ground
    if Inventory.Count() < InvCount then
    begin
      Script.WriteMsg('WaitPlaceLog: Invcount lowered, log placed!', True);
      exit(True);
    end;

    // check for the message if we cannot light a fire
    // so make sure the GAME chat is visible and chat is scrolled to the bottom
    if Chat.IsOpen() then
    begin
      S := Chat.GetMessage(7, [CHAT_COLOR_BLACK]);
      if S.IsInString(Self.NoLightText) then
      begin
        Script.WriteMsg('WaitPlaceLog: Cannot light a fire here text', True);
        // Push the GAME chat so it doesnt false positive next time
        Script.ExamineRandomItem();
        exit(False);
      end;
    end;

    if InvCountTimeout.IsFinished() then
      break;

    Self.DoMainLoopStuff('', False);
    if Self.CheckUnderattack() then
      exit();
  end;

  Script.WriteMsg('WaitPlaceLog: Timed out...', True);
end;

{
  Does a fire chain until it can't
}
function TBot.LightLogs(NumLights: Int32 = 27): Boolean;
var
  TinderBoxSlot, i, XP, CurLogs, CurSelectedItem, CurHoveredItem, Idx, NextLog,
    CurInvCount: Int32;
  LogSlots, Pattern: TIntegerArray;
  //CurPos, Pos: TPoint;
begin
  // make sure we have logs and a tinderbox
  if not Inventory.FindItem(Self.TinderItem, TinderBoxSlot) then
  begin
    Script.WriteMsg('LightLogs: No tinder box.', True);
    exit();
  end;

  if not Inventory.FindItems(Self.LogItems, LogSlots) then
  begin
    Script.WriteMsg('LightLogs: No logs.', True);
    exit();
  end;

  // make sure we can see the xp counter
  XP := XPBar.ReadXPBar();
  if XP = -1 then
  begin
    Script.WriteMsg('LightLogs: Cannot see XP bar.', True);
    exit();
  end;

  Script.WriteMsg('LightLogs: Tinderbox: ' + ToStr(TinderBoxSlot), True);
  Script.WriteMsg('LightLogs: LogSlots: ' + ToStr(LogSlots), True);

  // randomize the pattern
  Pattern := Bank.GetGoodPattern();

  // randomly chop it off for extra antiban
  {if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));}

  // remove all slots that are not a log
  for i := High(Pattern) downto Low(Pattern) do
    if LogSlots.Find(Pattern[i]) = -1 then
      Pattern.Remove(Pattern[i]);

  // trim to the limit param
  if Length(Pattern) > NumLights then
    SetLength(Pattern, NumLights);

  // start lighting the logs
  CurLogs := Length(LogSlots);
  // CurPos := Self.RSW.GetMyPos();

  for Idx := Low(Pattern) to High(Pattern) do
  begin
    i := Pattern[Idx];

    if not RSClient.IsLoggedIn() then
      break;

    // check if we moved right
    // sometimes inaccurate or unreliable
    // using the NumLights is enough
    {Pos := Self.RSW.GetMyPos();
    if Pos.X - 1 > CurPos.X + 2 then
      break; // then the fire chain must be maxxed.
    CurPos := Pos;}

    CurSelectedItem := Inventory.GetSelectedSlot();
    CurHoveredItem := Inventory.PointToSlot(Mouse.Position());
    CurInvCount := Inventory.Count();
    XP := XPBar.ReadXPBar();
    Script.SetStatus('Lighting the fire...');

    // Start lighting the fire...
    // are we hovering over a log?
    // TODO randomize
    if i = CurHoveredItem then
    begin
      // is the selected item a tinderbox?
      if CurSelectedItem = TinderBoxSlot then
        Mouse.Click(MOUSE_LEFT) // then click and start the fire.
      else
      begin
        // we need to select this slot then
        Inventory.SetSelectedSlot(CurHoveredItem);
        Wait(0, 1000, wdLeft);

        // start the fire now!
        Mouse.Click(Inventory.GetSlotBox(TinderBoxSlot), MOUSE_LEFT);
      end;
    end
    // are we hovering over the tinderbox?
    else if CurHoveredItem = TinderBoxSlot then
    begin
      // is the selected item a log?
      if CurSelectedItem = i then
        Mouse.Click(MOUSE_LEFT) // click and start the fire
      else
      begin
        // we need to select this slot then...
        Inventory.SetSelectedSlot(TinderBoxSlot);
        Wait(0, 1000, wdLeft);

        // start the fire
        Mouse.Click(Inventory.GetSlotBox(i), MOUSE_LEFT);
      end;
    end
    else
    begin
      // is the selection a log?
      if CurSelectedItem = i then
        Mouse.Click(Inventory.GetSlotBox(TinderBoxSlot), MOUSE_LEFT)
      // is it the tinder?
      else if CurSelectedItem = TinderBoxSlot then
        Mouse.Click(Inventory.GetSlotBox(i), MOUSE_LEFT)
      else
      begin
        if Random() > 0.5 then
        begin
          Inventory.SetSelectedSlot(i);
          Wait(0, 1000, wdLeft);
          Mouse.Click(Inventory.GetSlotBox(TinderBoxSlot), MOUSE_LEFT);
        end
        else
        begin
          Inventory.SetSelectedSlot(TinderBoxSlot);
          Wait(0, 1000, wdLeft);
          Mouse.Click(Inventory.GetSlotBox(i), MOUSE_LEFT);
        end;
      end;
    end;

    // wait for the log to be placed
    if not Self.WaitPlaceLog(CurInvCount) then
      break;

    // fires should be starting... lets prepare for next action if needed
    if (Idx < High(Pattern)) and (Random() < 0.95) then
    begin
      CurHoveredItem := Inventory.PointToSlot(Mouse.Position());
      NextLog := Pattern[Idx + 1];

      // Check if select tinderbox and hover over next log
      if (CurHoveredItem = TinderBoxSlot) and (Random() < 0.8) then
      begin
        // select tinder, hover next log
        Inventory.SetSelectedSlot(TinderBoxSlot);
        Wait(0, 1000, wdLeft);
        Mouse.Move(Inventory.GetSlotBox(NextLog));
      end
      else
      begin
        // select nextlog, hover tinder
        Inventory.SetSelectedSlot(NextLog);
        Wait(0, 1000, wdLeft);
        Mouse.Move(Inventory.GetSlotBox(TinderBoxSlot));
      end;
    end;

    // wait for the fire to be created
    if not Self.WaitFireCreated(XP) then
      break;
  end;

  if RSClient.IsLoggedIn() then
  begin
    // return if we completed the entire fire chain
    Result := (Idx > High(Pattern));

    // count how many logs we burnt
    LogSlots.Clear();
    Inventory.FindItems(Self.LogItems, LogSlots);
    // update how many logs we completed chopping
    Self.LogsDone += CurLogs - Length(LogSlots);

    Script.WriteMsg('LightLogs: LogSlots(after): ' + ToStr(LogSlots), True);
  end;

  Script.WriteMsg('Logs lit... Currently chopped ' + IntToStr(Self.LogsDone) + ' logs!');
end;

{
  Goes to the fire tile.
  Returns true if we are on the tile exactly
  And no fire is on the tile
}
function TBot.GoToFireStart(out FoundFire: Boolean; Force: Boolean = False): Boolean;
var
  OurPos, FirePos: TPoint;
  Timeout: TCountdown;
  Walked, DidMSClick: Boolean;
  TileRect: TRectangle;
  _: TBox;
begin
  // Minimap.SetCompassAngle(0);
  OurPos := Self.RSW.GetMyPos();
  FirePos := Self.FireStartTiles[Self.FiredTile].Tile;

  if Self.FindFire(OurPos, FirePos, _) then
  begin
    Script.WriteMsg('GoToFireStart: Found a fire at the start tile.', True);
    FoundFire := True;
    exit();
  end;

  // Go to the starting fire tile
  if Force or (OurPos.DistanceTo(FirePos) >= 32) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, FirePos).Mean()) then
  begin
    Script.SetStatus('Walking to starting fire tile...');
    try
      Walked := Self.RSW.WalkBlind(FirePos + Point(-3, 0).Random(-3, 3, True), 0);
    except
    end;

    if not Walked then
    begin
      Script.WriteMsg('Failed to walk to fire pos');
      exit();
    end;
  end;

  OurPos := Self.RSW.GetMyPos();
  if Self.FindFire(OurPos, FirePos, _) then
  begin
    Script.WriteMsg('GoToFireStart: Found a fire at the start tile.', True);
    FoundFire := True;
    exit();
  end;

  // make sure that we are on the tile..
  Timeout.Init(15000);
  while RSClient.IsLoggedIn() and not Timeout.IsFinished() do
  begin
    OurPos := Self.RSW.GetMyPos();
    if OurPos.DistanceTo(FirePos) >= 3 then
    begin
      Script.SetStatus('Going on top of the fire starting tile...');

      if DidMSClick or (Random() < 0.2) then
        // use MM, it is more accurate!
        Mouse.Click(Self.RSW.WorldToMM(OurPos, FirePos, Minimap.GetCompassAngle(False)).Random(-3, 3, True), MOUSE_LEFT)
      else
      begin
        // try mainscreen, it maybe inaccurate
        DidMSClick := True;

        TileRect := Self.FindFireTile(OurPos, FirePos);

        if not MainScreen.IsVisible(TileRect.Mean()) then
          continue;

        Mouse.Move(TileRect.Bounds());

        Script.RareSmallWait();

        // check if a fire exists here
        if MainScreen.IsUpText('options') and ChooseOption.HasOption(['Fire']) then
        begin
          FoundFire := True;
          break;
        end;

        if MainScreen.IsUpText('Walk here') then
          Mouse.Click(MOUSE_LEFT)
        else
          ChooseOption.Select('Walk here');
      end;

      Minimap.WaitFlag();
      Minimap.WaitPlayerMoving();
    end
    else
    begin
      Result := True;
      break;
    end;
  end;
end;

{
  Start burning the logs to get rid of them
}
function TBot.TryFireItems(out FoundFire: Boolean): Boolean;
begin
  FoundFire := False;

  // make sure we have logs and a tinderbox
  if not Inventory.FindItem(Self.TinderItem) or not Inventory.FindItems(Self.LogItems) then
    exit(True);

  // try go to the fire
  if not Self.GoToFireStart(FoundFire) then
    exit();

  // pause antiban so tasks won't 100% run once we are done
  Script.Antiban.PauseAllTasks();

  // start the fire chain
  // if a fire chain does not complete successfully, we go to the next one...
  Result := Self.LightLogs(Self.FireStartTiles[Self.FiredTile].NumFires);

  // resume the antiban tasks
  Script.Antiban.ResumeAllTasks();
end;

{
  Will try to light logs on fire
}
function TBot.FireItems(): Boolean;
var
  OurPos, FirePos: TPoint;
  FoundFire: Boolean;
begin
  while RSClient.IsLoggedIn() do
  begin
    if Self.TryFireItems(FoundFire) then
      Result := True;

    if FoundFire then
    begin
      Script.SetStatus('Trying a different fire lane...');
      Script.WriteMsg('Trying a different fire lane...');

      Self.FiredTile += 1;
      if Self.FiredTile > High(Self.FireStartTiles) then
        Self.FiredTile := Low(Self.FireStartTiles);
      if Self.FiredTile < Low(Self.FireStartTiles) then
        Self.FiredTile := High(Self.FireStartTiles);
    end;

    // check if we still have logs
    if Inventory.FindItem(Self.TinderItem) and Inventory.FindItems(Self.LogItems) then
    begin
      // check if we are closer to the firetile than the trees
      OurPos := Self.RSW.GetMyPos();
      FirePos := Self.FireStartTiles[Self.FiredTile].Tile;
      // lets keep lighting fires as its closer
      if OurPos.DistanceTo(FirePos) < OurPos.DistanceTo(Self.TreeTiles.Mean()) then
      begin
        Script.SetStatus('We still have logs and trees are far, lets keep lighting...');
        continue;
      end
      else
        break;
    end
    else
      break;
  end;
end;

{
  Fletches the logs
}
procedure TBot.FletchLogs();
var
  KnifeSlot, LogSlot, ICount, IC: Int32;
  LogSlots: TIntegerArray;
  CountDown: TCountDown;
begin
  if not Inventory.FindItems(Self.LogItems, LogSlots) then
  begin
    Script.WriteMsg('No logs...', True);
    exit();
  end;

  if not Inventory.FindItem(Self.KnifeItem, KnifeSlot) then
  begin
    Script.WriteMsg('No knife...', True);
    exit();
  end;

  Script.WriteMsg('Fletching logs...', True);
  LogSlot := LogSlots[Random(Low(LogSlots), High(LogSlots))];
  ICount := Length(LogSlots);

  // start fletching
  if Random() < 0.5 then
  begin
    Inventory.SetSelectedSlot(LogSlot);
    Wait(0, 1000, wdLeft);
    Inventory.ClickSlot(KnifeSlot);
  end
  else
  begin
    Inventory.SetSelectedSlot(KnifeSlot);
    Wait(0, 1000, wdLeft);
    Inventory.ClickSlot(LogSlot);
  end;

  // wait for make to open
  if not Make.IsOpen(SRL.SkewedRand(2500, 2000, 3000)) then
  begin
    Script.WriteMsg('Fletch: make didnt open', True);
    exit();
  end;

  Wait(0, 1000, wdLeft);

  // option '2' is willow longbow
  if not Make.Select(Self.MakeOption, MAKE_QUANTITY_ALL, Script.ShouldPressKeyboard()) then
  begin
    Script.WriteMsg('Fletch: didnt select the option', True);
    exit();
  end;

  Self.AfterActionAntiBan(True);
  CountDown.Init(Self.FletchWaitTime);

  while RSClient.IsLoggedIn() do
  begin
    // check inv
    LogSlots.Clear();
    Inventory.FindItems(Self.LogItems, LogSlots);
    IC := Length(LogSlots);

    if IC <= 0 then
    begin
      Script.WriteMsg('FletchLogs: No more logs', True);
      break;
    end;

    if IC <> ICount then
    begin
      Script.WriteMsg('FletchLogs: InvCount changed, restarting countdown', True);
      CountDown.Restart();
    end;

    ICount := IC;

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('FletchLogs: Countdown expired', True);
      break;
    end;

    if Chat.LeveledUp() then
    begin
      Script.WriteMsg('FletchLogs: Leveld', True);
      if Random() < 0.2 then
      begin
        Wait(0, 1500, wdLeft);
        Chat.ChatToOption('doesnt matter');
      end;
      break;
    end;

    Self.DoMainLoopStuff('Fletching logs...', True);
  end;

  Self.AfterActionAntiBan(True);
end;

{$ENDIF} // INEEDBOT_DVC_MISC
