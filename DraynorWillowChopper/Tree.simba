{
  Draynor Village Chopper tree
  Author: ineedbot
  Date: 7/4/2022

  Handles everything tree related
}

{$IFNDEF INEEDBOT_DVC_TREE}
{$DEFINE INEEDBOT_DVC_TREE}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the tree tile
}
function TBot.FindTreeTile(OurPos: TPoint; Tile: TPoint): TRectangle;
begin
  if Tile.X = -1 then
  begin
    Result := [Point(-1, -1), Point(-1, -1), Point(-1, -1), Point(-1, -1)];
    exit();
  end;

  Result := Self.RSW.GetTileMSEx(OurPos, Tile, 4);
end;

{
  Gets the search box
}
function TBot.GetTreeSearchBox(Tile: TRectangle): TBox;
begin
  if Tile.Top.X = -1 then
  begin
    Result := MainScreen.GetPlayerBox();
    Result := Result.Expand(Round(Result.ToRectangle().Radius() * Self.SelfBoxRadiusExpand));
    exit();
  end;

  Result := Tile.Expand(Round(Tile.Radius() * Self.TreeColor.RadiusExpand)).Bounds();
end;

{
  Returns all the found trees
}
function TBot.FindTreeColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.TreeColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.TreeColor.FilterSize), __GT__);
end;

{
  Tries to find the tree at the tile, returns true if it does, also the area of where it is

  This is mainly from olly/srl-development woodcut test script
}
function TBot.FindTree(PlayerPos: TPoint; TreePos: TPoint; out B: TBox; out ATPA: T2DPointArray): Boolean;
var
  Tile: TRectangle;
  TPA: TPointArray;
begin
  // get the tile location on the mainscreen, and check if its visible
  Tile := Self.FindTreeTile(PlayerPos, TreePos);

  B := Self.GetTreeSearchBox(Tile);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());

  // find the tree's colors in this tile
  ATPA := Self.FindTreeColor(B);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();
    B := TPA.Bounds();

    if TreePos.X = -1 then
      Result := True
    else
      Result := TPA.MinAreaCircle().Radius >= Tile.ToTPA().MinAreaCircle().Radius;
  end;
end;

{
  Attempts to click on a tree, returns if it does
}
function TBot.ClickTree(out WasClicked: Boolean; out ClickPt: TPoint; out B: TBox; OurPos: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  CTreeTiles, TPA: TPointArray;
  TT: TPoint;        
  ATPA: T2DPointArray;
begin
  if OurPos = Point(-1, -1) then
    OurPos := Self.RSW.GetMyPos();

  // shake up the tiles
  CTreeTiles := Copy(Self.TreeTiles);
  CTreeTiles.Sort(OurPos);
  CTreeTiles.RandomizeNearDists(OurPos, 8, 0.1);

  ClickPt := Point(-1, -1);

  for TT in CTreeTiles do
  begin
    if not Self.FindTree(OurPos, TT, B, ATPA) then
      continue;

    // apply velocity
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickTree: Tile velocity no visible', True);
        break;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image.DrawBox(B, clMoneyGreen);
    end;

    Result := True;
    Self.CurrentChoppingTreeTile := TT;

    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Self.TreeUptexts;

    if TT.X = -1 then
    begin
      ATPA.SortByMiddle(Mouse.Position());
      for TPA in ATPA do
      begin
        B := TPA.Bounds();

        Mouse.Move(B);
        Script.RareSmallWait();

        if MainScreen.IsUpText(Self.TreeUptexts, Random(100, 250)) then
          break;
      end;
    end
    else
    begin
      Mouse.Move(B);
      Script.RareSmallWait();
    end;

    Script.MouseLooksForUpText := [];

    if not MainScreen.IsUpText(Self.TreeUptexts, Random(100, 250)) then
    begin
      Script.WriteMsg('ClickTree: Bad uptext', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    ClickPt := Mouse.Position();
    if not MainScreen.IsUpText(Self.TreeOptions, Random(100, 250)) or (Random() < 0.10) then
      WasClicked := ChooseOption.Select(Self.TreeOptions)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := MainScreen.DidRedClick();
    end;

    if not WasClicked then
    begin
      Script.WriteMsg('ClickTree: Didnt click', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    break;
  end;
end;

{
  While we walk to the Trees
}
procedure WalkingToTrees(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel, ClickPt: TPoint;
  B: TBox;
begin
  if @Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    // if we clicked the fish spot, then stop the walker
    if Bot.ClickTree(WasClicked, ClickPt, B, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the tree while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;
end;

{
  Walks to the fish,
  Returns true if we clicked the fishing spot while walking
}
function TBot.GoToTrees(Force: Boolean = False; Click: Boolean = True): Boolean;
var
  Where, OurPos: TPoint;
  PathIdx: Int32;
  Walked: Boolean;
begin
  Script.WriteMsg('Going to trees...', True);
  OurPos := Self.RSW.GetMyPos();
  Where := Self.TreeTiles[Self.WalkedTree];
  if Force then
    Where := Self.TreeWalkTile;

  if Where.X = -1 then
    exit();

  if Force or (OurPos.DistanceTo(Where) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Where).Mean()) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      
    Script.SetStatus('Going to trees spot...');

    Self.OldWalkingCallback := @Self.RSW.OnWalkingEvent;
    Self.ClickWhileWalking := Click;
    Self.RSW.OnWalkingEvent := @WalkingToTrees;

    try
      Walked := True;
      Self.RSW.Enabled := True;

      if (Length(Self.ToTreesPaths) > 0) and Force then
      begin
        PathIdx := SRL.TruncatedGauss(Low(Self.ToTreesPaths), High(Self.ToTreesPaths));

        if OurPos.DistanceTo(Self.ToTreesPaths[PathIdx][Low(Self.ToTreesPaths[PathIdx])]) <
          OurPos.DistanceTo(Self.ToTreesPaths[PathIdx][High(Self.ToTreesPaths[PathIdx])]) then
          Walked := Self.RSW.WalkPath(Self.ToTreesPaths[PathIdx], 8);
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Where.Random(-6, 6, True), 0);
    except
      Walked := False;
    end;
    
    Self.RSW.OnWalkingEvent := @Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to tree spot');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := True;
  end;

  // set the 'next' fish spot...
  if not Force then
    Self.UpdateWalkedTree(False);
end;

{
  Checks for runelite plugin
  Returns true if using runelite plugin
  Sets Chopping to true or false.
}
function TBot.CheckRuneliteWoodcuttingPlugin(out Chopping: Boolean): Boolean;
var
  B: TBox;
  FColor: TOCRColorRule;
begin
  exit();
  B := [MainScreen.X1, MainScreen.Y1, MainScreen.X1 + 150, MainScreen.Y1 + 200];

  FColor := TOCRColorRule.Create([65280, 10]);
  if OCR.LocateText(B, 'Woodcutting', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Chopping := True;
  end;

  FColor := TOCRColorRule.Create([255, 10]);
  if OCR.LocateText(B, 'NOT woodcutting', RS_FONT_PLAIN_12, FColor, B) = 1 then
  begin
    Result := True;
    Chopping := False;
  end;
end;

{
  Waits while we are chopping the tree
}
procedure TBot.WhileChopping(TreeTile: TPoint; ClickPt: TPoint = [-1, -1]; ClickB: TBox = [-1, -1, -1, -1]);
var
  TimeoutCounter: TCountdown;
  OurPos, ClickLoc: TPoint;
  B: TBox;
  ATPA: T2DPointArray;
  InvCount, IC: Int32;
  Chopping: Boolean;
  Dist: Double;
begin                   
  InvCount := Inventory.Count();

  // check and see if this a far click
  if ClickPt.X <> -1 then
  begin
    OurPos := Self.RSW.GetMyPos();
    ClickLoc := Self.RSW.MSToWorldEx(OurPos, ClickPt);
    Dist := ClickLoc.DistanceTo(OurPos);
    Script.WriteMsg('Checking far click: ' + ToStr(Dist), True);

    if Dist > 8 then
    begin
      Inc(Self.DidMove);
      Inc(Self.DidMove);
      Inc(Self.DidMove);
      ClickPt := [-1, -1];
      Script.WriteMsg('Did a far click... ' + ToStr(Self.DidMove), True);
      Wait(750, 1250);
    end
    else
      Dec(Self.DidMove);
  end;

  // Self.AfterActionAntiBan(True);

  // wait for us to stop moving before we start monitoring the tree tile.
  while RSClient.IsLoggedIn() and (Minimap.HasFlag() or Minimap.IsPlayerMoving()) do
    Self.DoMainLoopStuff('Going to clicked tree...', False);

  Self.UpdateWalkedTree(True);

  OurPos := Self.RSW.GetMyPos();

  // we timeout if we do not gain something into our inventory
  TimeoutCounter.Init(Self.ChopWaitTime);
  while RSClient.IsLoggedIn() do
  begin
    if Self.CheckRuneliteWoodcuttingPlugin(Chopping) then
    begin
      if Chopping then
        Script.WriteMsg('WhileChopping: Runelite says we are chopping!', True)
      else
      begin
        Script.WriteMsg('WhileChopping: Runelite says we are not chopping', True);
        break;
      end;
    end
    else
    begin
      if not Self.FindTree(OurPos, TreeTile, B, ATPA) then
      begin
        Script.WriteMsg('WhileChopping: Tree not found', True);
        break;
      end;

      // if got a click pt
      if ClickPt.X <> -1 then
      begin
        // if chopping anywhere, FindTree isnt accurate enough for this, so we gotta check ourselves
        if TreeTile.X = -1 then
        begin
          ATPA := Self.FindTreeColor(ClickB);

          // make sure theres still colors in this box
          if Length(ATPA) <= 0 then
          begin
            Script.WriteMsg('WhileChopping: no tree colors inside clickBox', True);
            break;
          end;

          B := ATPA.Biggest().Bounds();
        end;

        // make sure that its still in the box
        if not B.Contains(ClickPt) then
        begin
          Script.WriteMsg('WhileChopping: ClickPt not inside B', True);
          break;
        end;
      end;

      IC := Inventory.Count();
      if IC >= (Inventory.HIGH_SLOT + 1) then
      begin
        Script.WriteMsg('WhileChopping: Inventory full', True);
        break;
      end;

      if IC <> InvCount then
      begin
        Script.WriteMsg('WhileChopping: Got an item! Restarting timer', True);
        TimeoutCounter.Restart();
      end;
      InvCount := IC;

      if TimeoutCounter.IsFinished() then
      begin
        Script.WriteMsg('WhileChopping: Timed out', True);
        break;
      end;
    end;

    Self.DoMainLoopStuff('Chopping tree...', True);
  end;

  if TimeoutCounter.IsFinished() then
    Script.WriteMsg('WhileChopping: No log gained in timeout...', True);

  Script.SetStatus('Tree chopping completed!');

  // check if we are not in the spot
  if Self.DidMove < 0 then
    Self.DidMove := 0;

  if Self.DidMove > 6 then
  begin
    Self.DidMove := 0;
    // Self.GoToTrees(True, False);
  end;
end;

{
  Executes when we need to gather items to fill our inventory
}
function TBot.DoGathering(): Boolean;
var
  Clicked: Boolean;
  ClickPt: TPoint;
  B: TBox;
begin
  if (Self.ClickTree(Clicked, ClickPt, B) and Clicked) or
    Self.GoToTrees() or
    (Self.ClickTree(Clicked, ClickPt, B) and Clicked) then
  begin
    Result := True;
    Self.WhileChopping(Self.CurrentChoppingTreeTile, ClickPt, B);
  end;
end;

{$ENDIF} // INEEDBOT_DVC_TREE
