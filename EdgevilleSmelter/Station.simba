{
  Edgeville melter smelter
  Author: ineedbot
  Date: 7/9/2022

  Handles everything smelter related
}

{$IFNDEF INEEDBOT_EVS_SMELTER}
{$DEFINE INEEDBOT_EVS_SMELTER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the tile
}
function TBot.FindStationTile(OurPos, StationTile: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, StationTile, 3);
end;

{
  Gets the search box
}
function TBot.GetStationSearchBox(Tile: TRectangle): TBox;
begin
  Result := Tile.Expand(Round(Tile.Radius() * Self.StationColor.RadiusExpand)).Bounds();
end;

{
  Returns all colors
}
function TBot.FindStationColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.StationColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.StationColor.FilterSize), __GT__);
end;

{
  Tries to find the station at the tile, returns true if it does, also the area of where it is
}
function TBot.FindStation(PlayerPos, StationTile: TPoint; out B: TBox): Boolean;
var
  Tile: TRectangle;
  ATPA: T2DPointArray;
begin
  // get the tile location on the mainscreen, and check if its visible
  Tile := Self.FindStationTile(PlayerPos, StationTile);

  B := Self.GetStationSearchBox(Tile);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());
  Result := True;

  // find the tree's colors in this tile
  ATPA := Self.FindStationColor(B);

  if Length(ATPA) <= 0 then
    B := Tile.Bounds().Expand(-MainScreen.ConvertDistance(Self.StationColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the station, WasClicked true if clicked it
}
function TBot.ClickStation(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  TP: TPoint;
  StationTiles: TPointArray;
  Clicked: Boolean;
begin
  if Self.HandleRingOfForging() then
    exit();

  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // randomize the tiles a bit, shake em up
  StationTiles := Copy(Self.StationTiles);
  StationTiles.Sort(OurTile);
  StationTiles.RandomizeNearDists(OurTile, 12, 0.2);

  for TP in StationTiles do
  begin
    // make sure the door is opened if we need it to be
    if (Velocity = Point(0, 0)) and Self.HandleDoors(OurTile, TP, Clicked) then
      OurTile := Self.RSW.GetMyPos();

    // find the belt
    if not Self.FindStation(OurTile, TP, B) then
    begin
      Script.WriteMsg('ClickStation: not visible', True);
      continue;
    end;

    Script.WriteMsg('ClickStation: Found, checking uptext', True);

    Result := True;

    // now apply velocity and check uptext
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickStation: Tile velocity no visible', True);
        continue;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image.DrawBox(B, clMoneyGreen);
    end;

    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Self.StationUptexts;
    Mouse.Move(B);
    Script.MouseLooksForUpText := [];

    Script.RareSmallWait();

    if not MainScreen.IsUpText(Self.StationUptexts, Random(100, 250)) then
    begin
      Script.WriteMsg('ClickStation: Bad uptext', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Script.WriteMsg('ClickStation: Good uptext, clicking', True);

    if MainScreen.IsUpText(Self.StationOptions, Random(100, 250)) and (Random() < 0.9) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := Mouse.DidClick(True);
    end
    else if MainScreen.IsUpText('options') then
      WasClicked := ChooseOption.Select(Self.StationOptions);

    if not WasClicked then
    begin
      Script.WriteMsg('ClickStation: Didnt click', True);
      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Script.WriteMsg('ClickStation: Clicked', True);
    break;
  end;
end;

{
  While we walk to the station
}
procedure WalkingToStation(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    // if we clicked the fish spot, then stop the walker
    if Bot.ClickStation(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the station while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;
end;

{
  Walks to the station,
  Returns true if we clicked the station while walking
}
function TBot.GoToStation(Force: Boolean = False; Click: Boolean = True): Boolean;
var
  OurPos: TPoint;
  PathIdx: Int32;
  Walked: Boolean;
  BeforeCallback, BeforeCallback2: TRSWalker_OnWalkEvent;
begin
  if Self.HandleRingOfForging() then
    exit();

  Script.WriteMsg('Going to station...', True);
  OurPos := Self.RSW.GetMyPos();

  if Force or (OurPos.DistanceTo(Self.StationWalkTile) > 30) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Self.StationWalkTile).Mean()) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to station spot...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;   
    BeforeCallback2 := @Self.RSW.OnWalkEvent;
    Self.RSW.OnWalkEvent := @WalkHandleDoor;
    if Click then
      Self.RSW.OnWalkingEvent := @WalkingToStation;
    try
      Walked := True;
      Self.RSW.Enabled := True;

      if Length(Self.ToStationPaths) > 0 then
      begin
        PathIdx := SRL.TruncatedGauss(Low(Self.ToStationPaths), High(Self.ToStationPaths));

        if OurPos.DistanceTo(Self.ToStationPaths[PathIdx][Low(Self.ToStationPaths[PathIdx])]) <
          OurPos.DistanceTo(Self.ToStationPaths[PathIdx][High(Self.ToStationPaths[PathIdx])]) then
          Walked := Self.RSW.WalkPath(Self.ToStationPaths[PathIdx], 8);
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Self.StationWalkTile.Random(-6, 6, True), 0);
    except
    end;                               
    Self.RSW.OnWalkEvent := @BeforeCallback2;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to station spot');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      Self.HandleDoors(Self.RSW.GetMyPos(), Self.StationWalkTile, Walked, True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked a fish spot
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  waits for the make screen to open
}
function TBot.WaitStationStart(): Boolean;
var
  CountDown: TCountdown;
begin
  // we only wait a finite amount of time...
  CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    // make opened
    if Make.IsOpen() and (Length(Make.GetItemButtons()) > 0) then
    begin
      Script.WriteMsg('WaitStationStart: make opened', True);
      exit(True);
    end;

    if Self.UsingInterfaceMake and MainScreen.AnyInterfaceOpen() then
    begin
      Script.WriteMsg('WaitStationStart: make screen opened', True);
      exit(True);
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitStationStart: Still moving...', True);
      CountDown.Restart();
    end
    else if Self.MakeOption = -1 then
    begin       
      Script.WriteMsg('WaitStationStart: Not expecting make.', True);
      exit(True);
    end;

    // timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('WaitStationStart: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Opening station...', False);
  end;
end;

{
  While it does the stuff at the station
}
procedure TBot.WhileDoingStation();
var
  CountDown: TCountDown;
  MC, MCount, OGMCount, StopShort: Int32;
  MaterialSlots: TIntegerArray;
begin
  Script.WriteMsg('Making...', True);
  CountDown.Init(Self.StationWaitTime);

  // count
  Inventory.FindItems(Self.MaterialItems, MaterialSlots);
  MCount := Length(MaterialSlots);
  OGMCount := MCount;

  StopShort := MCount;
  if Random() < 0.05 then
    StopShort := SRL.SkewedRand(MCount, MCount, 0);

  Self.AfterActionAntiBan(True, False);

  while RSClient.IsLoggedIn() do
  begin
    // check inv
    MaterialSlots.Clear();
    Inventory.FindItems(Self.MaterialItems, MaterialSlots);
    MC := Length(MaterialSlots);

    if Self.UsingRingOfForging then
    begin
      if (MC <> MCount) then
        Self.RingOfForgingCharges -= MCount - MC;

      if Self.HandleRingOfForging() then
      begin
        Script.WriteMsg('Transform: HandleRingOfForging!', True);
        break;
      end;
    end;

    if MC < Self.MaterialRatio then
    begin
      Script.WriteMsg('Transform: No more material', True);
      break;
    end;

    if MC <> MCount then
    begin
      Script.WriteMsg('Transform: InvCount changed, restarting countdown', True);
      CountDown.Restart();
    end;

    if (StopShort - (OGMCount - MC)) <= 0 then
    begin
      if Random() < 0.65 then
        Self.StoppedShort := True;

      Script.WriteMsg('Stopping short for antiban', True);
      break;
    end;

    MCount := MC;

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('Transform: Countdown expired', True);
      break;
    end;

    if Chat.LeveledUp() then
    begin
      Script.WriteMsg('Transform: Leveld', True);
      if Random() < 0.2 then
      begin
        Wait(0, 1500, wdLeft);
        while Chat.ClickContinue(Script.ShouldPressKeyboard()) do
          Wait(75, 500);
      end;
      break;
    end;

    if not Self.ShouldDoStation() then
    begin
      Script.WriteMsg('Transform: Shouldn''t be doing station', True);
      break;
    end;

    Self.DoMainLoopStuff('Transforming items...', True);
  end;

  Wait(0, 5555, wdLeft);
end;

{
  Does station stuff
}
function TBot.DoStation(): Boolean;
var
  Clicked: Boolean;
begin
  // click it
  if not ((Self.ClickStation(Clicked) and Clicked)
    or Self.GoToStation()
    or (Self.ClickStation(Clicked) and Clicked)
    or Self.GoToStation(True)
    or (Self.ClickStation(Clicked) and Clicked)) then
  begin
    Script.WriteMsg('Failed to click station');
    exit();
  end;

  Self.AfterActionAntiBan(True, False);

  if not Self.WaitStationStart() then
  begin
    Script.WriteMsg('Failed to open make');
    Self.HandleDoors(Self.RSW.GetMyPos(), Self.StationWalkTile, Clicked, True);
    exit();
  end;

  if Self.UsingInterfaceMake and MainScreen.AnyInterfaceOpen() then
  begin
    if Script.ShouldPressKeyboard() then
      Keyboard.PressKey(VK_SPACE)
    else
      Mouse.Click(Self.InterfaceMakeBox, MOUSE_LEFT);
  end
  else if Make.IsOpen() and not Make.Select(Self.MakeOption, MAKE_QUANTITY_ALL, Script.ShouldPressKeyboard()) then
  begin
    Script.WriteMsg('Failed to select make');
    exit();
  end;

  Self.WhileDoingStation();
  Result := True;
end;

{$ENDIF} // INEEDBOT_EVS_SMELTER
