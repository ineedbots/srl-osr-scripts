{
  Motherload Miner ladder
  Author: ineedbot
  Date: 8/27/2022

  Ladder
}

{$IFNDEF INEEDBOT_MLM_LADDER}
{$DEFINE INEEDBOT_MLM_LADDER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the Ladder tile
}
function TBot.FindLadderTile(OurPos: TPoint; Upper: Boolean): TRectangle;
begin
  if Upper then
    Result := Self.RSW.GetTileMSEx(OurPos, Self.UpperLadderTile)
  else
    Result := Self.RSW.GetTileMSEx(OurPos, Self.LowerLadderTile);
end;

{
  Gets the search box
}
function TBot.GetLadderSearchBox(LadderTile: TRectangle): TBox;
begin
  Result := LadderTile.Expand(Round(LadderTile.Radius() * Self.LadderColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindLadderColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.LadderColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.LadderColor.FilterSize), __GT__);
end;

{
  Returns true if the Ladder is visible, B is the bounds of the Ladder on the screen
}
function TBot.FindLadder(OurTile: TPoint; Upper: Boolean; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindLadderTile(OurTile, Upper);

  B := Self.GetLadderSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindLadderColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.LadderColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the Ladder, WasClicked true if clicked it
}
function TBot.ClickLadder(out WasClicked: Boolean; Upper: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // find the sink
  if not Self.FindLadder(OurTile, Upper, B) then
  begin
    Script.WriteMsg('ClickLadder: sink not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickLadder: Found sink, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickLadder: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.LadderUptext;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.LadderUptext, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickLadder: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickLadder: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.LadderOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.LadderOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickLadder: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickLadder: Clicked', True);
end;

{
  While we walk to the Ladder
}
procedure WalkingToLadder(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked, Upper: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);
    Upper := Bot.IsOnUpperLevel(Position);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickLadder(WasClicked, Upper, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the Ladder while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;
end;

{
  Walks to the Ladder, return true if we clicked it early
}
function TBot.GoToLadder(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked, Upper: Boolean;
  OurPos, Where: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to Ladder....', True);
  OurPos := Self.RSW.GetMyPos();
  Upper := Self.IsOnUpperLevel(OurPos);

  if Upper then
    Where := Self.UpperLadderTile
  else
    Where := Self.LowerLadderTile;

  if Force or (OurPos.DistanceTo(Where) > 50) or not Self.FindLadder(OurPos, Upper, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to Ladder...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if Clicking then
      Self.RSW.OnWalkingEvent := @WalkingToLadder;
    try
      Walked := Self.RSW.WalkBlind(Where.Random(-6, 6, True), 0);
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to Ladder!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{$ENDIF} // INEEDBOT_MLM_LADDER
