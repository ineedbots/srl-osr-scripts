{
  Motherload Miner rockfall
  Author: ineedbot
  Date: 8/27/2022

  Rockfall
}

{$IFNDEF INEEDBOT_MLM_ROCKFALL}
{$DEFINE INEEDBOT_MLM_ROCKFALL}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the Rockfall tile
}
function TBot.FindRockfallTile(OurPos: TPoint; Rockfall: TRockfall): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Rockfall.Tile);
end;

{
  Gets the search box
}
function TBot.GetRockfallSearchBox(RockfallTile: TRectangle; Rockfall: TRockfall): TBox;
begin
  Result := RockfallTile.Expand(Round(RockfallTile.Radius() * Rockfall.Color.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindRockfallColor(Area: TBox; Rockfall: TRockfall): T2DPointArray;
begin
  Result := MainScreen.FindObject(Rockfall.Color.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Rockfall.Color.FilterSize), __GT__);
end;

{
  Returns all object colors within the box
}
function TBot.FindRockfallNoColor(Area: TBox; Rockfall: TRockfall): T2DPointArray;
begin
  Result := MainScreen.FindObject(Rockfall.NoColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Rockfall.NoColor.FilterSize), __GT__);
end;

{
  Returns true if the Rockfall is visible, B is the bounds of the Rockfall on the screen
}
function TBot.FindRockfall(OurTile: TPoint; Rockfall: TRockfall; out B: TBox; out IsThere: Boolean): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
  TPA: TPointArray;
begin
  TileRect := Self.FindRockfallTile(OurTile, Rockfall);

  B := Self.GetRockfallSearchBox(TileRect, Rockfall);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;
  IsThere := False;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindRockfallNoColor(B, Rockfall);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();
    B := TPA.Bounds();

    ATPA := Self.FindRockfallColor(B, Rockfall);
    IsThere := (Length(TPA) < Length(ATPA.Biggest()));

    B := ATPA.Biggest().Bounds();
  end;
end;

{$ENDIF} // INEEDBOT_MLM_ROCKFALL
