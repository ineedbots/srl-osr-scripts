{
  Motherload Miner utils
  Author: ineedbot
  Date: 8/27/2022

  Utils
}

{$IFNDEF INEEDBOT_MLM_UTILS}
{$DEFINE INEEDBOT_MLM_UTILS}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Config.simba}

{$include_once Bank.simba}
{$include_once Crate.simba}
{$include_once Hopper.simba}
{$include_once Ladder.simba}
{$include_once Rockfall.simba}
{$include_once Sack.simba}
{$include_once Strut.simba}
{$include_once Vein.simba}

{
  Amount of pay-dirt in sack
}
function TBot.AmountOfPayDirtInSack(): Int32;
var
  TPA: TPointArray;
begin
  // flight's motherload!

  // look for the border
  if SRL.FindColors(TPA, CTS1(2306104, 0), [MainScreen.X1, MainScreen.Y1, MainScreen.X1 + 100, MainScreen.Y1 + 100]) <= 0 then
  begin
    // runelite?
    exit(-1);
  end;

  // use ocr to detect number
  Result := OCR.RecognizeNumber(TPA.Bounds(), TOCRColorRule.Create([13158600, 255]), RS_FONT_QUILL);
end;

{
  Fix itemfinder Pay-dirt!
}
function TRSItemFinder.Find(constref Item: TRSItem; constref Slots: TBoxArray; constref MaxToFind: Int32 = -1): TIntegerArray; override;
var
  x, y, i: Int32;
  ItemStr: String;
begin
  ItemStr := ToStr(Item).Lower();
  if (ItemStr <> 'pay-dirt') and (ItemStr <> '12011') then
  begin
    Result := inherited(Item, Slots, MaxToFind);
    exit();
  end;

  for i := 0 to High(Slots) do
  begin
    if not FindDTM(Bot.DTM_PayDirt, x, y, Slots[i]) then
      continue;

    Result := Result + i;

    if (MaxToFind > 0) and (Length(Result) = MaxToFind) then
      exit();
  end;
end;

{
  From Flight's AIOFisher
}
procedure TBot.DoSkillHover();
begin
  Script.Antiban.HoverSkill(ERSSKILL.MINING, Random(1700, 3200), True);
end;

{
  Enables special attack
}
function TBot.CheckSpec(): Boolean;
begin
  if not Minimap.IsSpecWeapon() then
    exit();

  if Minimap.IsSpecEnabled() then
    exit();

  if Minimap.GetSpecLevel() < 100 then
    exit();

  Script.WriteMsg('Special attack boosting');

  if not Minimap.EnableSpec(100) then
    exit();

  Wait(1000, 2000, wdLeft);
  Result := True;
end;

{
  Does general checks and does antiban.
}
function TBot.DoAntiBan(DoInterfaceClose: Boolean = False): Boolean;
var
  Uptxt: String;
begin
  Script.DoGeneralChecks();

  if not RSClient.IsLoggedIn() then
    exit();

  // check we we leveled up
  if Chat.LeveledUp() then
  begin
    Wait(0, 2500, wdLeft);
    while Chat.ClickContinue(Script.ShouldPressKeyboard()) do
      Wait(75, 500);
  end;

  Self.CheckSpec();

  if DoInterfaceClose and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface();

  // make sure nothing is selected in our inventory, might prevent us from interacting with stuff
  Inventory.SetSelectedSlot(-1);

  Uptxt := MainScreen.GetUpText();
  if Uptxt.Count('->') > 0 then
    Mouse.Click(MOUSE_LEFT);

  // general antiban
  Result := Script.Antiban.DismissRandom() or Script.Antiban.DoAntiban(Script.AllowBreaks, Script.AllowBreaks);
end;

{
  From Slacky's BarbFisher
}
procedure TBot.AfterActionAntiBan(DoAB: Boolean = True; DoInterfaceClose: Boolean = True; WasFailure: Boolean = False);
begin
  Wait(0, 750, wdLeft);

  if DoAB then
    Self.DoAntiban(DoInterfaceClose);

  if WasFailure then
    MainScreen.SetHighestPitch();
end;

{
  Debug draws the stuff
}
procedure TBot.DebugDraw();
var
  ATPA: T2DPointArray;
  //TPA: TPointArray;
  OurTile, TP: TPoint;
  TileRect: TRectangle;
  i: Int32;
  CompAng: Double;
  Text: String;
  B: TBox;
  T, O, P: TIntegerArray;
  Bool: Boolean;
begin
  OurTile := Self.RSW.GetMyPos();
  CompAng := Minimap.GetCompassAngle(False);

  Text := 'Pos: ' + ToStr(OurTile) + LineEnding;
  Text += 'Paydirt: ' + ToStr(Self.AmountOfPayDirtInSack());
  RSClient.Image.DrawText(Text, [MainScreen.X1, MainScreen.Y1 + 20], clGreen);

  if not MainScreen.AnyInterfaceOpen() then
  begin
    // bank
    for TP in Self.BankTiles do
    begin
      TileRect := Self.FindBankTile(OurTile, TP);
      B := Self.GetBankSearchBox(TileRect);
      ATPA := Self.FindBankColor(B);

      RSClient.Image.DrawBox(B, clGreen);
      RSClient.Image.DrawATPA(ATPA);
      RSClient.Image.DrawRect(TileRect, clRed);
      RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, TP, CompAng), 4, clBlue);

      if Self.FindBank(OurTile, TP, B) then
        RSClient.Image.DrawBox(B, clBlue);
    end;

    // sack
    TileRect := Self.FindSackTile(OurTile);
    B := Self.GetSackSearchBox(TileRect);
    ATPA := Self.FindSackColor(B);

    RSClient.Image.DrawBox(B, clGreen);
    RSClient.Image.DrawATPA(ATPA);
    RSClient.Image.DrawRect(TileRect, clRed);
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, Self.SackTile, CompAng), 4, clBlue);

    if Self.FindSack(OurTile, B) then
      RSClient.Image.DrawBox(B, clBlue);

    // crate
    TileRect := Self.FindCrateTile(OurTile);
    B := Self.GetCrateSearchBox(TileRect);
    ATPA := Self.FindCrateColor(B);

    RSClient.Image.DrawBox(B, clGreen);
    RSClient.Image.DrawATPA(ATPA);
    RSClient.Image.DrawRect(TileRect, clRed);
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, Self.CrateTile, CompAng), 4, clBlue);

    if Self.FindCrate(OurTile, B) then
      RSClient.Image.DrawBox(B, clBlue);

    // hopper
    TileRect := Self.FindHopperTile(OurTile);
    B := Self.GetHopperSearchBox(TileRect);
    ATPA := Self.FindHopperColor(B);

    RSClient.Image.DrawBox(B, clGreen);
    RSClient.Image.DrawATPA(ATPA);
    RSClient.Image.DrawRect(TileRect, clRed);
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, Self.HopperTile, CompAng), 4, clBlue);

    if Self.FindHopper(OurTile, B) then
      RSClient.Image.DrawBox(B, clBlue);

    // strut
    TileRect := Self.FindStrutTile(OurTile);
    B := Self.GetStrutSearchBox(TileRect);
    ATPA := Self.FindStrutColor(B);

    RSClient.Image.DrawBox(B, clGreen);
    RSClient.Image.DrawATPA(ATPA);
    RSClient.Image.DrawRect(TileRect, clRed);
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, Self.StrutTile, CompAng), 4, clBlue);

    if Self.FindStrut(OurTile, B) then
      RSClient.Image.DrawBox(B, clBlue);

    // water
    TileRect := Self.FindWaterTile(OurTile);
    B := Self.GetWaterSearchBox(TileRect);
    ATPA := Self.FindWaterColor(B);

    RSClient.Image.DrawBox(B, clGreen);
    RSClient.Image.DrawATPA(ATPA);
    RSClient.Image.DrawRect(TileRect, clRed);
    RSClient.Image.DrawCross(Self.RSW.WorldToMM(OurTile, Self.WaterTile, CompAng), 4, clBlue);

    if Self.FindWater(OurTile, B, Bool) and Bool then
      RSClient.Image.DrawBox(B, clBlue);
  end;

  if Inventory.IsOpen() then
  begin
    Inventory.FindItems(Self.ToolItems, T);
    Inventory.FindItems(Self.OreItems, O);
    Inventory.FindItem(Self.PayDirtItem, P);

    for i := 0 to 27 do
    begin
      if T.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clWhite)
      else if O.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clRed)
      else if P.Find(i) <> -1 then
        RSClient.Image.DrawBox(Inventory.GetSlotBox(i), clPurple)
    end;
  end;
end;

{
  Draws the stuff onto the screen
}
procedure TBot.Draw();
begin
  if not Script.CanDraw() then
    exit();

  RSClient.Image.Clear();
  // TODO complete

  if Script.Debug then
    Self.DebugDraw();
end;

{
  Does the proggy report to the console window
}
procedure TBot.ReportConsole();
var
  WriteOut: String;
begin
  if not Script.CanReportConsole() then
    exit();

  WriteOut += 'Runtime: ' + SRL.MsToTime(Script.TrueRunTime.ElapsedTime(), Time_Short) + LineEnding;
  WriteOut += 'Status: ' + Script.Status + LineEnding;
  WriteOut += 'Energy: ' + ToStr(Script.AntiBanEnergy.EnergyLevel(Script.Antiban)) + LineEnding;
  WriteOut += 'Mined: ' + IntToStr(Self.OresDone) + LineEnding;
  WriteOut += 'Taking long breaks: ' + ToStr(TAKEBREAKS) + LineEnding;
  WriteOut += 'Time until break: ' + Script.Antiban.TimeUntilBreak(Script.Antiban.Breaks[0]) + LineEnding;
  WriteOut += 'Time until shutdown: ' + SRL.MsToTime(Script.ShutdownTime - GetTimeRunning(), Time_Short) + LineEnding;

  ClearDebug();
  Writeln(WriteOut);
end;

{
  General main loop stuff to do.
}
procedure TBot.DoMainLoopStuff(Status: String = ''; DoAB: Boolean = True);
begin
  if Status <> '' then
    Script.SetStatus(Status);

  if DoAB then
    Self.DoAntiBan();

  Self.ReportConsole();
  Self.Draw();

  // check if we gained xp, failsafe
  if RSClient.IsLoggedIn() then
    Script.CheckActivity();

  Wait(Script.MainLoopWaitAmount(True));
end;

{$ENDIF} // INEEDBOT_MLM_UTILS
