{
  Motherload Miner hopper
  Author: ineedbot
  Date: 8/27/2022

  Hopper
}

{$IFNDEF INEEDBOT_MLM_HOPPER}
{$DEFINE INEEDBOT_MLM_HOPPER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the Hopper tile
}
function TBot.FindHopperTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.HopperTile, Self.HopperHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetHopperSearchBox(HopperTile: TRectangle): TBox;
begin
  Result := HopperTile.Expand(Round(HopperTile.Radius() * Self.HopperColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindHopperColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.HopperColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.HopperColor.FilterSize), __GT__);
end;

{
  Returns true if the Hopper is visible, B is the bounds of the Hopper on the screen
}
function TBot.FindHopper(OurTile: TPoint; Height: Int32; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindHopperTile(OurTile, Height);

  B := Self.GetHopperSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindHopperColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.HopperColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the Hopper, WasClicked true if clicked it
}
function TBot.ClickHopper(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  Clicked: Boolean;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // is on lower part
  if Self.IsOnUpperLevel(OurTile) then
  begin
    Script.WriteMsg('ClickCrate: On Upper! should be on lower', True);
    exit();
  end;

  Height := Self.GetHeight(OurTile);

  // handle rocks
  if Self.HandleRockfalls(OurTile, Self.HopperTile, Height, False, Clicked, Velocity) then
  begin
    OurTile := Self.RSW.GetMyPos();
    Velocity := Script.WalkerVelToMSVel(Script.GetVelocity(OurTile));
    Height := Self.GetHeight(OurTile);
  end;

  // find the sink
  if not Self.FindHopper(OurTile, Height, B) then
  begin
    Script.WriteMsg('ClickHopper: sink not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickHopper: Found sink, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickHopper: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image().DrawBox(B, clMoneyGreen);
  end;

  // uptext
  Script.OldMouseMovingCallback := Mouse.OnMoving;
  Mouse.OnMoving := WhileMouseMovesLookForUpText;
  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.HopperUptext;

  Mouse.Move(B);

  Script.MouseLooksForUpText := [];
  Mouse.OnMoving := Script.OldMouseMovingCallback;
  Script.OldMouseMovingCallback := nil;
  

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.HopperUptext, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickHopper: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickHopper: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.HopperOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.HopperOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickHopper: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickHopper: Clicked', True);
end;

{
  While we walk to the Hopper
}
procedure WalkingToHopper(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickHopper(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the Hopper while moving, nice!');
      Walker^.Enabled := False;
      Bot.WalkerWasEarlySuccess := True;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // should be on lower
  if Bot.IsOnUpperLevel(Position) then
    Walker^.Enabled := False;
end;

{
  Walks to the Hopper, return true if we clicked it early
}
function TBot.GoToHopper(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  OurPos: TPoint;
  B: TBox;
  Height: Int32;
begin
  Script.WriteMsg('Going to Hopper....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);

  if Force or (OurPos.DistanceTo(Self.HopperTile) > 50) or not Self.FindHopper(OurPos, Height, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to Hopper...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.ClickWhileWalking := Clicking;
    Self.RSW.OnWalkingEvent := WalkingToHopper;

    Self.WalkerWasEarlySuccess := False;

    try
      Walked := Self.RSW.WalkBlind(Self.HopperTile.Random(-6, 6, True), 0);
    except
    end;

    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to Hopper!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

      OurPos := Self.RSW.GetMyPos();
      Self.HandleRockfalls(OurPos, Self.HopperTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), Walked, [0, 0], True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;
end;

{
  Deposits paydirt into hopper
}
function TBot.DoHopper(out NeedWaterRunning: Boolean): Boolean;
var
  WasClicked: Boolean;
  OurPos: TPoint;
  CountDown: TCountDown;
  PayDirtSlots: TIntegerArray;
  PayDirtCount: Int32;
  ChatStr: String;
begin
  Script.WriteMsg('Doing hopper', True);

  // we need to be on lower
  if not Self.DoLadder(False) then
  begin
    Script.WriteMsg('Failed to do ladder');
    exit();
  end;

  if not Inventory.FindItem(Self.PayDirtItem, PayDirtSlots) then
  begin
    Script.WriteMsg('No paydirt!');
    exit(True);
  end;

  PayDirtCount := Length(PayDirtSlots);
  Script.WriteMsg('Paydirt count: ' + ToStr(PayDirtCount), True);

  if not ((Self.ClickHopper(WasClicked) and WasClicked)
    or Self.GoToHopper()
    or (Self.ClickHopper(WasClicked) and WasClicked)
    or Self.GoToHopper(True)
    or (Self.ClickHopper(WasClicked) and WasClicked)) then
  begin
    Script.WriteMsg('Failed to click hopper');
    exit();
  end;

  Self.AfterActionAntiBan(True);

  // ok we clicked it, wait until we are changed state
  CountDown.Init(SRL.SkewedRand(5000, 2000, 7000));
  while RSClient.IsLoggedIn() do
  begin
    PayDirtSlots.Clear();
    if not Inventory.FindItem(Self.PayDirtItem, PayDirtSlots) then
    begin
      Script.WriteMsg('DoHopper: No paydirt!', True);
      Result := True;
      break;
    end;

    if Length(PayDirtSlots) <> PayDirtCount then
    begin
      Script.WriteMsg('DoHopper: Paydirt count changed!', True);
      Result := True;
      break;
    end;

    if Self.CouldntReach() then
    begin
      Script.WriteMsg('DoHopper: Couldn''t reach...', True);
      break;
    end;

    if Chat.IsOpen() then
    begin
      ChatStr := Chat.GetChat().Strip();

      if ChatStr.IsInString(Self.NeedWaterRunningTexts) then
      begin
        Script.WriteMsg('DoHopper: Need water running!', True);
        NeedWaterRunning := True;
        Result := True;
        break;
      end;
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('DoHopper: Still moving...', True);
      CountDown.Restart();
    end;

    // did we timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('DoHopper: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to hopper....', False);
  end;

  if not Result then
  begin
    OurPos := Self.RSW.GetMyPos();
    Self.HandleRockfalls(OurPos, Self.HopperTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), WasClicked, [0, 0], True);
  end;

  Wait(0, 2000, wdLeft);
end;

{$ENDIF} // INEEDBOT_MLM_HOPPER
