{
  Motherload Miner ladder
  Author: ineedbot
  Date: 8/27/2022

  Ladder
}

{$IFNDEF INEEDBOT_MLM_LADDER}
{$DEFINE INEEDBOT_MLM_LADDER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Rockfall.simba}

{
  Finds the Ladder tile
}
function TBot.FindLadderTile(OurPos: TPoint; Height: Int32; Upper: Boolean): TRectangle;
begin
  if Upper then
    Result := Self.RSW.GetTileMSEx(OurPos, Self.UpperLadderTile, Self.UpperLadderHeight - Height)
  else
    Result := Self.RSW.GetTileMSEx(OurPos, Self.LowerLadderTile, Self.LowerLadderHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetLadderSearchBox(LadderTile: TRectangle; Upper: Boolean): TBox;
begin
  if Upper then
    Result := LadderTile.Expand(Round(LadderTile.Radius() * Self.UpperLadderColor.RadiusExpand)).Bounds()
  else
    Result := LadderTile.Expand(Round(LadderTile.Radius() * Self.LowerLadderColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindLadderColor(Area: TBox; Upper: Boolean): T2DPointArray;
begin
  if Upper then
  begin
    Result := MainScreen.FindObject(Self.UpperLadderColor.RSObject, Area);
    Result.FilterSize(MainScreen.ConvertDistance(Self.UpperLadderColor.FilterSize), __GT__);
  end
  else
  begin
    Result := MainScreen.FindObject(Self.LowerLadderColor.RSObject, Area);
    Result.FilterSize(MainScreen.ConvertDistance(Self.LowerLadderColor.FilterSize), __GT__);
  end;
end;

{
  Returns true if the Ladder is visible, B is the bounds of the Ladder on the screen
}
function TBot.FindLadder(OurTile: TPoint; Height: Int32; Upper: Boolean; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindLadderTile(OurTile, Height, Upper);

  B := Self.GetLadderSearchBox(TileRect, Upper);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindLadderColor(B, Upper);

  if Length(ATPA) <= 0 then
  begin
    if Upper then
      B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.UpperLadderColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
    else
      B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.LowerLadderColor.NoColorTileExpand));
  end
  else
    B := ATPA.NearestTo(TileRect.Mean()).Bounds();
end;

{
  Returns true if found the Ladder, WasClicked true if clicked it
}
function TBot.ClickLadder(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  Upper, Clicked: Boolean;
  Tile: TPoint;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeight(OurTile);
  Upper := Self.IsOnUpperLevel(OurTile);

  // handle rocks
  Tile := Self.UpperLadderTile;
  if not Upper then
    Tile := Self.LowerLadderTile;
  if (Velocity = Point(0, 0)) and Self.HandleRockfalls(OurTile, Tile, Height, Upper, Clicked, Velocity) then
  begin
    OurTile := Self.RSW.GetMyPos();
    Velocity := Script.WalkerVelToMSVel(Script.GetVelocity(OurTile));
    Height := Self.GetHeight(OurTile);
    Upper := Self.IsOnUpperLevel(OurTile);
  end;

  // find the ladder
  if not Self.FindLadder(OurTile, Height, Upper, B) then
  begin
    Script.WriteMsg('ClickLadder: not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickLadder: Found, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickLadder: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image().DrawBox(B, clMoneyGreen);
  end;

  // uptext
  Script.OldMouseMovingCallback := Mouse.OnMoving;
  Mouse.OnMoving := WhileMouseMovesLookForUpText;
  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.LadderUptext;

  Mouse.Move(B);
  
  Script.MouseLooksForUpText := [];
  Mouse.OnMoving := Script.OldMouseMovingCallback;
  Script.OldMouseMovingCallback := nil;
  

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.LadderUptext, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickLadder: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickLadder: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.LadderOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.LadderOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickLadder: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickLadder: Clicked', True);
end;

{
  While we walk to the Ladder
}
procedure WalkingToLadder(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickLadder(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the Ladder while moving, nice!');
      Walker^.Enabled := False;
      Bot.WalkerWasEarlySuccess := True;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // watch the levels
  if Bot.IsOnUpper <> Bot.IsOnUpperLevel(Position) then
  begin
    Walker^.Enabled := False;
    Bot.WalkerWasEarlySuccess := True;
  end;
end;

{
  Walks to the Ladder, return true if we clicked it early
}
function TBot.GoToLadder(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked, Upper: Boolean;
  OurPos, Where: TPoint;
  PathIdx, Height: Int32;
  B: TBox;
begin
  Script.WriteMsg('Going to Ladder....', True);
  OurPos := Self.RSW.GetMyPos();
  Upper := Self.IsOnUpperLevel(OurPos);
  Height := Self.GetHeight(OurPos);

  if Upper then
    Where := Self.UpperLadderTile
  else
    Where := Self.LowerLadderTile;

  if Force or (OurPos.DistanceTo(Where) > 50) or not Self.FindLadder(OurPos, Height, Upper, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to Ladder...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.OldWalkCallback := Self.RSW.OnWalkEvent;
    Self.ClickWhileWalking := Clicking;
    Self.RSW.OnWalkEvent := WalkHandleRockfall;
    Self.RSW.OnWalkingEvent := WalkingToLadder;
    
    try
      Walked := True;
      Self.RSW.Enabled := True;
      Self.WalkerWasEarlySuccess := False;

      if (Length(Self.ToLadderPaths) > 0) and not Upper then
      begin
        PathIdx := SRL.TruncatedGauss(Low(Self.ToLadderPaths), High(Self.ToLadderPaths));

        if OurPos.DistanceTo(Self.ToLadderPaths[PathIdx][Low(Self.ToLadderPaths[PathIdx])]) <
          OurPos.DistanceTo(Self.ToLadderPaths[PathIdx][High(Self.ToLadderPaths[PathIdx])]) then
          Walked := Self.RSW.WalkPath(Self.ToLadderPaths[PathIdx], 8);
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Where.Random(-6, 6, True), 0);
    except
      Walked := False;
    end;

    Self.RSW.OnWalkEvent := Self.OldWalkCallback;
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;
    Self.OldWalkCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to Ladder!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

      OurPos := Self.RSW.GetMyPos();
      Height := Self.GetHeight(OurPos);
      Upper := Self.IsOnUpperLevel(OurPos);
      Self.HandleRockfalls(OurPos, Where, Height, Upper, Walked, [0, 0], True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;
end;

{
  Does the ladder!
}
function TBot.DoLadder(GoingToUpper: Boolean): Boolean;
var
  Clicked, Upper: Boolean;
  CountDown: TCountDown;
  OurPos, Where: TPoint;
begin
  Script.WriteMsg('Need to do ladder!!', True);
  Upper := Self.IsOnUpperLevel();

  if GoingToUpper = Upper then
  begin
    Script.WriteMsg('Already on level!', True);
    exit(True);
  end;

  Self.IsOnUpper := Upper;

  // click it
  if not ((Self.ClickLadder(Clicked) and Clicked)
    or Self.GoToLadder()
    or (Self.ClickLadder(Clicked) and Clicked)
    or Self.GoToLadder(True)
    or (Self.ClickLadder(Clicked) and Clicked)) then
  begin
    Script.WriteMsg('Failed to click ladder');
    exit();
  end;

  Self.AfterActionAntiBan(True);

  // ok we clicked it, wait until we are changed state
  CountDown.Init(SRL.SkewedRand(5000, 2000, 7000));
  while RSClient.IsLoggedIn() do
  begin
    // did we change state??
    if Upper <> Self.IsOnUpperLevel() then
    begin
      Script.WriteMsg('DoLadder: Changed state!', True);
      Result := True;
      break;
    end;

    if Self.CouldntReach() then
    begin
      Script.WriteMsg('DoLadder: Couldn''t reach...', True);
      break;
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('DoLadder: Still moving...', True);
      CountDown.Restart();
    end;

    // did we timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('DoLadder: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to ladder....', False);
  end;

  if not Result then
  begin
    OurPos := Self.RSW.GetMyPos();
    Where := Self.UpperLadderTile;
    if not Upper then
      Where := Self.LowerLadderTile;
    Self.HandleRockfalls(OurPos, Where, Self.GetHeight(OurPos), Upper, Clicked, [0, 0], True);
  end;

  Wait(0, 2000, wdLeft);
end;

{$ENDIF} // INEEDBOT_MLM_LADDER
