{
  Motherload Miner rockfall
  Author: ineedbot
  Date: 8/27/2022

  Rockfall
}

{$IFNDEF INEEDBOT_MLM_ROCKFALL}
{$DEFINE INEEDBOT_MLM_ROCKFALL}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}

procedure WalkingToRockfall(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  Walker := Walker;
  Position := Position;
  Destination := Destination;
end;

{$include_once Utils.simba}

{
  Finds the Rockfall tile
}
function TBot.FindRockfallTile(OurPos: TPoint; Height: Int32; Rockfall: TRockfall): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Rockfall.Tile, Rockfall.Height - Height);
end;

{
  Gets the search box
}
function TBot.GetRockfallSearchBox(RockfallTile: TRectangle; Rockfall: TRockfall): TBox;
begin
  Result := RockfallTile.Expand(Round(RockfallTile.Radius() * Rockfall.Color.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindRockfallColor(Area: TBox; Rockfall: TRockfall; NotNoColor: Boolean): T2DPointArray;
begin
  if NotNoColor then
  begin
    Result := MainScreen.FindObject(Rockfall.Color.RSObject, Area);
    Result.FilterSize(MainScreen.ConvertDistance(Rockfall.Color.FilterSize), __GT__);
  end
  else
  begin
    Result := MainScreen.FindObject(Rockfall.NoColor.RSObject, Area);
    Result.FilterSize(MainScreen.ConvertDistance(Rockfall.NoColor.FilterSize), __GT__);
  end;
end;

{
  Returns true if the Rockfall is visible, B is the bounds of the Rockfall on the screen
}
function TBot.FindRockfall(OurTile: TPoint; Height: Int32; Rockfall: TRockfall; out B: TBox; out IsThere: Boolean): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
  TPA: TPointArray;
begin
  TileRect := Self.FindRockfallTile(OurTile, Height, Rockfall);

  B := Self.GetRockfallSearchBox(TileRect, Rockfall);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;
  IsThere := False;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindRockfallColor(B, Rockfall, True);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();

    // this differs from the door on edgeville smelter,
    // edgeville smelter checks for ANY existance of the open door color, if it finds any, door is opened.
    // this checks another color, if it is greater than the rockfall color, its considered mined.
    if Rockfall.HasNoColorData then
    begin
      ATPA := Self.FindRockfallColor(B, Rockfall, False);

      B := TPA.Bounds();
      IsThere := (Length(TPA) > Length(ATPA.Biggest()));
    end
    else
    begin
      B := TPA.Bounds();
      IsThere := True;
    end;
  end;
end;

{
  Returns true if found the rockfall, WasClicked true if clicked it
}
function TBot.ClickRockfall(Rockfall: TRockfall; out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  IsThere: Boolean;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  Height := Self.GetHeight(OurTile);

  // find the rockfall
  if not Self.FindRockfall(OurTile, Height, Rockfall, B, IsThere) then
  begin
    Script.WriteMsg('ClickRockfall: rockfall not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickRockfall: Found rockfall, checking uptext', True);

  Result := True;

  if not IsThere then
  begin
    Script.WriteMsg('ClickRockfall: No rockfall! Its good', True);
    exit();
  end;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickRockfall: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image().DrawBox(B, clMoneyGreen);
  end;

  // uptext
  Script.OldMouseMovingCallback := Mouse.OnMoving;
  Mouse.OnMoving := WhileMouseMovesLookForUpText;
  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.RockfallUptext;

  Mouse.Move(B);

  Script.MouseLooksForUpText := [];
  Mouse.OnMoving := Script.OldMouseMovingCallback;
  Script.OldMouseMovingCallback := nil;


  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.RockfallUptext, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickRockfall: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickRockfall: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.RockfallOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.RockfallOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickRockfall: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickRockfall: Clicked', True);
end;

{
  While we walk to the rockfall
}
procedure WalkingToRockfall(Walker: PRSWalker; Position: TPoint; Destination: TPoint); override;
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallbackRockfall <> nil then
  begin
    Bot.OldWalkingCallbackRockfall(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  if Bot.ClickWhileWalkingRockfall = nil then
    exit();

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickRockfall(Bot.ClickWhileWalkingRockfall^, WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the rockfall while moving, nice!');
      Walker^.Enabled := False;
      Bot.WalkerWasEarlySuccessRockfall := True;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // make sure we are on same level
  if Bot.ClickWhileWalkingRockfall^.IsUpper <> Bot.IsOnUpperLevel(Position) then
    Walker^.Enabled := False;
end;

{
  Walks to the rockfall, return true if we clicked it early
}
function TBot.GoToRockfall(Rockfall: TRockfall; Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked, IsThere, OldClickWhileWalking: Boolean;
  OurPos: TPoint;
  B: TBox;
  Height: Int32;
begin
  Script.WriteMsg('Going to rockfall....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);

  if Force or (OurPos.DistanceTo(Rockfall.Tile) > 50) or not Self.FindRockfall(OurPos, Height, Rockfall, B, IsThere) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to rockfall...');

    Self.OldWalkingCallbackRockfall := Self.RSW.OnWalkingEvent;
    OldClickWhileWalking := Self.ClickWhileWalking;
    Self.ClickWhileWalking := False; // dont try click other things
    Self.RSW.OnWalkingEvent := WalkingToRockfall;

    if Clicking then
      Self.ClickWhileWalkingRockfall := @Rockfall;

    Self.WalkerWasEarlySuccessRockfall := False;

    try
      Walked := Self.RSW.WalkBlind(Rockfall.Tile.Random(-6, 6, True), 0);
    except
    end;

    Self.RSW.OnWalkingEvent := Self.OldWalkingCallbackRockfall;
    Self.OldWalkingCallbackRockfall := nil;
    Self.ClickWhileWalkingRockfall := nil;
    Self.ClickWhileWalking := OldClickWhileWalking;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to rockfall!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccessRockfall;
  end;
end;

{
  Waits to finish mining the rockfall
}
function TBot.WaitForRockfallClear(XP: Int32): Boolean;
var
  CountDown: TCountDown;
  xpc: Int32;
begin
  Script.WriteMsg('Waiting for rockfall to be cleared', True);

  CountDown.Init(SRL.SkewedRand(4000, 3000, 6000));
  while RSClient.IsLoggedIn() do
  begin
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WaitForRockfallClear: Moving', True);
      CountDown.Restart();
    end;

    if Self.CouldntReach() then
    begin
      Script.WriteMsg('Couldnt reach!', True);
      break;
    end;

    xpc := XPBar.ReadXPBar();
    if xpc = -1 then
      Script.WriteMsg('Bad XPBarCount', True)
    else if XP <> xpc then
    begin
      Script.WriteMsg('XP Changed!', True);
      Result := True;
      break;
    end;

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('Timeout', True);
      break;
    end;

    Self.DoMainLoopStuff('Waiting for rockfall to clear', False);
  end;
end;

{
  Handles this rockfall
}
function TBot.HandleRockfall(Rockfall: TRockfall; OurTile: TPoint; Height: Int32; out Clicked: Boolean; Velocity: TPoint = [0, 0]; Force: Boolean = False): Boolean;
var
  B: TBox;
  IsThere, IsVisible, WasClicked: Boolean;
  CountDown: TCountDown;
  XP: Int32;
begin
  Script.WriteMsg('Checking rockfall', True);

  IsVisible := Self.FindRockfall(OurTile, Height, Rockfall, B, IsThere);

  if IsVisible and not IsThere and not Force then
  begin
    Script.WriteMsg('Rockfall is clear!', True);
    exit();
  end;

  Script.WriteMsg('Doing rockfall', True);

  Result := True;
  XP := XPBar.ReadXPBar();
    
  // the rockfall is default there, so we need to make sure we can see it incase we need to mine it
  if not IsVisible then
  begin
    // goto it, if we click it then exit
    if Self.GoToRockfall(Rockfall) then
    begin
      Self.WaitForRockfallClear(XP);
      Clicked := True;
      exit();
    end;
  end
  // try to click it
  else if Self.ClickRockfall(Rockfall, WasClicked, OurTile, Velocity) and WasClicked then
  begin
    Self.WaitForRockfallClear(XP); 
    Clicked := True;
    exit();
  end;

  // wait to stop moving before we attempt to click
  CountDown.Init(SRL.SkewedRand(6000, 5000, 7000));
  while RSClient.IsLoggedIn() and (Minimap.HasFlag() or Minimap.IsPlayerMoving()) and not CountDown.IsFinished() do
    Self.DoMainLoopStuff('Waiting to stop moving for rockfall', False);
  Wait(500, 1250, wdLeft);

  // check again
  OurTile := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurTile);
  Velocity := [0, 0];
  if not Self.FindRockfall(OurTile, Height, Rockfall, B, IsThere) and Self.GoToRockfall(Rockfall, True) then
  begin
    Self.WaitForRockfallClear(XP); 
    Clicked := True;
    exit();
  end;

  // click it
  OurTile := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurTile);
  Velocity := [0, 0];
  if Self.ClickRockfall(Rockfall, WasClicked, OurTile, Velocity) and WasClicked then
  begin
    Self.WaitForRockfallClear(XP);   
    Clicked := True;
  end;
end;

{
  Handles rockfalls
}
function TBot.HandleRockfalls(OurTile, DestTile: TPoint; Height: Int32; Upper: Boolean; out Clicked: Boolean; Velocity: TPoint = [0, 0]; Force: Boolean = False): Boolean;
var
  Rockfall: TRockfall;
  OurZone, DestZone: Int32;
begin
  Clicked := False;

  for Rockfall in Self.Rockfalls do
  begin
    if Upper <> Rockfall.IsUpper then
      continue;

    OurZone := Rockfall.Zones.PointInAnyArea(OurTile);
    DestZone := Rockfall.Zones.PointInAnyArea(DestTile);

    if OurZone = DestZone then
      continue;

    if Self.HandleRockfall(Rockfall, OurTile, Height, Clicked, Velocity, Force) then
      exit(True);
  end;
end;

{$ENDIF} // INEEDBOT_MLM_ROCKFALL
