{
  Motherload Miner rockfall
  Author: ineedbot
  Date: 8/27/2022

  Rockfall
}

{$IFNDEF INEEDBOT_MLM_ROCKFALL}
{$DEFINE INEEDBOT_MLM_ROCKFALL}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the Rockfall tile
}
function TBot.FindRockfallTile(OurPos: TPoint; Height: Int32; Rockfall: TRockfall): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Rockfall.Tile, Rockfall.Height - Height);
end;

{
  Gets the search box
}
function TBot.GetRockfallSearchBox(RockfallTile: TRectangle; Rockfall: TRockfall): TBox;
begin
  Result := RockfallTile.Expand(Round(RockfallTile.Radius() * Rockfall.Color.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindRockfallColor(Area: TBox; Rockfall: TRockfall; NotNoColor: Boolean): T2DPointArray;
begin
  if NotNoColor then
  begin
    Result := MainScreen.FindObject(Rockfall.Color.RSObject, Area);
    Result.FilterSize(MainScreen.ConvertDistance(Rockfall.Color.FilterSize), __GT__);
  end
  else
  begin
    Result := MainScreen.FindObject(Rockfall.NoColor.RSObject, Area);
    Result.FilterSize(MainScreen.ConvertDistance(Rockfall.NoColor.FilterSize), __GT__);
  end;
end;

{
  Returns true if the Rockfall is visible, B is the bounds of the Rockfall on the screen
}
function TBot.FindRockfall(OurTile: TPoint; Height: Int32; Rockfall: TRockfall; out B: TBox; out IsThere: Boolean): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
  TPA: TPointArray;
begin
  TileRect := Self.FindRockfallTile(OurTile, Height, Rockfall);

  B := Self.GetRockfallSearchBox(TileRect, Rockfall);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;
  IsThere := False;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindRockfallColor(B, Rockfall, True);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();

    // this differs from the door on edgeville smelter,
    // edgeville smelter checks for ANY existance of the open door color, if it finds any, door is opened.
    // this checks another color, if it is greater than the rockfall color, its considered mined.
    if Rockfall.HasNoColorData then
    begin
      ATPA := Self.FindRockfallColor(B, Rockfall, False);

      B := TPA.Bounds();
      IsThere := (Length(TPA) > Length(ATPA.Biggest()));
    end
    else
    begin
      B := TPA.Bounds();
      IsThere := True;
    end;
  end;
end;

{
  Handles this rockfall
}
function TBot.HandleRockfall(Rockfall: TRockfall; OurTile: TPoint; Height: Int32; out Clicked: Boolean; Velocity: TPoint = [0, 0]; Force: Boolean = False): Boolean;
begin
  writeln('handling');
end;

{
  Handles rockfalls
}
function TBot.HandleRockfalls(OurTile, DestTile: TPoint; Height: Int32; Upper: Boolean; out Clicked: Boolean; Velocity: TPoint = [0, 0]; Force: Boolean = False): Boolean;
var
  Rockfall: TRockfall;
  OurZone, DestZone: Int32;
begin
  Clicked := False;

  for Rockfall in Self.Rockfalls do
  begin
    if Upper <> Rockfall.IsUpper then
      continue;

    OurZone := Rockfall.Zones.PointInAnyArea(OurTile);
    DestZone := Rockfall.Zones.PointInAnyArea(DestTile);

    if OurZone = DestZone then
      continue;

    if Self.HandleRockfall(Rockfall, OurTile, Height, Clicked, Velocity, Force) then
      exit(True);
  end;
end;

{$ENDIF} // INEEDBOT_MLM_ROCKFALL
