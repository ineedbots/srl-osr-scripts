{
  Motherload Miner sack
  Author: ineedbot
  Date: 8/27/2022

  Sack
}

{$IFNDEF INEEDBOT_MLM_SACK}
{$DEFINE INEEDBOT_MLM_SACK}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Rockfall.simba}  
{$include_once Ladder.simba}
{$include_once Hopper.simba}
{$include_once Strut.simba}
{$include_once Bank.simba}

{
  Finds the sack tile
}
function TBot.FindSackTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.SackTile, Self.SackHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetSackSearchBox(SackTile: TRectangle): TBox;
begin
  Result := SackTile.Expand(Round(SackTile.Radius() * Self.SackColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindSackColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.SackColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.SackColor.FilterSize), __GT__);
end;

{
  Returns true if the sack is visible, B is the bounds of the sack on the screen
}
function TBot.FindSack(OurTile: TPoint; Height: Int32; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindSackTile(OurTile, Height);

  B := Self.GetSackSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindSackColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.SackColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the sack, WasClicked true if clicked it
}
function TBot.ClickSack(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  Clicked: Boolean;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // is on lower part
  if Self.IsOnUpperLevel(OurTile) then
  begin
    Script.WriteMsg('ClickCrate: On Upper! should be on lower', True);
    exit();
  end;

  Height := Self.GetHeight(OurTile);

  // handle rocks
  if Self.HandleRockfalls(OurTile, Self.SackTile, Height, False, Clicked, Velocity) then
  begin
    OurTile := Self.RSW.GetMyPos();
    Velocity := Script.WalkerVelToMSVel(Script.GetVelocity(OurTile));
    Height := Self.GetHeight(OurTile);
  end;

  // find the sink
  if not Self.FindSack(OurTile, Height, B) then
  begin
    Script.WriteMsg('ClickSack: sink not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickSack: Found sink, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickSack: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image().DrawBox(B, clMoneyGreen);
  end;

  // uptext
  Script.OldMouseMovingCallback := Mouse.OnMoving;
  Mouse.OnMoving := WhileMouseMovesLookForUpText;
  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.SackUptext;

  Mouse.Move(B);

  Script.MouseLooksForUpText := [];
  Mouse.OnMoving := Script.OldMouseMovingCallback;
  Script.OldMouseMovingCallback := nil;
  

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.SackUptext, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickSack: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickSack: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.SackOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.SackOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickSack: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickSack: Clicked', True);
end;

{
  While we walk to the sack
}
procedure WalkingToSack(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickSack(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the sack while moving, nice!');
      Walker^.Enabled := False;
      Bot.WalkerWasEarlySuccess := True;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end; 

  // should be on lower
  if Bot.IsOnUpperLevel(Position) then
    Walker^.Enabled := False;
end;

{
  Walks to the sack, return true if we clicked it early
}
function TBot.GoToSack(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  OurPos: TPoint;
  B: TBox;
  Height: Int32;
begin
  Script.WriteMsg('Going to sack....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);

  if Force or (OurPos.DistanceTo(Self.SackTile) > 50) or not Self.FindSack(OurPos, Height, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to sack...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.ClickWhileWalking := Clicking;
    Self.RSW.OnWalkingEvent := WalkingToSack;

    Self.WalkerWasEarlySuccess := True;

    try
      Walked := Self.RSW.WalkBlind(Self.SackTile.Random(-6, 6, True), 0);
    except
    end;
    
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to sack!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

      OurPos := Self.RSW.GetMyPos();
      Self.HandleRockfalls(OurPos, Self.SackTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), Walked, [0, 0], True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;
end;

{
  Empties the sack  weary
}
function TBot.DoSack(): Boolean;
var
  WasClicked: Boolean;
  OurPos: TPoint;
  CountDown: TCountDown;
  PayDirtCount, pdc: Int32;
begin
  Script.WriteMsg('Doing sack', True);

  // we need to be on lower
  if not Self.DoLadder(False) then
  begin
    Script.WriteMsg('Failed to do ladder');
    exit();
  end;

  if Inventory.IsFull() then
  begin
    Script.WriteMsg('Inv is full');
    exit();
  end;

  PayDirtCount := Self.AmountOfPayDirtInSack();

  if PayDirtCount = -1 then
  begin
    Script.WriteMsg('Couldn''t read paydirt count!!');
    exit();
  end;

  if PayDirtCount = 0 then
  begin
    Script.WriteMsg('Sack is empty!');
    exit();
  end;

  // click it
  if not ((Self.ClickSack(WasClicked) and WasClicked)
    or Self.GoToSack()
    or (Self.ClickSack(WasClicked) and WasClicked)
    or Self.GoToSack(True)
    or (Self.ClickSack(WasClicked) and WasClicked)) then
  begin
    Script.WriteMsg('Failed to click sack');
    exit();
  end;

  Self.AfterActionAntiBan(True, False);

  // ok we clicked it, wait until we are changed state
  CountDown.Init(SRL.SkewedRand(5000, 2000, 7000));
  while RSClient.IsLoggedIn() do
  begin
    pdc := Self.AmountOfPayDirtInSack();
    if pdc = -1 then
    begin
      Script.WriteMsg('DoSack: Couldn''t read paydirt count again...', True);
      break;
    end;

    if pdc <> PayDirtCount then
    begin
      Script.WriteMsg('DoSack: paydirt count changed!', True);
      Result := True;
      break;
    end;

    if Self.CouldntReach() then
    begin
      Script.WriteMsg('DoSack: Couldn''t reach...', True);
      break;
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('DoSack: Still moving...', True);
      CountDown.Restart();
    end;

    // did we timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('DoSack: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to sack....', False);
  end;

  if not Result then
  begin
    OurPos := Self.RSW.GetMyPos();
    Self.HandleRockfalls(OurPos, Self.SackTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), WasClicked, [0, 0], True);
  end;

  Wait(0, 2000, wdLeft);
end;

{
  Should we start taking from the sack?
}
function TBot.ShouldDoSack(): Boolean;
var
  pdic, pdsc, pdl: Int32;
begin
  pdic := Inventory.CountItem(Self.PayDirtItem);
  pdsc := Self.AmountOfPayDirtInSack();
  pdl := 80;

  if Self.HasLargeSack then
    pdl := 161;

  if pdsc = -1 then
  begin
    Script.WriteMsg('AmountOfPayDirtInSack couldn''t read! are you in mlm?');
    exit();
  end;

  if (pdic + pdsc) >= pdl then
    exit(True);
end;

{
  Empties the sack completely
}
function TBot.DoTakeFromSack(): Boolean;
var
  PaydirtSlots: TIntegerArray;
  S, i: Int32;
begin
  Script.WriteMsg('Empting sack!', True);

  // we need to be on lower
  if not Self.DoLadder(False) then
  begin
    Script.WriteMsg('Failed to do ladder');
    exit();
  end;

  // insert these into hopper
  if Inventory.FindItem(Self.PayDirtItem) then
  begin
    // make sure water is running
    if not Self.WaterRunning(True) then
    begin
      // start it
      Script.WriteMsg('Enabling the water', True);
      Self.DoStrut();
    end
    else
      Script.WriteMsg('Water is running!', True);

    // insert
    if not Self.DoInsertIntoHopper() then
    begin
      Script.WriteMsg('Failed to do DoInsertIntoHopper');
      exit();
    end;

    // drop remaining paydirt
    if Inventory.FindItem(Self.PayDirtItem, PaydirtSlots) then
    begin
      Script.WriteMsg('Dropping pay-dirt!', True);

      S := Mouse.Speed;
      Mouse.Speed += Script.FastMouseAdd + Random(-2, 2);
      // drop
      if Script.ShiftClicking then
        Inventory.ShiftDrop(PaydirtSlots)
      else
      begin
        for i in PaydirtSlots do
        begin
          Inventory.HoverSlot(i);

          if MainScreen.IsUpText('Drop') then
            Mouse.Click(MOUSE_LEFT)
          else
            ChooseOption.Select('Drop');

          Wait(0, 1000, wdLeft);
        end;
      end;
      Mouse.Speed := S;
    end;
  end;

  // check if full inv
  if Inventory.IsFull() then
  begin
    Script.WriteMsg('inv is full');
    exit();
  end;

  Self.NeedToDoGemBag := True;

  // ok now take from sack, deposit into bank until sack is empty
  while RSClient.IsLoggedIn() do
  begin
    if Self.AmountOfPayDirtInSack() = -1 then
    begin
      Script.WriteMsg('AmountOfPayDirtInSack bad read', True);
      break;
    end;

    if Self.AmountOfPayDirtInSack() = 0 then
    begin
      Script.WriteMsg('Emptied!', True);
      Result := True;
      break;
    end;

    if Inventory.FindItems(Self.OreItems) then
    begin
      if not Self.DoBank() then
      begin
        Script.WriteMsg('Failed to do bank (loop)!', True);
        break;
      end;
    end
    else
    begin
      if not Self.DoSack() then
      begin
        Script.WriteMsg('Failed to do sack (loop)!', True);
        break;
      end;
    end;
  end;
end;

{$ENDIF} // INEEDBOT_MLM_SACK
