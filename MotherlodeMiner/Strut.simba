{
  Motherload Miner strut
  Author: ineedbot
  Date: 8/27/2022

  Strut
}

{$IFNDEF INEEDBOT_MLM_STRUT}
{$DEFINE INEEDBOT_MLM_STRUT}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Rockfall.simba}
{$include_once Ladder.simba}
{$include_once Crate.simba}

{
  Finds the Water tile
}
function TBot.FindWaterTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.WaterTile, Self.WaterHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetWaterSearchBox(WaterTile: TRectangle): TBox;
begin
  Result := WaterTile.Expand(Round(WaterTile.Radius() * Self.WaterColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindWaterColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.WaterColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.WaterColor.FilterSize), __GT__);
end;

{
  Returns true if the Water is visible, B is the bounds of the Water on the screen
}
function TBot.FindWater(OurTile: TPoint; Height: Int32; out B: TBox; out Running: Boolean): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindWaterTile(OurTile, Height);

  B := Self.GetWaterSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindWaterColor(B);

  if Length(ATPA) > 0 then
  begin
    B := ATPA.Biggest().Bounds();
    Running := True;
  end
  else
    Running := False;
end;

{
  returns if the water is running
}
function TBot.WaterRunning(WalkToIt: Boolean = False): Boolean;
var
  B: TBox;
  Running, Walked: Boolean;
  Pos: TPoint;
begin
  Pos := Self.RSW.GetMyPos();

  if not Self.FindWater(Pos, Self.GetHeight(Pos), B, Running) then
  begin
    if not WalkToIt then
      exit();

    // walk to it
    try
      Walked := Self.RSW.WalkBlind(Self.WaterTile, 12);
    except
    end;

    if not Walked then
      Script.WriteMsg('Failed to walk to water tile');

    Minimap.WaitFlag();
    Minimap.WaitPlayerMoving();

    if not Self.FindWater(Pos, Self.GetHeight(Pos), B, Running) then
      exit();
  end;

  Result := Running;
end;

{
  Finds the Strut tile
}
function TBot.FindStrutTile(OurPos: TPoint; Height: Int32): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.StrutTile, Self.StrutHeight - Height);
end;

{
  Gets the search box
}
function TBot.GetStrutSearchBox(StrutTile: TRectangle): TBox;
begin
  Result := StrutTile.Expand(Round(StrutTile.Radius() * Self.StrutColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindStrutColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.StrutColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.StrutColor.FilterSize), __GT__);
end;

{
  Returns true if the Strut is visible, B is the bounds of the Strut on the screen
}
function TBot.FindStrut(OurTile: TPoint; Height: Int32; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindStrutTile(OurTile, Height);

  B := Self.GetStrutSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindStrutColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.StrutColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.NearestTo(TileRect.Mean()).Bounds();
end;

{
  Returns true if found the Strut, WasClicked true if clicked it
}
function TBot.ClickStrut(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  Clicked: Boolean;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // is on lower part
  if Self.IsOnUpperLevel(OurTile) then
  begin
    Script.WriteMsg('ClickCrate: On Upper! should be on lower', True);
    exit();
  end;

  Height := Self.GetHeight(OurTile);

  // handle rocks
  if (Velocity = Point(0, 0)) and Self.HandleRockfalls(OurTile, Self.StrutTile, Height, False, Clicked, Velocity) then
  begin
    OurTile := Self.RSW.GetMyPos();
    Velocity := Script.WalkerVelToMSVel(Script.GetVelocity(OurTile));
    Height := Self.GetHeight(OurTile);
  end;

  // find the sink
  if not Self.FindStrut(OurTile, Height, B) then
  begin
    Script.WriteMsg('ClickStrut: sink not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickStrut: Found sink, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickStrut: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image().DrawBox(B, clMoneyGreen);
  end;

  // uptext
  Script.OldMouseMovingCallback := Mouse.OnMoving;
  Mouse.OnMoving := WhileMouseMovesLookForUpText;
  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.StrutUptext;
    
  Mouse.Move(B);

  Script.MouseLooksForUpText := [];
  Mouse.OnMoving := Script.OldMouseMovingCallback;
  Script.OldMouseMovingCallback := nil;


  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.StrutUptext, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickStrut: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickStrut: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.StrutOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.StrutOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickStrut: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickStrut: Clicked', True);
end;

{
  While we walk to the Strut
}
procedure WalkingToStrut(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking and (Destination = Walker^.Path[High(Walker^.Path)]) then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    // if we clicked the fish spot, then stop the walker
    if Bot.ClickStrut(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the Strut while moving, nice!');
      Walker^.Enabled := False;
      Bot.WalkerWasEarlySuccess := True;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end;

  // should be on lower
  if Bot.IsOnUpperLevel(Position) then
    Walker^.Enabled := False;
end;

{
  Walks to the Strut, return true if we clicked it early
}
function TBot.GoToStrut(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  OurPos: TPoint;
  B: TBox;
  Height: Int32;
begin
  Script.WriteMsg('Going to Strut....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);

  if Force or (OurPos.DistanceTo(Self.StrutTile) > 50) or not Self.FindStrut(OurPos, Height, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to Strut...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.OldWalkCallback := Self.RSW.OnWalkEvent;
    Self.ClickWhileWalking := Clicking;
    Self.RSW.OnWalkEvent := WalkHandleRockfall;
    Self.RSW.OnWalkingEvent := WalkingToStrut;

    Self.WalkerWasEarlySuccess := False;

    try
      Walked := Self.RSW.WalkBlind(Self.StrutTile.Random(-6, 6, True), 0);
    except
    end;
    
    Self.RSW.OnWalkEvent := Self.OldWalkCallback;
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;
    Self.OldWalkCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to Strut!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

      OurPos := Self.RSW.GetMyPos();
      Self.HandleRockfalls(OurPos, Self.StrutTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), Walked, [0, 0], True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;
end;

{
  Repairs strut
}
function TBot.DoStrut(): Boolean;
var
  WasClicked: Boolean;
  OurPos: TPoint;
  CountDown: TCountDown;
  XPCount, xpc: Int32;
begin
  Script.WriteMsg('Doing strut', True);

  // we need to be on lower
  if not Self.DoLadder(False) then
  begin
    Script.WriteMsg('Failed to do ladder');
    exit();
  end;

  // check for hammer
  if not Inventory.FindItem(Self.HammerItem) and not Self.DoCrate() then
  begin
    Script.WriteMsg('Failed to do crate!');
    exit();
  end;

  if not Inventory.FindItem(Self.HammerItem) then
  begin
    Script.WriteMsg('No hammer!');
    exit();
  end;

  // xp bar
  XPCount := XPBar.ReadXPBar();
  if XPCount = -1 then
  begin
    Script.WriteMsg('Couldn''t read xp bar!');
    exit();
  end;

  // click it
  if not ((Self.ClickStrut(WasClicked) and WasClicked)
    or Self.GoToStrut()
    or (Self.ClickStrut(WasClicked) and WasClicked)
    or Self.GoToStrut(True)
    or (Self.ClickStrut(WasClicked) and WasClicked)) then
  begin
    Script.WriteMsg('Failed to click strut');
    exit();
  end;

  Self.AfterActionAntiBan(True);

  // ok we clicked it, wait until we are changed state
  CountDown.Init(SRL.SkewedRand(5000, 2000, 7000));
  while RSClient.IsLoggedIn() do
  begin
    xpc := XPBar.ReadXPBar();
    if xpc = -1 then
    begin
      Script.WriteMsg('DoStrut: Couldn''t read xp bar again...', True);
      break;
    end;

    if xpc <> XPCount then
    begin
      Script.WriteMsg('DoStrut: Xp changed!', True);
      Result := True;
      break;
    end;

    if Self.CouldntReach() then
    begin
      Script.WriteMsg('DoStrut: Couldn''t reach...', True);
      break;
    end;

    // only countdown if we are not moving
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('DoStrut: Still moving...', True);
      CountDown.Restart();
    end;

    // did we timeout?
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('DoStrut: Timed out', True);
      break;
    end;

    Self.DoMainLoopStuff('Going to strut....', False);
  end;

  if not Result then
  begin
    OurPos := Self.RSW.GetMyPos();
    Self.HandleRockfalls(OurPos, Self.StrutTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), WasClicked, [0, 0], True);
  end;

  Wait(0, 2000, wdLeft);

  // drop hammer
  if Inventory.FindItem(Self.HammerItem, xpc) then
  begin
    Inventory.HoverSlot(xpc);
    Wait(0, 750, wdLeft);

    if not Script.ShiftClicking or (Random() < 0.1) then
      ChooseOption.Select('Drop')
    else
      Mouse.ShiftClick();
  end;
end;

{$ENDIF} // INEEDBOT_MLM_STRUT
