{
  Motherload Miner veins
  Author: ineedbot
  Date: 8/27/2022

  Vein
}

{$IFNDEF INEEDBOT_MLM_VEIN}
{$DEFINE INEEDBOT_MLM_VEIN}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Rockfall.simba}
{$include_once Ladder.simba}

{
  Finds the Vein tile
}
function TBot.FindVeinTile(OurPos: TPoint; Height: Int32; Vein: TVein): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Vein.Tile, Vein.Height - Height);
end;

{
  Gets the search box
}
function TBot.GetVeinSearchBox(VeinTile: TRectangle): TBox;
begin
  Result := VeinTile.Expand(Round(VeinTile.Radius() * Self.VeinColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindVeinColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.VeinColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.VeinColor.FilterSize), __GT__);
end;

{
  Returns true if the Vein is visible, B is the bounds of the Vein on the screen
}
function TBot.FindVein(OurTile: TPoint; Height: Int32; Vein: TVein; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
  TPA: TPointArray;
begin
  TileRect := Self.FindVeinTile(OurTile, Height, Vein);

  B := Self.GetVeinSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindVeinColor(B);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();
    B := TPA.Bounds();
    Result := True;
  end;
end;

{
  Gets the vein pointer to the static data
}
function TBot.GetVeinPtr(Vein: TVein): PVein;
var
  i: Int32;
begin
  for i := 0 to High(Self.CurrentZone^.Veins) do
  begin
    if Vein.Tile = Self.CurrentZone^.Veins[i].Tile then
      exit(@Self.CurrentZone^.Veins[i]);
  end;
end;

{
  Orders the veins!
}
function TBot.OrderVeins(): TVeinArray;
var
  Vein: TVein;
begin
  for Vein in Self.CurrentZone^.Veins do
  begin
    Result += Vein;
  end;
end;

{
  Returns true if found the vein, WasClicked true if clicked it
}
function TBot.ClickVein(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  Clicked, OnUpper: Boolean;
  Vein: TVein;
  Veins: TVeinArray;
begin
  if Self.CurrentZone = nil then
  begin
    Script.WriteMsg('ClickVein: nil zone!', True);
    exit();
  end;

  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // is on lower part
  OnUpper := Self.IsOnUpperLevel(OurTile);
  if Self.CurrentZone^.IsUpper <> OnUpper then
  begin
    Script.WriteMsg('ClickVein: Not on same level as zone', True);
    exit();
  end;

  Height := Self.GetHeight(OurTile);

  // handle rocks
  if (Velocity = Point(0, 0)) and Self.HandleRockfalls(OurTile, Self.CurrentZone^.WalkTile, Height, OnUpper, Clicked, Velocity) then
  begin
    OurTile := Self.RSW.GetMyPos();
    Velocity := Script.WalkerVelToMSVel(Script.GetVelocity(OurTile));
    Height := Self.GetHeight(OurTile);
  end;

  // reorder veins
  Veins := Self.OrderVeins();

  for Vein in Veins do
  begin
    // find the vein
    if not Self.FindVein(OurTile, Height, Vein, B) then
    begin
      Script.WriteMsg('ClickVein: not visible', True);
      continue;
    end;

    Script.WriteMsg('ClickVein: Found, checking uptext', True);

    Result := True;
    Self.CurrentVein := Self.GetVeinPtr(Vein);

    // now apply velocity and check uptext
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickVein: Tile velocity no visible', True);
        continue;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image().DrawBox(B, clMoneyGreen);
    end;

    // uptext
    Script.OldMouseMovingCallback := Mouse.OnMoving;
    Mouse.OnMoving := WhileMouseMovesLookForUpText;
    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Self.VeinUptext;
    Script.MouseLooksForUpTextCloseDist := 25;
    Script.MouseLooksForUpTextClosePt := B.Middle();

    Mouse.Move(B);

    Script.MouseLooksForUpText := [];
    Mouse.OnMoving := Script.OldMouseMovingCallback;
    Script.OldMouseMovingCallback := nil;
    Script.MouseLooksForUpTextCloseDist := 0;


    Script.RareSmallWait();

    if not MainScreen.IsUpText(Self.VeinUptext, Random(100, 250)) then
    begin
      Script.WriteMsg('ClickVein: Bad uptext', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Script.WriteMsg('ClickVein: Good uptext, clicking', True);

    // uptext is the option we want
    if MainScreen.IsUpText(Self.VeinOptions, Random(100, 250)) and (Random() < 0.9) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := MainScreen.DidRedClick();
    end
    else if MainScreen.IsUpText('options') then
      WasClicked := ChooseOption.Select(Self.VeinOptions);

    if not WasClicked then
    begin
      Script.WriteMsg('ClickVein: Didnt click', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Script.WriteMsg('ClickVein: Clicked', True);
    break;
  end;
end;

{
  While we walk to the vein
}
procedure WalkingToVein(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  if Bot.CurrentZone = nil then
    exit();

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking then
  begin
    if Destination = Walker^.Path[High(Walker^.Path)] then
    begin
      // make the mouse fast, because we are moving, its harder to keep up with objs
      S := Mouse.Speed;
      Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

      MSVel := Script.WalkerVelToMSVel(Velocity);

      // if we clicked the fish spot, then stop the walker
      if Bot.ClickVein(WasClicked, Position, MSVel) and WasClicked then
      begin
        Script.WriteMsg('Clicked the vein while moving, nice!');
        Walker^.Enabled := False;
        Bot.WalkerWasEarlySuccess := True;
      end;

      // reset the mosue speed back
      Mouse.Speed := S;
    end
    else if Random() < 0.2 then
      Minimap.SetCompassAngle(Bot.CurrentZone^.Angle);
  end;

  // should be on lower
  if Bot.CurrentZone^.IsUpper <> Bot.IsOnUpperLevel(Position) then
    Walker^.Enabled := False;
end;

{
  Walks to the zone, return true if we clicked it early
}
function TBot.GoToZone(Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  OurPos: TPoint;
  B: TBox;
  Height: Int32;
begin
  if Self.CurrentZone = nil then
    exit();

  Script.WriteMsg('Going to zone....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);

  if Self.IsOnUpperLevel(OurPos) <> Self.CurrentZone^.IsUpper then
  begin
    Script.WriteMsg('Not on same level to go to zone');
    exit();
  end;

  if Force or (OurPos.DistanceTo(Self.CurrentZone^.WalkTile) > 50) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Self.CurrentZone^.WalkTile).Mean()) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to zone...');

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.OldWalkCallback := Self.RSW.OnWalkEvent;
    Self.ClickWhileWalking := Clicking;
    Self.RSW.OnWalkEvent := WalkHandleRockfall;
    Self.RSW.OnWalkingEvent := WalkingToVein;

    Self.WalkerWasEarlySuccess := False;

    try
      Walked := Self.RSW.WalkBlind(Self.CurrentZone^.WalkTile.Random(-6, 6, True), 0);
    except
    end;

    Self.RSW.OnWalkEvent := Self.OldWalkCallback;
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;
    Self.OldWalkCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to zone!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

      OurPos := Self.RSW.GetMyPos();
      Self.HandleRockfalls(OurPos, Self.CurrentZone^.WalkTile, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), Walked, [0, 0], True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;
end;

{
  Chooses a zone
}
function TBot.ChooseZone(): PZone;
begin
  Result := @Self.Zones[0];
end;

{
  While it mines!
}
function TBot.WhileMining(): Boolean;
begin
  Wait(0, 1250, wdLeft);
  Minimap.SetCompassAngle(Self.CurrentZone^.Angle);
end;

{
  Gathers!
}
function TBot.DoGathering(): Boolean;
var
  WasClicked: Boolean;
begin
  Script.WriteMsg('Gathering!', True);

  // we only support upper level
  if not Self.DoLadder(True) then
  begin
    Script.WriteMsg('Failed to do ladder');
    exit();
  end;

  // go to the zone
  Self.CurrentZone := Self.ChooseZone();
  if Self.GoToZone() then
  begin
    // if we click a vein early.
    Self.WhileMining();
    Result := True;
    exit();
  end;

  Wait(0, 1250, wdLeft);
  Minimap.SetCompassAngle(Self.CurrentZone^.Angle);

  // click the vein
  {if (Self.ClickVein(WasClicked) and WasClicked) or
    Self.GoToVein() or
    (Self.ClickVein(WasClicked) and WasClicked) or
    Self.GoToVein(True) or
    (Self.ClickVein(WasClicked) and WasClicked) then
  begin
    Self.WhileMining();
    Result := True;
  end;  }
end;

{$ENDIF} // INEEDBOT_MLM_VEIN
