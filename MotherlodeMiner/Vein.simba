{
  Motherload Miner veins
  Author: ineedbot
  Date: 8/27/2022

  Vein
}

{$IFNDEF INEEDBOT_MLM_VEIN}
{$DEFINE INEEDBOT_MLM_VEIN}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Finds the Vein tile
}
function TBot.FindVeinTile(OurPos: TPoint; Height: Int32; Vein: TVein): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Vein.Tile, Vein.Height - Height);
end;

{
  Gets the search box
}
function TBot.GetVeinSearchBox(VeinTile: TRectangle): TBox;
begin
  Result := VeinTile.Expand(Round(VeinTile.Radius() * Self.VeinColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindVeinColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.VeinColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.VeinColor.FilterSize), __GT__);
end;

{
  Returns true if the Vein is visible, B is the bounds of the Vein on the screen
}
function TBot.FindVein(OurTile: TPoint; Height: Int32; Vein: TVein; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
  TPA: TPointArray;
begin
  TileRect := Self.FindVeinTile(OurTile, Height, Vein);

  B := Self.GetVeinSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindVeinColor(B);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();
    B := TPA.Bounds();
    Result := True;
  end;
end;

{
  Gathers!
}
procedure TBot.DoGathering();
begin

end;

{$ENDIF} // INEEDBOT_MLM_VEIN
