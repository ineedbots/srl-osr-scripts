{
  Motherload Miner veins
  Author: ineedbot
  Date: 8/27/2022

  Vein
}

{$IFNDEF INEEDBOT_MLM_VEIN}
{$DEFINE INEEDBOT_MLM_VEIN}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$F-}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{$include_once Rockfall.simba}
{$include_once Ladder.simba}

{
  Finds the Vein tile
}
function TBot.FindVeinTile(OurPos: TPoint; Height: Int32; Vein: TVein): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Vein.Tile, Vein.Height - Height);
end;

{
  Gets the search box
}
function TBot.GetVeinSearchBox(VeinTile: TRectangle): TBox;
begin
  Result := VeinTile.Expand(Round(VeinTile.Radius() * Self.VeinColor.RadiusExpand)).Bounds();
end;

{
  Returns all object colors within the box
}
function TBot.FindVeinColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.VeinColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.VeinColor.FilterSize), __GT__);
end;

{
  Returns true if the Vein is visible, B is the bounds of the Vein on the screen
}
function TBot.FindVein(OurTile: TPoint; Height: Int32; Vein: TVein; out B: TBox; out Found: Boolean): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
  TPA: TPointArray;
begin      
  Found := False;
  TileRect := Self.FindVeinTile(OurTile, Height, Vein);

  B := Self.GetVeinSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindVeinColor(B);

  if Length(ATPA) > 0 then
  begin
    TPA := ATPA.Biggest();
    B := TPA.Bounds();
    Found := True;
  end;
end;

{
  Returns true if found the vein, WasClicked true if clicked it
}
function TBot.ClickVein(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  Height: Int32;
  Clicked, OnUpper, Found: Boolean;
  Vein: TVein;
  Veins: TVeinArray;
begin
  if Self.CurrentZone = nil then
  begin
    Script.WriteMsg('ClickVein: nil zone!', True);
    exit();
  end;

  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  // is on lower part
  OnUpper := Self.IsOnUpperLevel(OurTile);
  if Self.CurrentZone^.IsUpper <> OnUpper then
  begin
    Script.WriteMsg('ClickVein: Not on same level as zone', True);
    exit();
  end;

  Height := Self.GetHeight(OurTile);

  // handle rocks
  if (Velocity = Point(0, 0)) and Self.HandleRockfalls(OurTile, Self.CurrentZone^.WalkTile, Height, OnUpper, Clicked, Velocity) then
  begin
    OurTile := Self.RSW.GetMyPos();
    Velocity := Script.WalkerVelToMSVel(Script.GetVelocity(OurTile));
    Height := Self.GetHeight(OurTile);
  end;

  // reorder veins
  Veins := Self.OrderVeins();

  for Vein in Veins do
  begin
    // find the vein
    if not Self.FindVein(OurTile, Height, Vein, B, Found) or not Found then
    begin
      Script.WriteMsg('ClickVein: not visible', True);
      continue;
    end;

    Script.WriteMsg('ClickVein: Found, checking uptext', True);

    Result := True;
    Self.CurrentVein := Self.GetVeinPtr(Vein);

    // now apply velocity and check uptext
    if Velocity <> Point(0, 0) then
    begin
      B := B.Offset(Script.GetOffsetForVel(B, Velocity));

      if not MainScreen.IsVisible(B.Middle()) then
      begin
        Script.WriteMsg('ClickVein: Tile velocity no visible', True);
        continue;
      end;

      B.LimitTo(MainScreen.Bounds());

      if Script.Debug and Script.Drawing then
        RSClient.Image().DrawBox(B, clMoneyGreen);
    end;

    // uptext
    Script.OldMouseMovingCallback := Mouse.OnMoving;
    Mouse.OnMoving := WhileMouseMovesLookForUpText;
    if Velocity <> Point(0, 0) then
      Script.MouseLooksForUpText := Self.VeinUptext;
    Script.MouseLooksForUpTextCloseDist := 5;
    Script.MouseLooksForUpTextClosePt := B.Middle();

    Mouse.Move(B);

    Script.MouseLooksForUpText := [];
    Mouse.OnMoving := Script.OldMouseMovingCallback;
    Script.OldMouseMovingCallback := nil;
    Script.MouseLooksForUpTextCloseDist := 0;


    Script.RareSmallWait();

    if not MainScreen.IsUpText(Self.VeinUptext, Random(100, 250)) then
    begin
      Script.WriteMsg('ClickVein: Bad uptext', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Script.WriteMsg('ClickVein: Good uptext, clicking', True);

    // uptext is the option we want
    if MainScreen.IsUpText(Self.VeinOptions, Random(100, 250)) and (Random() < 0.9) then
    begin
      Mouse.Click(MOUSE_LEFT);
      WasClicked := MainScreen.DidRedClick();
    end
    else if MainScreen.IsUpText('options') then
      WasClicked := ChooseOption.Select(Self.VeinOptions);

    if not WasClicked then
    begin
      Script.WriteMsg('ClickVein: Didnt click', True);

      if Velocity = Point(0, 0) then
        continue
      else
        break;
    end;

    Script.WriteMsg('ClickVein: Clicked', True);
    break;
  end;
end;

{
  While we walk to the vein
}
procedure WalkingToVein(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  if Bot.OldWalkingCallback <> nil then
  begin
    Bot.OldWalkingCallback(Walker, Position, Destination);

    if not Walker^.Enabled then
      exit();

    Position := Walker^.GetMyPos();
  end;

  if Bot.CurrentZone = nil then
    exit();

  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Bot.ClickWhileWalking then
  begin
    if Random() < 0.4 then
      Minimap.SetCompassAngle(Bot.CurrentZone^.Angle);

    if Destination = Walker^.Path[High(Walker^.Path)] then
    begin
      // make the mouse fast, because we are moving, its harder to keep up with objs
      S := Mouse.Speed;
      Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

      MSVel := Script.WalkerVelToMSVel(Velocity);

      // if we clicked the fish spot, then stop the walker
      if Bot.ClickVein(WasClicked, Position, MSVel) and WasClicked then
      begin
        Script.WriteMsg('Clicked the vein while moving, nice!');
        Walker^.Enabled := False;
        Bot.WalkerWasEarlySuccess := True;
      end;

      // reset the mosue speed back
      Mouse.Speed := S;
    end;
  end;

  // should be on lower
  if Bot.CurrentZone^.IsUpper <> Bot.IsOnUpperLevel(Position) then
    Walker^.Enabled := False;
end;

{
  Walks to the zone, return true if we clicked it early
}
function TBot.GoToZone(GoToVein: Boolean = False; Force: Boolean = False; Clicking: Boolean = True): Boolean;
var
  Walked: Boolean;
  OurPos, Where: TPoint;
  Height: Int32;
begin
  if Self.CurrentZone = nil then
  begin
    Script.WriteMsg('GoToZone: bad ptr');
    exit();
  end;

  // go to correct level
  if not Self.DoLadder(Self.CurrentZone^.IsUpper) then
  begin
    Script.WriteMsg('Failed to do ladder');
    exit();
  end;

  Script.WriteMsg('Going to zone/vein....', True);
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);

  if Self.IsOnUpperLevel(OurPos) <> Self.CurrentZone^.IsUpper then
  begin
    Script.WriteMsg('Not on same level to go to zone/vein');
    exit();
  end;

  Where := Self.CurrentZone^.WalkTile;
  if GoToVein and False then
    Where := Self.OrderVeins()[0].Tile;

  if Force or (OurPos.DistanceTo(Where) > 50) or
    not MainScreen.IsVisible(Self.RSW.GetTileMSEx(OurPos, Where).Mean()) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to zone/vein...' + ToStr(GoToVein));

    Self.OldWalkingCallback := Self.RSW.OnWalkingEvent;
    Self.OldWalkCallback := Self.RSW.OnWalkEvent;
    Self.ClickWhileWalking := Clicking;
    Self.RSW.OnWalkEvent := WalkHandleRockfall;
    Self.RSW.OnWalkingEvent := WalkingToVein;

    Self.WalkerWasEarlySuccess := False;

    try
      Walked := Self.RSW.WalkBlind(Where.Random(-6, 6, True), 0);
    except
    end;

    Self.RSW.OnWalkEvent := Self.OldWalkCallback;
    Self.RSW.OnWalkingEvent := Self.OldWalkingCallback;
    Self.OldWalkingCallback := nil;
    Self.OldWalkCallback := nil;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to zone/vein!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

      OurPos := Self.RSW.GetMyPos();
      Self.HandleRockfalls(OurPos, Where, Self.GetHeight(OurPos), Self.IsOnUpperLevel(OurPos), Walked, [0, 0], True);
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked the bank
    if not Self.RSW.Enabled then
      Result := Self.WalkerWasEarlySuccess;
  end;
end;

{
  Gets the vein pointer to the static data
}
function TBot.GetVeinPtr(Vein: TVein): PVein;
var
  i: Int32;
begin
  for i := 0 to High(Self.CurrentZone^.Veins) do
  begin
    if Vein.Tile = Self.CurrentZone^.Veins[i].Tile then
      exit(@Self.CurrentZone^.Veins[i]);
  end;
end;

{
  Is mining?
}
function TBot.IsMining(Vein: TVein; OurPos: TPoint): Boolean;
var
  ATPA: T2DPointArray;
  ARect: array of TRectangle;
  Rect: TRectangle;
  B: TBox;
begin
  // gather info
  OurPos := OurPos;
  ARect := Script.GetAdjTiles(2);

  // choose the rect that is in the correct direction
  if SRL.DeltaAngle(Vein.Angle, 90) < 45 then
    Rect := ARect[0] // west
  else if SRL.DeltaAngle(Vein.Angle, 0) < 45 then
    Rect := ARect[1] // north
  else if SRL.DeltaAngle(Vein.Angle, 270) < 45 then
    Rect := ARect[2] // east
  else
    Rect := ARect[3]; // south

  // check the rect for the colors
  B := Rect.Bounds();
  ATPA := Self.FindVeinColor(B);

  if Script.Debug and Script.Drawing then
  begin
    RSClient.Image().DrawRect(Rect, clOrange);
    RSClient.Image().DrawBox(B, clGreen);
    RSClient.Image().DrawATPA(ATPA);

                 
    RSClient.Image().DrawBox(MainScreen.GetPlayerBox(), clGreen);
  end;

  // lol jk, lets just use pixel shift
  Result := (SRL.PercentShift(MainScreen.GetPlayerBox(), Self.MiningPixelShiftWait) >= Self.MiningPixelShiftPerc);
end;

{
  Chooses a zone
}
function TBot.ChooseZone(OurPos: TPoint = [-1, -1]): PZone;
var
  ExcludedZone: PZone;
  PossibleZones: TIntegerArray;
  Vein: TVein;
  Height, i, PlayerCount, BestPlayerCount: Int32;
  B: TBox;
  IsUpper, Found, HasVein: Boolean;
  PlayerDots: TPointArray;
  PlayerDot: TPoint;
  ThisDist, BestDist, CompAng: Double;
begin
  if OurPos.X = -1 then
    OurPos := Self.RSW.GetMyPos();

  Script.WriteMsg('Choosing a zone');

  if (Self.LastZone <> nil) and Self.SameZone then
  begin
    Result := Self.LastZone;
    Self.LastZone := nil;
    exit();
  end;

  Height := Self.GetHeight(OurPos);
  IsUpper := Self.IsOnUpperLevel(OurPos);
  CompAng := Minimap.GetCompassAngle(True);

  // first check for a zone we are already in
  for i := 0 to High(Self.Zones) do
  begin
    if Self.Zones[i].IsUpper <> IsUpper then
      continue;

    // in this zone
    if SRL.PointInPoly(OurPos, Self.Zones[i].Area) then
    begin
      Script.WriteMsg('Already in a zone, checking to see if there are veins active');
      // make sure theres an active vein
      for Vein in Self.Zones[i].Veins do
      begin
        if Self.FindVein(OurPos, Height, Vein, B, Found) and Found then
        begin
          Script.WriteMsg('Found vein, staying in this zone');
          exit(@Self.Zones[i]);
        end;
      end;

      Script.WriteMsg('Choosing different zone');
      // no active veins in this zone, choose a new one, exclude this one.
      ExcludedZone := @Self.Zones[i];
      break;
    end;
  end;

  // choose a zone!
  PlayerDots := Minimap.GetDots(ERSMinimapDot.PLAYER);
  for i := 0 to High(PlayerDots) do
  begin
    PlayerDots[i] := Self.RSW.MMToWorldEx(OurPos, PlayerDots[i]);
  end;

  BestPlayerCount := 99;
  for i := 0 to High(Self.Zones) do
  begin
    if ExcludedZone = @Self.Zones[i] then
      continue;

    // check to see if this zone has active veins
    HasVein := False;
    for Vein in Self.Zones[i].Veins do
    begin
      if not Self.FindVein(OurPos, Height, Vein, B, Found) then
      begin
        // cant see the tile, assume that it has it
        HasVein := True;
        break;
      end;

      if Found then
      begin
        HasVein := True;
        break;
      end;
    end;

    if not HasVein and (SRL.DeltaAngle(CompAng, Self.Zones[i].Angle) < 30) then
    begin
      Script.WriteMsg('No veins in this zone.', True);
      continue;
    end;

    // count players in this zone
    PlayerCount := 0;
    for PlayerDot in PlayerDots do
    begin
      if SRL.PointInPoly(PlayerDot, Self.Zones[i].Area) then
        Inc(PlayerCount);
    end;

    // check if this is the next best?
    if PlayerCount <= BestPlayerCount then
    begin
      if PlayerCount < BestPlayerCount then
        PossibleZones.Clear();

      BestPlayerCount := PlayerCount;
      PossibleZones.Append(i);
    end;
  end;

  Script.WriteMsg('Choosing from ' + ToStr(Length(PossibleZones)) + ' zones with ' + ToStr(BestPlayerCount) + ' players in');

  if (Length(PossibleZones) <= 0) or (Random() < 0.05) then
    exit(@Self.Zones[Random(Length(Self.Zones))]);

  if Random() < 0.15 then
    exit(@Self.Zones[PossibleZones[Random(Length(PossibleZones))]]);

  // choose the best zone closest to us
  for i in PossibleZones do
  begin
    ThisDist := OurPos.DistanceTo(Self.Zones[i].WalkTile);

    if (Result = nil) or (ThisDist < BestDist) then
    begin
      Result := @Self.Zones[i];
      BestDist := ThisDist;
    end;
  end;
end;

{
  Orders the veins!
}
function TBot.OrderVeins(OurPos: TPoint = [-1, -1]): TVeinArray;
var
  Vein: TVein;
  OpenTPA, NearTPA, PlayerDots: TPointArray;
  TP: TPoint;
  i: Int32;
  IsNearPlayer: Boolean;
begin
  if OurPos.X = -1 then
    OurPos := Self.RSW.GetMyPos();

  // get player dots
  PlayerDots := Minimap.GetDots(ERSMinimapDot.PLAYER);
  for i := 0 to High(PlayerDots) do
  begin
    PlayerDots[i] := Self.RSW.MMToWorldEx(OurPos, PlayerDots[i]);
  end;

  // organize veins' points into ones with no players, ones with
  for Vein in Self.CurrentZone^.Veins do
  begin
    // check if it is near
    IsNearPlayer := False;
    for TP in PlayerDots do
    begin
      if TP.DistanceTo(Vein.Tile) < Self.SkipVeinDist then
      begin
        IsNearPlayer := True;
        break;
      end;
    end;

    // insert vein tile into organized bucket
    if not IsNearPlayer then
      OpenTPA += Vein.Tile
    else
      NearTPA += Vein.Tile;
  end;

  // sort them from our pos
  OpenTPA.Sort(OurPos);
  NearTPA.Sort(OurPos);

  // constuct answer, open veins first
  for TP in OpenTPA do
  begin
    for Vein in Self.CurrentZone^.Veins do
    begin
      if TP = Vein.Tile then
      begin
        Result += Vein;
        break;
      end;
    end;
  end;

  // busy veins last
  for TP in NearTPA do
  begin
    for Vein in Self.CurrentZone^.Veins do
    begin
      if TP = Vein.Tile then
      begin
        Result += Vein;
        break;
      end;
    end;
  end;
end;

{
  Runelite
}
function TBot.CheckRuneliteMiningPlugin(out Mining: Boolean): Boolean;
begin
  Result := False;
  Mining := False;
end;

{
  While it mines!
}
function TBot.WhileMining(): Boolean;
var
  Vein: TVein;
  TimeoutCounter, ShiftTimeout, MoveCountDown: TCountDown;
  InvCount, IC, Height: Int32;
  Mining, Found: Boolean;
  OurPos: TPoint;
  B: TBox;
begin
  if (Self.CurrentVein = nil) or (Self.CurrentZone = nil) then
  begin
    Script.WriteMsg('WhileMining: bad ptr!', True);
    exit();
  end;

  Vein := Self.CurrentVein^;
  InvCount := Inventory.Count();

  Self.AfterActionAntiBan(True);
  Minimap.SetCompassAngle(Self.CurrentZone^.Angle);

  // wait for us to stop moving before we start monitoring the tree tile.
  MoveCountDown.Init(SRL.SkewedRand(2000, 1000, 3000));
  while RSClient.IsLoggedIn() do
  begin
    if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
    begin
      Script.WriteMsg('WhileMining: moving', True);
      MoveCountDown.Restart();
    end;

    if Self.CouldntReach() then
    begin
      Script.WriteMsg('WhileMining: Couldnt reach', True);
      exit();
    end;

    if MoveCountDown.IsFinished() then
      break;

    Self.DoMainLoopStuff('Going to clicked vein...', False);
  end;

  Result := True;

  // we timeout if we do not gain something into our inventory
  OurPos := Self.RSW.GetMyPos();
  Height := Self.GetHeight(OurPos);
  TimeoutCounter.Init(SRL.SkewedRand(Self.MineWaitTime, Self.MineWaitTime - 2500, Self.MineWaitTime + 2500));
  ShiftTimeout.Init(SRL.SkewedRand(Self.MiningPixelShiftTimeout, Self.MiningPixelShiftTimeout - 500, Self.MiningPixelShiftTimeout + 500));
  while RSClient.IsLoggedIn() do
  begin
    if Self.CheckRuneliteMiningPlugin(Mining) then
    begin
      if Mining then
        Script.WriteMsg('WhileMining: Runelite says we are mining!', True)
      else
      begin
        Script.WriteMsg('WhileMining: Runelite says we are not mining', True);
        break;
      end;
    end
    else
    begin
      // make sure that its still there
      if False and (not Self.FindVein(OurPos, Height, Vein, B, Found) or not Found) then
      begin
        Script.WriteMsg('WhileMining: Vein not found', True);
        break;
      end;

      // make sure that theres veins beside us
      if not Self.IsMining(Vein, OurPos) then
      begin
        Script.WriteMsg('WhileMining: Not mining!', True);

        if ShiftTimeout.IsFinished() then
        begin
          Script.WriteMsg('WhileMining: ShiftTimeout timeout', True);
          break;
        end;
      end
      else
      begin
        ShiftTimeout.Restart();
        Script.WriteMsg('WhileMining: Mining!', True);
      end;

      // watch inv
      IC := Inventory.Count();
      if IC >= (Inventory.HIGH_SLOT + 1) then
      begin
        Script.WriteMsg('WhileMining: Inventory full', True);
        break;
      end;

      if IC <> InvCount then
      begin
        Script.WriteMsg('WhileMining: Got an item! Restarting timer', True);
        TimeoutCounter.Restart();
      end;
      InvCount := IC;

      if TimeoutCounter.IsFinished() then
      begin
        Script.WriteMsg('WhileMining: Timed out', True);
        break;
      end;
    end;

    Self.DoMainLoopStuff('Mining vein...', True);
  end;

  if TimeoutCounter.IsFinished() then
    Script.WriteMsg('WhileMining: No ore gained in timeout...', True);

  Script.SetStatus('Vein mining completed!');

  Wait(0, 2000, wdLeft);
end;

{
  Gathers!
}
function TBot.DoGathering(): Boolean;
var
  WasClicked: Boolean;
begin
  while RSClient.IsLoggedIn() and not Inventory.IsFull() do
  begin
    if Result then
      Self.ClearFailCount();

    Result := False;

    Script.WriteMsg('Gathering!', True);
    Self.CurrentVein := nil;
    Self.CurrentZone := nil;

    // go to correct level
    if not Self.DoLadder(True) then
    begin
      Script.WriteMsg('Failed to do ladder');
      exit();
    end;

    // go to the zone
    Self.CurrentZone := Self.ChooseZone();
    if Self.GoToZone() then
    begin
      // if we click a vein early.
      Result := Self.WhileMining();
      continue;
    end;

    Wait(0, 1250, wdLeft);
    Minimap.SetCompassAngle(Self.CurrentZone^.Angle);
    Wait(0, 1250, wdLeft);

    // click the vein
    if (Self.ClickVein(WasClicked) and WasClicked) or
      Self.GoToZone(True) or
      (Self.ClickVein(WasClicked) and WasClicked) or
      Self.GoToZone(True, True) or
      (Self.ClickVein(WasClicked) and WasClicked) then
    begin
      Result := Self.WhileMining();

      if Result then
        continue
      else
        break;
    end
    else
      break;
  end;

  if Result then
    Self.LastZone := Self.CurrentZone;

  Self.CurrentVein := nil;
  Self.CurrentZone := nil;
  Wait(0, 2000, wdLeft);
end;

{$ENDIF} // INEEDBOT_MLM_VEIN
