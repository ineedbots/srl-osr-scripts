{
  Oak door helper
  Author: ineedbot
  Date: 06/06/2022

  99 Construction
}

program OakDoorHelper;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL/OSR.simba}
{$i utils.simba}

var
  TalkToTimer, DoubleClickTimer, AnythingTimer, MouseMoveTimer, WaitForUptxtChangeTimer, WaitForUptxtChangeAfterTimer: TCountDown;
  ButlerAppearedTimer, ButlerDisappearedTimer: TStopWatch;
  uptxt, lastuptxt: String;
  ButlerIsHere, WaitForUptxtChange: Boolean;
  LastNpcCount, NpcCount, ButlerWaitShowTime: Int32;
  OakPlank: TRSItem;
  B: TBox;
  AvailOptions: TRSChooseOption_OptionArray;

begin
  Mouse.Click(Inventory.GetSlotBox(27), MOUSE_RIGHT);
  KeyBoard.PressKey(VK_1);
  Sleep(5000);

  MouseMoveTimer.Init(1);
  TalkToTimer.Init(1);
  DoubleClickTimer.Init(1);
  AnythingTimer.Init(1);
  WaitForUptxtChangeTimer.Init(1);
  WaitForUptxtChangeAfterTimer.Init(1);

  ButlerWaitShowTime := 750;

  ButlerAppearedTimer.Start();
  ButlerDisappearedTimer.Start();

  OakPlank := 'Oak plank';

  if RSClient.Mode = ERSClientMode.RESIZABLE_CLASSIC then
    B := [519, 470, 523, 484]
  else
    B := [519, 470, 533, 484];

  Mouse.Move(B, True);

  while True do
  begin
    Sleep(50);

    // or logged out
    if not RSClient.IsLoggedIn() then
      continue;

    // dont do it if not in posistion
    if not Mouse.Position().InBox(B) then
      continue;

    // antiban of small mouse movements
    if MouseMoveTimer.IsFinished() then
    begin
      Mouse.Move(Mouse.Position().Random(-4, 4, True));

      Sleep(SRL.SkewedRand(100, 0, 1000));

      if not Mouse.Position().InBox(B) then
        Mouse.Move(B);

      if Random() < 0.95 then
        MouseMoveTimer.Restart(SRL.SkewedRand(1000 * 60 * 20, 1000 * 60 * 15, 1000 * 60 * 30))
      else if Random() < 0.8 then
        MouseMoveTimer.Restart(SRL.SkewedRand(1000 * 60 * 5, 1000 * 60 * 2, 1000 * 60 * 8))
      else
        MouseMoveTimer.Restart(SRL.SkewedRand(1000 * 60 * 10, 1000 * 60 * 1, 1000 * 60 * 50));
    end;

    KeyBoard.KeyDown(VK_1);

    if Chat.LeveledUp() then
      KeyBoard.PressKey(VK_SPACE);

    // keep track of when butler shows and disappears.
    NpcCount := CountColorTolerance($00FFFF, Minimap.Bounds(), 30);
    if NpcCount <> LastNpcCount then
    begin
      // 7s for demon
      if NpcCount >= 1 then
      begin
        ButlerIsHere := True;
        ButlerAppearedTimer.Reset();
      end
      else
      begin                    
        ButlerIsHere := False;
        ButlerDisappearedTimer.Reset();
      end;
    end;
    LastNpcCount := NpcCount;

    // watch for uptxt changes
    uptxt := MainScreen.GetUpText().Strip();
    if uptxt = lastuptxt then
    begin
      if WaitForUptxtChange and not WaitForUptxtChangeTimer.IsFinished() then
        continue;
    end
    else
    begin
      // sometimes butler disappears, ignore this change
      if not ('Talk-to' in lastuptxt) then
      begin
        if WaitForUptxtChange then
          WaitForUptxtChangeAfterTimer.Restart(SRL.SkewedRand(50, 0, 1000));
        WaitForUptxtChange := False;
      end;
    end;
    lastuptxt := uptxt;

    // anti timing for when uptxt changes
    if not WaitForUptxtChangeAfterTimer.IsFinished() then
      continue;

    // anti spam of inputs
    if not AnythingTimer.IsFinished() then
      continue;
    AnythingTimer.Restart(SRL.SkewedRand(333, 250, 1000));

    // check if butler stuck behind door
    if ('9 more' in uptxt) and ('Open' in uptxt) and (Inventory.CountItem(OakPlank) < 10) then
    begin
      ChooseOption.Select('Remove');
      Mouse.Move(B);
    end;

    // check if door was opened
    if ('Close' in uptxt) then
    begin
      Mouse.Click(MOUSE_LEFT);
      Sleep(1100);
    end;

    // check if butler is ready to talk'd to
    if ('Talk-to' in uptxt) and TalkToTimer.IsFinished() then
    begin
      // wait for the buttler to insert his items into our inv
      if ButlerIsHere and (ButlerAppearedTimer.ElapsedTime() < ButlerWaitShowTime) then
        continue;

      // make sure...
      if not MainScreen.IsUpText('Open', 100) then
        Mouse.Click(MOUSE_LEFT);
      TalkToTimer.Restart(SRL.SkewedRand(1250, 750, 2000));

      // allow a small delay so the input registers
      DoubleClickTimer.Restart(SRL.SkewedRand(500, 500, 1250));

      // antiban timing of when the butler appears
      ButlerWaitShowTime := SRL.SkewedRand(700, 650, 1500);
    end
    else if DoubleClickTimer.IsFinished() then
    begin
      // make sure that the door is built for when the buttler shows
      if ('Open' in uptxt) and ((Inventory.CountItem(OakPlank) < 10) or (not ButlerIsHere and (ButlerDisappearedTimer.ElapsedTime() > 4000))) then
        continue;

      Mouse.Click(MOUSE_RIGHT);

      // check to make sure we are not stuck, and fix it
      if (Random() < 0.333) or Inventory.IsFull() then
      begin
        AvailOptions := ChooseOption.GetOptions();
        if Length(AvailOptions) > 2 then
        begin
          if not ('Build' in AvailOptions[High(AvailOptions) - 1].Text) and not ('Remove' in AvailOptions[High(AvailOptions) - 1].Text) then
            Mouse.Move(AvailOptions[High(AvailOptions) - 2].Bounds);
        end;
      end;

      Sleep(SRL.SkewedRand(100, 50, 250));

      // make sure...
      Mouse.Click(MOUSE_LEFT);
      Mouse.Move(B);

      WaitForUptxtChange := True;
      WaitForUptxtChangeTimer.Restart(SRL.SkewedRand(2500, 1500, 3000));
    end;
  end;
end.
