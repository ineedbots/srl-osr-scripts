{
  Util antiban
  Author: ineedbot
  Date: 6/30/2022
}

{$IFNDEF INEEDBOT_UTILS_ANTIBAN}
{$DEFINE INEEDBOT_UTILS_ANTIBAN}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Uses account specifc for randomness
}
function BioRandomFixed(): Double;
begin
  Result := Script.AntiBanEnergy.BioHash;
end;

{
  Uses account specifc for randomness
}
function BioRandomCoinFlip(): Boolean;
begin
  Result := Random() > BioRandomFixed();
end;

{
  Does Fowler–Noll–Vo hash on the string
}
function FNVHash(Str: String): UInt32;
var
  i: UInt32;
begin
  Result := $811C9DC5;
  for i := 1 to Length(Str) do
    Result := (Result * $1000193) xor Ord(Str[i]);
end;

{
  Returns how many days passed
}
function GetSystemDay(): UInt64;
begin
  Result := Round(Now() * 1);
end;

{
  Sets up two variables Patience and an Endurance, based on your characters
  nickname. These two factors are used within Energy calculation to make it
  unique to you.

  Patience (Energy gained from a break will..):
    High:  Drop of more slowly, but drops harder near the end (2-4 hours, see Endurance).
    Low:   Drop of faster, but gradually drop less of near the end.

  Endurance:
    - Energy from a break last 2-4 hours, depending on endurance (0..1).
    High: You generally lasts longer before dropping off. Max endurance means
          the bot can run for a full 24 hours before energy is depleted.
    Low:  You generally drop off faster. Min endurance means the bot can
          only run for 16 hours before energy is depleted.

  Taken from SRL/SRL repo
}
procedure TAntiBanEnergy.SetupBiometrics();
var
  UserStr: String;
begin
  UserStr := Login.GetPlayer().User;
  if UserStr = '' then
    UserStr := IntToStr(Random(10000));

  Self.BioHash   := FNVHash(UserStr) / $FFFFFFFF;
  Self.Endurance := Cos(Self.BioHash*PI/2);
  Self.Patience  := Sin(Self.BioHash*PI/1);

  Self.MaxFocusCharge := Round(SRL.SkewedRand(ONE_MINUTE * 5, ONE_MINUTE * 2.5, ONE_MINUTE * 7.5));
  Self.CanStartFocusCharge := Round(SRL.SkewedRand(0.8, 0.7, 0.99) * Self.MaxFocusCharge);
  Self.FocusCharge := Self.MaxFocusCharge;
end;

{
  Returns points randomly in the given box, randomized everyday

  https://www.youtube.com/watch?v=qzhwSUP1Ypw
  Thank our god: Andy Li
}
function TAntiBanEnergy.DailyPointsInBox(B: TBox; C: Int32 = 3): TPointArray;
var
  h_str: String;
  i, wid, hig: Int32;
begin
  B.GetDimensions(wid, hig);
  h_str := IntToStr(Round(Self.BioHash * 10000)) + IntToStr(GetSystemDay());

  for i := 1 to C do
  begin
    Result += Point(B.X1 + FNVHash(h_str + IntToStr(i) + 'x') mod wid,
      B.Y1 + FNVHash(h_str + IntToStr(i) + 'y') mod hig);
  end;
end;

{
  Override moving mouse over a box to use Andy's brain
}
procedure TMouse.Move(Box: TBox; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT); override;
var
  RanTPA: TPointArray;
  RanTP: TPoint;
  w, h, w2, h2: Int32;
  B: TBox;
begin
  if Box.Contains(Self.Position()) and (not ForcedMove) then
    exit();

  if Distribution = MOUSE_DISTRIBUTION_DEFAULT then
    Distribution := Self.Distribution;

  // calcuate dems for box
  Box.GetDimensions(w, h);

  // calcuate radius vals
  w2 := Round(w * Script.AntiBanEnergy.BoxPTRad);
  h2 := Round(h * Script.AntiBanEnergy.BoxPTRad);

  // shrink the random points box so we might not randomly miss the box
  B := Box.Expand(-w2, -h2);
  B.GetDimensions(w, h);
  if (w <= 0) or (h <= 0) then
  begin
    inherited(Box, ForcedMove, Distribution);
    exit();
  end;

  // find the random points for today
  RanTPA := Script.AntiBanEnergy.DailyPointsInBox(B);

  // choose a random point
  RanTP := RanTPA[Random(Low(RanTPA), High(RanTPA))];


  // mouse our mouse to the point
  Self.Move(RanTP.Random(Round(-w2),
                         Round(w2),
                         Round(-h2),
                         Round(h2),
                         (Distribution = MOUSE_DISTRIBUTION_GAUSS)
  ));
end;

{
  Internally used to compute Energy
  - It checks how long it was since last break, returns the value in milliseconds
}
function TAntiban.TimeSinceBreak(LongerThan:Double=0): UInt64;
var i: Int32;
begin
  for i := 0 to High(Self.Breaks) do
    if (Self.Breaks[i].Length >= LongerThan) and (Self.Breaks[i].PrevAtTime >= Result) then
      Result := Trunc(Self.Breaks[i].PrevAtTime);
  Result := GetTimeRunning() - Result;
end;

{
  Internally used to compute Energy
  - The method gathers the sum/length of pauses the past `Timespan`.
  It only counts one of each type of pauses, so if you have a 5 min break that
  runs every 10 minutes, it will only count the last executed one no matter timespan.
}
function TAntiban.BreaksPast(Timespan: Double): Int64;
var
  XHoursAgo: Double := GetTimeRunning() - Timespan;
  active, started: Double;
  i: Int32;
begin
  Active := Min(Timespan, GetTimeRunning());
  for i := 0 to High(Self.Breaks) do
    if Self.Breaks[i].PrevAtTime >= XHoursAgo then
    begin
      if Self.Breaks[i].PrevAtTime = 0 then
        Continue;
      started := Max(XHoursAgo, Self.Breaks[i].PrevAtTime - Self.Breaks[i].Length);
      Active -= Self.Breaks[i].PrevAtTime - started;
    end;

  Result := Round(Min(Timespan, Timespan - Active));
end;

{
  Check if the antiban has a `sleep` break added.
  Note: Sleep is defined by being 5+ hours, and is the the last added break.
}
function TAntiban.HasSleep(): Boolean;
var zZz: Int32;
begin
  zZz := High(Self.Breaks);
  Result := (zZz >= 0) and ((Self.Breaks[zZz].Length) > 5*ONE_HOUR);
end;

{
  Returns the current energy of your character, based on recent breaks, and runtime.
  You should start with near 100% energy, can be a little less.

  This method does expect your bot to have a sleep break (5+ hours), otherwise it
  wont be worth a lot.
}
function TAntiBanEnergy.EnergyLevel(AB: TAntiBan = Antiban): Double;
var
  zz: Int32;
  t,eLeftFromSleep, eLeftFromBreak, eBreakValue: Double;
  PastX: Double;
begin
  PastX := (2+(2*Self.Endurance)) * ONE_HOUR;
  eLeftFromBreak := Max(0,Min(1,1-Power((AB.TimeSinceBreak() / (18*ONE_HOUR)), 1/3)));
  eBreakValue    := Power(AB.BreaksPast(PastX) / (PastX), 1/3);
  Result         := Max(0,Min(1,(eLeftFromBreak + eBreakValue) / (2.1 - (0.5*Self.Patience))));

  if AB.HasSleep() then // if we have a sleep
  begin
    zz := High(AB.Breaks);
    t := GetTimeRunning() - Trunc(AB.Breaks[zz].PrevAtTime);
    eLeftFromSleep := Max(0,Min(1,t / ((16*ONE_HOUR) + (8*ONE_HOUR*Self.Endurance))));
    eLeftFromSleep := Power(1-eLeftFromSleep, 1/4);
    Result := eLeftFromSleep * Result;
  end;
  Result := 100 * Result;
end;

{
  This function will return true for a time; and then false for a time.
  Used for swapping between variants of a script for 'afk' play vs 'sweat' play.
  Stolen idea from slacky
}
function TScript.IsFocusing(): Boolean;
var
  Delta, Now: Int32;
  Energy: Double;
  Should: Boolean;
begin
  Now := GetTimeRunning();
  Delta := Now - Self.AntiBanEnergy.LastTime;
  Self.AntiBanEnergy.LastTime := Now;

  Energy := Self.AntiBanEnergy.EnergyLevel(Self.AntiBan) / 100;

  // update values
  if Self.AntiBanEnergy.IsFocused then
  begin
    Self.AntiBanEnergy.FocusCharge -= Round(Delta * (1.9 - Energy));

    // clamp it
    if Self.AntiBanEnergy.FocusCharge < 0 then
      Self.AntiBanEnergy.FocusCharge := 0;

    Should := False;
    if Self.AntiBanEnergy.ShouldStopFocusing <> nil then
      Should := Self.AntiBanEnergy.ShouldStopFocusing();

    // did we run out of juice?
    if (Self.AntiBanEnergy.FocusCharge <= 0) or ((Random() - 0.15) > Energy) or Should then
    begin
      Self.AntiBanEnergy.IsFocused := False;
      Self.AntiBan.DebugLn('Stopped focusing');

      if Self.AntiBanEnergy.StoppedFocusing <> nil then
        Self.AntiBanEnergy.StoppedFocusing();
    end;
  end
  else
  begin
    Self.AntiBanEnergy.FocusCharge += Round(Delta * (0.1 + Energy));

    // clamp it
    if Self.AntiBanEnergy.FocusCharge > Self.AntiBanEnergy.MaxFocusCharge then
      Self.AntiBanEnergy.FocusCharge := Self.AntiBanEnergy.MaxFocusCharge;

    Should := True;
    if Self.AntiBanEnergy.ShouldStartFocusing <> nil then
      Should := Self.AntiBanEnergy.ShouldStartFocusing();

    // start focusing
    if (Self.AntiBanEnergy.FocusCharge >= Self.AntiBanEnergy.CanStartFocusCharge) and
       (Random() - 0.15 < Energy) and Should then
    begin
      Self.AntiBanEnergy.IsFocused := True;
      Self.AntiBan.DebugLn('Started focusing');

      if Self.AntiBanEnergy.StartedFocusing <> nil then
        Self.AntiBanEnergy.StartedFocusing();
    end;
  end;

  Result := Self.AntiBanEnergy.IsFocused;
end;

{
  From Slacky's barb fisher

  Returns a number that is bigger when we have less energy
}
function EnergizedNumber(n: Double; Exp: Double = 0.2): Int64;
begin
  Result := Trunc(2*n * (1-Power(System.Max(0.0001, Script.AntiBanEnergy.EnergyLevel(Script.AntiBan)/100),Exp)));
end;

{
  Timing
}
function PerformanceTimer(): Double; override;
begin
  Result := GetTickCount();
end;

{
  Slacky's fatigue wait
}
procedure WaitFatigue(t: Double);
begin
  System.Wait(EnergizedNumber(t));
end;

{
  Adds extended wait time, to simulate fatigue, thanks Slacky
}
procedure Wait(min, max:Double; weight:EWaitDir=wdMean); override;
var
  t: Double;
begin
  t := PerformanceTimer();

  if min >= 0 then
    inherited(min, max, weight)
  else if SRL.SkewedRand(min, min, max) >= 0 then
    inherited(0, max, weight);

  WaitFatigue(PerformanceTimer()-t);
end;

{
  Adds extended wait time, to simulate fatigue, thanks Slacky
}
procedure WaitEx(mean, dev:Double); override;
var t: Double;
begin
  t := PerformanceTimer();
  inherited(mean, dev);
  WaitFatigue(PerformanceTimer()-t);
end;

{
  Does the wait, if not focused
}
procedure WaitCheckFocused(min, max:Double; weight:EWaitDir=wdMean);
var
  max_mult: Double;
begin
  if Script.IsFocusing() then
  begin
    max_mult := 0.1 + (0.5 * (1 - Script.AntiBanEnergy.EnergyLevel(Script.AntiBan) / 100));
    Wait(min, SRL.SkewedRand(min, min, max * max_mult), weight);
  end
  else
    Wait(min, max, weight);
end;

{
  From Flight's AIOFisher
}
procedure TMouse.HumanMove(Point: TPoint);
var
  mPt: TPoint;
  S: Int32;
  Miss: Double;
  Range: Int64;
begin
  S := Self.Speed;
  Range := Trunc(Power(Self.Position().DistanceTo(Point), 0.80)); // how much possible range to miss
  Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-Miss)*Self.Position().X + Miss*Point.X);
  mPt.Y := Trunc((1-Miss)*Self.Position().Y + Miss*Point.Y);

  mPt.X += SRL.NormalRange(-Range, Range);
  mPt.Y += SRL.NormalRange(-Range, Range);

  Mouse.Move(mPt);
  Self.Speed := round(S*0.85);
  Mouse.Move(Point);
  Self.Speed := S;
end;

{
  From Flight's AIOFisher
}
procedure TMouse.RandomMovement();
var
  S: Int32;
begin
  S := Self.Speed;
  Self.Speed := 4;
  Self.Move(Box(Mouse.Position(), 75, 75), True);
  Self.Speed := S;
end;

{
  From Flight's AIOFisher
}
procedure TAntiBan.HoverMSTile(DotType: ERSMinimapDot; RightClick: Boolean = False);
var
  Tries,i: Int32;
  a: Double;
  rDot: TPoint;
  msRect: TRectangle;
  tpa,cTPA: TPointArray;
  cArr: TIntegerArray;
begin
  tpa := Minimap.GetDots(DotType);
  if Length(tpa) < 1 then exit();
  a := Minimap.GetCompassAngle(False);
  repeat
    inc(Tries);
    rDot := tpa[random(low(tpa),high(tpa))];
    msRect := Minimap.VecToMSRect(Vec3(rDot.X + 2, rDot.Y + 2, 0), a);
    if MainScreen.Bounds().Contains(msRect) then
    begin
      Self.DebugLn('Hovering random ' + toStr(DotType));
      // Get all colors on the tile
      // Extract the rarest
      // Gather points
      // Mouse to random point
      cArr := getColors(tpaFromBox(msRect.Bounds()));
      cArr.Sort();
      cArr.ClearDuplicates();
      for i := 0 to Length(cArr)-1 do
        if (SRL.FindColors(cTPA, CTS1(cArr[i], 10), msRect.Bounds()) > 5) then
        begin
          Mouse.Move(cTPA.Mean());
          if RightClick then
            Mouse.Click(MOUSE_RIGHT);

          wait(1500, 2700);
          if RightClick then
            ChooseOption.Close();
          exit();
        end;
    end;
  until(Tries > 10);
end;

{
  From Flight's AIOFisher
}
procedure TAntiban.HoverMSItems();
begin
  Self.HoverMSTile(ERSMinimapDot.ITEM);
end;

{
  From Flight's AIOFisher
}
procedure TAntiban.HoverMSNPCs();
begin
  Self.HoverMSTile(ERSMinimapDot.NPC);
end;

{
  From Flight's AIOFisher
}
procedure TAntiban.HoverMSPlayers();
begin
  Self.HoverMSTile(ERSMinimapDot.PLAYER);
end;

{
  From Flight's AIOFisher
}
procedure TAntiban.DoLoseFocus();
begin
  Self.LoseFocus(SRL.NormalRange(3700,5000));
end;

{
  Randomize the last tile in the path,
  Seems that SRL walker, for the last dest in the path
  the click is NOT randomized, possibly triggering patterns
}
function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean; override;
begin
  Path[High(Path)].X += Random(-Self.ClickRandomness, Self.ClickRandomness);
  Path[High(Path)].Y += Random(-Self.ClickRandomness, Self.ClickRandomness);

  Result := inherited(Path, WaitUntilDistance);
end;

{
  Use to throw off timings!
}
procedure TScript.RareSmallWait();
var
  RanTiming: Int32;
begin
  RanTiming := SRL.SkewedRand(-750, -1000, 1500);
  if RanTiming > 0 then
    Wait(RanTiming);
end;

{
  Tick rate of the script, with randomness
}
function TScript.MainLoopWaitAmount(UseHP: Boolean): Int32;
var
  Large: Int32;
begin
  if Random() < 0.975 then
    exit(Self.SleepRate);

  Large := 5000;

  if UseHP then
  begin
    case Minimap.GetHPPercent() of
      0.0..0.4: Large := Self.SleepRate + 1;
      0.4..0.6: Large := 500;
      0.6..0.75: Large := 1250;
      0.75..0.9: Large := 2500;
      else Large := 5000;
    end;
  end;

  Result := SRL.SkewedRand(Self.SleepRate, 50, Large);
end;

{
  Returns a good antiban inv slot seq
}
function TRSInventory.GetGoodPattern(): TIntegerArray;
var
  R: Double;
begin
  if Random() < 0.333 then
  begin
    Result := Self.ErrorPattern(Self.RandomPattern());
    exit();
  end;

  // randomize the deposit pattern
  R := Random();
  if R < 0.1 then
    Result := Self.ErrorPattern(DROP_PATTERN_TOPDOWN, 5)
  else if inRange(R, 0.1, 0.35) then
    Result := Self.ErrorPattern(DROP_PATTERN_SNAKE, 5)
  else
    Result := Self.ErrorPattern(DROP_PATTERN_MKEYS, 5);
end;

{
  Shortens the pattern
}
function TRSInventory.ChopPattern(Pattern: TIntegerArray): TIntegerArray;
begin
  if SRL.Dice(20) then
    SetLength(Pattern, Random(Length(Pattern)));
  if SRL.Dice(20) then
    Pattern := Copy(Pattern, Random(Length(Pattern)));

  Result := Pattern;
end;

{
  From Flight's AIOFisher
}
procedure TAntiban.AfterBankAntiBan(Percent: Double);
var
  randP: Double;
begin
  if Random() <= (Percent/100) then
  begin
    Self.DebugLn('Bank screen antiban');
    randP := Random();
    if randP < 0.33 then
      Mouse.RandomMovement()
    else if (randP >= 0.33) and (randP < 0.66) then
      wait(2800, 4000)
    else if randP > 0.66 then
    begin
      // Copied version of 'random right click' antiban, minus the additional debug msg
      Mouse.Move(GetClientBounds(), True, MOUSE_DISTRIBUTION_RANDOM);

      if ChooseOption.Open() then
      begin
        if Random() < 0.50 then
          Mouse.Move(ChooseOption.Bounds);

        Wait(0, 8000, wdLeft);

        ChooseOption.Close();
      end;
    end;
  end;
end;

{
  Checks to see failsafe xp gain

  Comes from olly/srl-development
}
function TScript.CheckActivity(): Boolean;
var
  XP: Int32;
begin
  XP := XPBar.ReadXPBar();

  if (XP <> -1) and (XP <> Self.Activity.XP) then
  begin
    Self.Activity.NoXPCount := 0;
    Self.Activity.XP := XP;
    Self.Activity.Countdown.Restart();
    Result := True;
  end
  else if Self.Activity.Countdown.IsFinished() then
  begin
    Self.Activity.Countdown.Restart();
    Inc(Self.Activity.NoXPCount);

    if Self.Activity.NoXPCount > Self.Activity.NoXPCountMax then
      Self.Stop('No XP gained in a while!');
  end;
end;

{
  Sets the compass north
}
procedure TAntiBan.SetCompassNorth();
begin
  Self.DebugLn('Setting compass north');
  Minimap.SetCompassNorth((Random() > 0.2));
end;

{
  Pauses all antiban tasks
}
procedure TAntiBan.PauseAllTasks();
var
  I: Int32;
begin
  for I := 0 to High(Self.Tasks) do
    Self.Tasks[I].Countdown.Pause();
end;

{
  Resumes all antiban tasks
}
procedure TAntiBan.ResumeAllTasks();
var
  I: Int32;
begin
  for I := 0 to High(Self.Tasks) do
    Self.Tasks[I].Countdown.Resume();
end;

{$ENDIF} // INEEDBOT_UTILS_ANTIBAN
