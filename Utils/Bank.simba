{
  Util bank
  Author: ineedbot
  Date: 6/30/2022
}

{$IFNDEF INEEDBOT_UTILS_BANK}
{$DEFINE INEEDBOT_UTILS_BANK}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Prevent auto input and fatal of bankpin
  Fixes the problem with uptext covering the bank interface, only when the bank tag plugin is used on runelite
}
function TRSBank.IsOpen(WaitForItems: Boolean = True): Boolean; override;
var
  B: TBox;
  Fix: Boolean;
  RearrangeText: String;
begin
  if BankPin.IsOpen() then
    exit();

  // fixes the issue where uptext can cover the button, making isopen fail
  if (MainScreen.GetUpText() <> '') then
  begin
    B := Self.Bounds();
    RearrangeText := OCR.RecognizeStatic([B.X1 + 7, B.Y2 - 41, B.X1 + 102, B.Y2 - 24], TOCRColorRule.Create([2070783, 5]), RS_FONT_PLAIN_12);

    if RearrangeText.IsInString(['Rearrange mode:']) then
      Fix := True;
  end;

  if Fix then
    exit(True);

  Result := inherited(WaitForItems);
end;

{
  Mouse callback when the uptext is cleared
}
procedure WatchForClearUptext(Sender: PMouse; var X, Y: Double; var Done: Boolean);
begin
  if Script.OldMouseMovingCallback <> nil then
  begin
    Script.OldMouseMovingCallback(Sender, X, Y, Done);

    if Done then
      exit();
  end;

  Sender := Sender;
  X := X;
  Y := Y;

  if MainScreen.GetUpText() = '' then
    Done := True;
end;

{
  Fixes the problem with uptext covering the bank interface, only when the bank tag plugin is used on runelite
}
function TRSBank.FixUpText(): Boolean;
begin
  if ChooseOption.IsOpen() then
    ChooseOption.Close();

  if MainScreen.GetUpText() = '' then
    exit(True);

  Script.OldMouseMovingCallback := Mouse.OnMoving;
  Mouse.OnMoving := WatchForClearUptext;

  Mouse.Move(Minimap.Bounds());

  Mouse.OnMoving := Script.OldMouseMovingCallback;
  Script.OldMouseMovingCallback := nil;

  Result := (MainScreen.GetUpText() = '');
end;

{
  Find bank item
}
function TRSBank.FindBankItem(Item: TRSItem; out B: TBox): Boolean;
var
  i: Int32;
begin
  // try and find it
  for i := 0 to 3 do
  begin
    if Self.FindItem(Item, B) then
      exit(True);

    // fix the uptext and chooseoption menu
    Self.FixUpText();

    // find it again
    if Self.FindItem(Item, B) then
      exit(True);
  end;

  // try scroll to the item
  if not Result and not Self.ScrollToItem(Item) then
    exit();

  // try one last time
  for i := 0 to 3 do
  begin
    if Self.FindItem(Item, B) then
      exit(True);

    // fix the uptext and chooseoption menu
    Self.FixUpText();

    // find it again
    if Self.FindItem(Item, B) then
      exit(True);
  end;
end;

{
  Deposits our inv into the bank
}
function TRSBank.DepositItemsIntoBank(Pattern: TIntegerArray; CurProducts: Int32 = 28; Amount: Int32 = -2; WaitForItems: Boolean = True): Boolean;
var
  i, IC, QuantityAmount: Int32;
  UsingButton, Depod: Boolean;
  R: Double;
begin
  IC := Inventory.Count();
  for i in Pattern do
  begin
    if Inventory.IsSlotUsed(Inventory.GetSlotBox(i)) then
    begin
      UsingButton := (SRL.TruncatedGauss(0.0, 1.0) < 0.5);

      if Amount = -2 then
      begin
        R := SRL.TruncatedGauss(0.0, 1.0);
        case R of
          0.0..0.5: QuantityAmount := BANK_DEPOSIT_ALL;
          0.5..0.6: QuantityAmount := CurProducts;
          0.6..0.7: QuantityAmount := SRL.SkewedRand(500, 28, 99999);
          0.7..0.8: QuantityAmount := 10;
          0.8..0.9: QuantityAmount := 5;
          else QuantityAmount := 1;
        end;
      end
      else
        QuantityAmount := Amount;

      if Self.DepositSlot([i, QuantityAmount], UsingButton) then
      begin
        Depod := True;

        if WaitForItems then
          Wait(SRL.SkewedRand(1000, 500, 2500));
      end
      else
      begin
        Self.FixUpText();
        if Self.DepositSlot([i, QuantityAmount], UsingButton) then
        begin
          Depod := True;

          if WaitForItems then
            Wait(SRL.SkewedRand(1000, 500, 2500));
        end;
      end;
    end;
  end;

  if Depod and WaitForItems then
    Inventory.WaitChange(IC, SRL.SkewedRand(2500, 2000, 3000));

  if Inventory.IsFull() and Depod then
    exit();

  Result := True;
end;

{
  withdraw item from bank
}
function TRSBank.WithdrawItemFromBank(B: TBox; Amount: Int32 = -3; Noted: Boolean = False; AllAmount: Int32 = 28; WaitForItems: Boolean = True): Boolean;
var
  IC, QuantityAmount, i: Int32;
  UsingButton, Withdrew: Boolean;
  R: Double;
begin
  IC := Inventory.Count();
  for i := 0 to 5 do
  begin
    UsingButton := (SRL.TruncatedGauss(0.0, 1.0) < 0.5);

    if Amount = -3 then
    begin
      R := SRL.TruncatedGauss(0.0, 1.0);
      if not UsingButton and inRange(R, 0.4, 0.6) then
        QuantityAmount := BANK_WITHDRAW_ALL_BUT_ONE
      else
      begin
        case R of
          0.0..0.6: QuantityAmount := BANK_WITHDRAW_ALL;
          0.6..0.8: QuantityAmount := AllAmount;
          else QuantityAmount := SRL.SkewedRand(500, 28, 99999);
        end;
      end;
    end
    else
      QuantityAmount := Amount;

    if Self.WithdrawHelper(B, QuantityAmount, Noted, UsingButton) then
    begin
      Withdrew := True;

      if WaitForItems then
        Wait(SRL.SkewedRand(1000, 500, 2500));

      break;
    end
    else
      Self.FixUpText();
  end;

  if not Withdrew then
    exit();

  if WaitForItems then
    Inventory.WaitChange(IC, SRL.SkewedRand(2500, 2000, 3000));

  Result := True;
end;

{
  Uses the deposit button
}
function TRSBank.DepositAllItems(WaitForItems: Boolean = True): Boolean;
var
  IC: Int32;
begin
  IC := Inventory.Count();

  if not Self.DepositAll() then
    exit();

  if WaitForItems then
    Inventory.WaitChange(IC, SRL.SkewedRand(2500, 2000, 3000));

  Result := True;
end;

{
  Fixes problems with buttons
  Withdrawing with use of quantity buttons enabled with a custom quantity doesn't work.
  What happens is that it'll click the custom quantity button, the Enter amount: may appear, it'll then right click the item on the bank to withdraw and select Withdraw-X, which will open another Enter amount:.
  But since the Enter amount: is already opened from before, it'll start typing the quantity. BUT the second Enter amount: will appear, overwriting what it types, breaking it.
  Need to check if the Enter amount: is opened when it presses the X quantity button
}
function TRSBank.WithdrawHelper(B: TBox; Amount: Int32; Noted: Boolean; UseQuantityButtons: Boolean): Boolean; override;
var
  Button: TRSButton;
  NeedToInput: Boolean;
begin
  if Noted then
    Button := Self.GetButton(ERSBankButton.NOTE)
  else
    Button := Self.GetButton(ERSBankButton.ITEM);

  if not Button.Enabled() then
  begin
    Button.Click();
    Wait(0, 750, wdLeft);
  end;

  if not Button.Enable() then
    Exit;

  if UseQuantityButtons then
  begin
    if Self.IsCustomQuantity(Amount) then
    begin
      Button := Self.GetButton(ERSBankButton.QUANTITY_CUSTOM);

      if not Button.Enabled() then
      begin
        Mouse.Move(Button.Bounds);
        NeedToInput := MainScreen.IsUpText('Set custom quantity');
        Wait(0, 250, wdLeft);
        Mouse.Click(MOUSE_LEFT);

        if NeedToInput then
        begin
          Wait(0, 750, wdLeft);
          Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
          Wait(0, 750, wdLeft);
        end;

        Wait(0, 250, wdLeft);
        Mouse.Move(B);

        MainScreen.IsUpText('Withdraw-' + ToString(Amount) + ' ', SRL.SkewedRand(1250, 750, 2000));
        Wait(0, 250, wdLeft);
      end;

      if Button.Enable() then
      begin
        Mouse.Move(B);
        Wait(0, 250, wdLeft);

        if MainScreen.IsUpText('Withdraw-' + ToString(Amount) + ' ') then
        begin
          Mouse.Click(MOUSE_LEFT);

          Result := True;
        end else
          Result := ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Button := Self.GetButton(ERSBankButton.QUANTITY_1);
        5:  Button := Self.GetButton(ERSBankButton.QUANTITY_5);
        10: Button := Self.GetButton(ERSBankButton.QUANTITY_10);
        else
            Button := Self.GetButton(ERSBankButton.QUANTITY_ALL)
      end;

      if not Button.Enabled() then
      begin
        Button.Click();
        Wait(0, 750, wdLeft);
      end;

      if Button.Enable() then
      begin
        Result := True;

        Mouse.Click(B, MOUSE_LEFT);
      end;
    end;
  end else
  begin
    Mouse.Move(B);
    Wait(0, 250, wdLeft);

    case Amount of
      BANK_WITHDRAW_ALL:
        Result := ChooseOption.Select('Withdraw-All');
      BANK_WITHDRAW_ALL_BUT_ONE:
        Result := ChooseOption.Select('Withdraw-All-but-1');
      else
        Result := ChooseOption.Select('Withdraw-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                  ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
    end;
  end;
end;

{
  Fixes bankpin problem where the bounds it too small and the number is outside the search area
}
function TRSBankPin.ClickDigit(Digit: Char): Boolean; override;
var
  Buttons: TRSButtonArray;
  Hovering: Boolean;
  I: Int32;
begin
  if not Self.IsOpen() then
    exit();

  Buttons := Self.GetButtons();

  if Length(Buttons) = 10 then
  begin
    for I := 0 to High(Buttons) do
    begin
      if OCR.LocateText(Buttons[i].Bounds.Expand(5), Digit, RS_FONT_BOLD_12, TOCRColorRule.Create([$007FFF]), 1) then
      begin
        Mouse.Click(Buttons[I].Bounds, MOUSE_LEFT);
        exit(True);
      end
      else if Buttons[i].Bounds.Expand(5).Contains(Mouse.Position()) then
        Hovering := True;
    end;

    // Already hovering
    if Hovering then
    begin
      Mouse.Click(MOUSE_LEFT);
      exit(True);
    end;
  end;
end;

{
  From SRL-F; fixes fixed screen itemboxes being off
}
function TRSBank.GetSlotBoxes(): TBoxArray; override;
begin
  Result := Grid(8, ((Self.Height() - 135) div 36)+1, 31, 31, [17, 5], [Self.X1() + 57, Self.Y1() + 77]);
end;

{
  From SRL-F; makes the result true if found the search
}
function TRSBank.OpenSearch(WaitTime: Int32): Boolean; override;
begin
  Self.GetButton(ERSBankButton.SEARCH).Click();
  Result := Self.IsSearchOpen(WaitTime);
end;

{
  From SRL-F
}
(*
TRSBank.ScrollToItem
~~~~~~~~~~~~
.. pascal:: function TRSBank.ScrollToItem(Item: TRSItem; Out ItmBox: TBox): Boolean;

Sets the scroll bar in the bank to its top position then drags the scroll bar until the
given TRSItem is found or the scroll bar is dragged to the max position.

Example
-------

  if Bank.ScrollToItem('Lobster pot', ItmBox) then
    Mouse.Move(ItmBox);
*)
function TRSBank.ScrollToItem(Item: TRSItem; Out ItmBox: TBox): Boolean;
var
  SBoxBottom,SBoxTop: TPoint;
  Timeout: TCountDown;
begin
  if (not Self.IsOpen()) then Exit;
  if Self.FindItem(Item, ItmBox) then Exit(True);

  SBoxTop    := [Self.GetScrollBar().SliderRegion.Middle().X, Self.GetScrollBar().SliderRegion.Y1+SRL.NormalRange(1,10)];
  SBoxBottom := [Self.GetScrollBar().SliderRegion.Middle().X, Self.GetScrollBar().SliderRegion.Y2];

  // Bank.SetScrollPosition(0); Broken?
  Mouse.Move(SBoxTop);
  Mouse.Click(MOUSE_LEFT);

  Mouse.Move(Self.GetScrollBar().Slider);
  Mouse.Hold(MOUSE_LEFT);

  Timeout.Init(15000);

  ASyncMouse.Speed := SRL.NormalRange(3, 5);
  ASyncMouse.Move(SBoxBottom);

  while ASyncMouse.IsMoving() and not Timeout.IsFinished() do
  begin
    if (Self.GetScrollPosition() >= 100) or Self.FindItem(Item) then
      break;

    Wait(35);
  end;

  ASyncMouse.Stop();

  Mouse.Release(MOUSE_LEFT);
  wait(SRL.NormalRange(200, 350));
  Result := Self.FindItem(Item, ItmBox);
end;

{
  From SRL-F
}
(*
TRSBank.ScrollToItem
~~~~~~~~~~~~
.. pascal:: function TRSBank.ScrollToItem(Item: TRSItem; Out ItmPoint: TPoint): Boolean;

Same as TRSBank.ScrollToItem however a TPoint of the middle of the found item is provided.

Example
-------

  if Bank.ScrollToItem('Lobster pot', ItmPoint) then
    Mouse.Move(ItmPoint);
*)

function TRSBank.ScrollToItem(Item: TRSItem; Out ItmPoint: TPoint): Boolean; overload;
var
  ItmBox: TBox;
begin
  Result := Self.ScrollToItem(Item, ItmBox);
  if Result then ItmPoint := ItmBox.Middle();
end;

{
  From SRL-F
}
(*
TRSBank.ScrollToItem
~~~~~~~~~~~~
.. pascal:: function TRSBank.ScrollToItem(Item: TRSItem): Boolean;

Same as TRSBank.ScrollToItem however only confirmation is provided.

Example
-------

  if Bank.ScrollToItem('Lobster pot') then
    writeln('Found the lobster pot');
*)

function TRSBank.ScrollToItem(Item: TRSItem): Boolean; overload;
var
  ItmBox: TBox;
begin
  Result := Self.ScrollToItem(Item, ItmBox);
end;

{$ENDIF} // INEEDBOT_UTILS_BANK

