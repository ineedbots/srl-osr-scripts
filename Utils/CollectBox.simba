{
  Collectbox, from wasp-lib
  Author: ineedbot
  Date: 2/28/2023
}

{$IFNDEF INEEDBOT_UTILS_COLLECTBOX}
{$DEFINE INEEDBOT_UTILS_COLLECTBOX}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

type
  // In order FindButtons returns
  ERSCollectButton = (
    CLOSE,
    COLLECT_INVENTORY,
    COLLECT_BANK
  );

  ERSCollectSlotBoxes = (
    TRADE_STATUS,
    OPERATION,
    ITEM,
    CHANGE
  );

  TRSCollectBox = record(TRSTitledInteface)
    FINDER_UPTEXT: TStringArray;
    FINDER_OPTION: TStringArray;
  end;

function TRSCollectBox.GetButtons(): TRSButtonArray;
begin
  Result := FindButtons([[83, 19], [21,21]]);
end;

function TRSCollectBox.GetButton(Button: ERSCollectButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if Length(Buttons) = Length(ERSCollectButton) then
    Result := Buttons[Button];
end;


function TRSCollectBox.GetSlots(): TBoxArray;
begin
  Result := Grid(4, 2, 100, 74, [10, 10], [Self.X1() + 15, Self.Y1() + 44]);
end;

function TRSCollectBox.GetSlot(Index: Int32): TBox;
begin
  if (Index < 0) and (Index > 7) then
    Exit;

  Result := Self.GetSlots()[Index];
end;

function TRSCollectBox.GetSlotBoxes(Index: Int32): TBoxArray;
var
  SlotBox, Box: TBox;
begin
  SlotBox := Self.GetSlot(Index);
  if SlotBox = [] then
    Exit;

  Box := [(SlotBox.X1 + 8), (SlotBox.Y1 + 8), (SlotBox.X1 + 48), (SlotBox.Y1 + 26)];
  Result += Box;

  Box := [(SlotBox.X1 + 50), (SlotBox.Y1 + 8), (SlotBox.X1 + 70), (SlotBox.Y1 + 26)];
  Result += Box;

  Box := [(SlotBox.X1 + 9), (SlotBox.Y1 + 31), (SlotBox.X1 + 47), (SlotBox.Y1 + 65)];
  Result += Box;

  Box := [(SlotBox.X1 + 53), (SlotBox.Y1 + 31), (SlotBox.X1 + 91), (SlotBox.Y1 + 65)];
  Result += Box;
end;

function TRSCollectBox.GetSlotBox(Slot: Int32; Box: ERSCollectSlotBoxes): TBox;
var
  Boxes: TBoxArray := Self.GetSlotBoxes(Slot);
begin
  if Length(Boxes) = Length(ERSCollectSlotBoxes) then
    Result := Boxes[Box];
end;

function TRSCollectBox.IsOpen(): Boolean;
begin
  Result := Self.IsTitle('Collection Box');
end;

function TRSCollectBox.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;

procedure TRSCollectBox.Draw(Bitmap: TMufasaBitmap); override;
var
  i: Int32;
begin
  if not Self.IsOpen() then
    Exit;

  inherited(Bitmap);

  Bitmap.DrawButtons(Self.GetButtons());
  Bitmap.DrawBoxes(Self.GetSlots(), $00FFFF);
  for i := 0 to High(Self.GetSlots()) do
    Bitmap.DrawBoxes(Self.GetSlotBoxes(i), $00FFFF);
end;

(*
CollectBox.Setup
~~~~~~~~~~~~~~~~
.. pascal:: procedure CollectBox.Setup;

Initializes CollectBox variables.

.. note:: This is automatically called on the **CollectBox** variable.
*)
procedure TRSCollectBox.Setup(); override;
begin
  inherited();

  Self.Name := 'CollectBox';

  Self.ButtonColors += CTS1(2304814, 0);
  Self.FINDER_UPTEXT := ['Use Bank', 'Bank chest', 'Bank Bank', 'Bank booth', 'Banker'];
  Self.FINDER_OPTION := ['Use Bank', 'Bank Bank'];
end;

procedure TRSCollectBox.Setup(Mode: ERSClientMode); overload;
begin
  Self.Mode := Mode;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [InterfaceArea.X1];
        Self.Alignment.Right := [InterfaceArea.X2];
        Self.Alignment.Top := [InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 460;
        Self.Alignment.Center.MaxHeight := 247;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [InterfaceArea.X1];
        Self.Alignment.Right := [InterfaceArea.X2];
        Self.Alignment.Top := [InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 460;
        Self.Alignment.Center.MaxHeight := 247;
      end;
  end;
end;


(*
CollectBox.Close
~~~~~~~~~~~~~~~~
.. pascal:: function TRSCollectBox.Close(UseKeyboard: Boolean = False): Boolean;

Closes the CollectBox, Depending on `UseKeyboard` the function will either click the button
or press backspace.

Example
-------

 WriteLn CollectBox.Close;
*)
function TRSCollectBox.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := MainScreen.CloseInterface(PressEscape);
end;


function TRSCollectBox.HasItem(Slot: Int32): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  // black with tolerance for when item is transparent
  Result := SRL.CountColor(CTS1(1118740, 35), Self.GetSlotBox(Slot, ERSCollectSlotBoxes.ITEM)) > 0;
end;

function TRSCollectBox.GetSlotsWithItems(): TIntegerArray;
var
  i: Int32;
begin
  for i := 0 to High(Self.GetSlots()) do
    if Self.HasItem(i) then
      Result += i;
end;

function TRSCollectBox.HasChange(Slot: Int32): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  // black with tolerance for when item is transparent
  Result := SRL.CountColor(CTS1(1118740, 35), Self.GetSlotBox(Slot, ERSCollectSlotBoxes.CHANGE)) > 0;
end;

function TRSCollectBox.GetSlotsWithChange(): TIntegerArray;
var
  i: Int32;
begin
  for i := 0 to High(Self.GetSlots()) do
    if Self.HasChange(i) then
      Result += i;
end;

function TRSCollectBox.GetFullSlots: TIntegerArray;
begin
  Result := Self.GetSlotsWithItems().Combine(Self.GetSlotsWithChange());
  Result.ClearDuplicates();
  Result.Sort();
end;


function TRSCollectBox.FindItems(Items: TRSItemArray; out Slots: TIntegerArray): Boolean;
var
  Item: TRSItem;
begin
  if not Self.IsOpen() then
    Exit;

  for Item in Items do
    Slots += ItemFinder.Find(Item, Self.GetSlots());

  Result := Length(Slots) > 0;
end;

function TRSCollectBox.ContainsAny(Items: TRSItemArray): Boolean;
var
  Slots: TIntegerArray;
begin
  Result := Self.FindItems(Items, Slots);
end;


function TRSCollectBox.FindItem(Item: TRSItem; out Slots: TIntegerArray): Boolean;
begin
  Result := Self.FindItems([Item], Slots);
end;

function TRSCollectBox.FindItem(Item: TRSItem; out Slot: Int32): Boolean; overload;
var
  Slots: TIntegerArray;
begin
  Slots := ItemFinder.Find(Item, Self.GetSlots(), 1);

  if Length(Slots) > 0 then
  begin
    Slot := Slots[0];

    Result := True;
  end;
end;

function TRSCollectBox.ContainsItem(Item: TRSItem): Boolean;
var
  Slots: TIntegerArray;
begin
  Result := Self.FindItem(Item, Slots);
end;

function TRSCollectBox.CountItemStack(Item: TRSItem): Int32;
var
  Slot: Int32;
begin
  if Self.FindItem(Item, Slot) then
    Result := SRL.GetItemAmount(Self.GetSlotBox(Slot, ERSCollectSlotBoxes.ITEM));
end;


function TRSCollectBox.CollectSlot(Slot: Int32): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  if Self.HasItem(Slot) then
    Mouse.Click(Self.GetSlotBox(Slot, ERSCollectSlotBoxes.ITEM), MOUSE_LEFT);
  if Self.HasChange(Slot) then
    Mouse.Click(Self.GetSlotBox(Slot, ERSCollectSlotBoxes.CHANGE), MOUSE_LEFT);

  Result := WaitUntil((not Self.HasItem(Slot) and not Self.HasChange(Slot)), SRL.TruncatedGauss(50, 1500), 1000);
end;

function TRSCollectBox.CollectSlotToBank(Slot: Int32): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  if Self.HasItem(Slot) then
  begin
    Mouse.Move(Self.GetSlotBox(Slot, ERSCollectSlotBoxes.ITEM));
    if ChooseOption.Open then
      ChooseOption.Select('Bank', MOUSE_LEFT);
  end;
  if Self.HasChange(Slot) then
  begin
    Mouse.Move(Self.GetSlotBox(Slot, ERSCollectSlotBoxes.CHANGE));
    if ChooseOption.Open then
      ChooseOption.Select('Bank', MOUSE_LEFT);
  end;
  Result := WaitUntil((not Self.HasItem(Slot) and not Self.HasChange(Slot)), SRL.TruncatedGauss(50, 1500), 1000);
end;

function TRSCollectBox.MouseItem(Item: TRSItem): Boolean;
var
  Slot: Int32;
begin
  Result := Self.FindItem(Item, Slot);
  if Result then
    Mouse.Move(Self.GetSlotBox(Slot, ERSCollectSlotBoxes.ITEM));
end;

function TRSCollectBox.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
begin
  if Self.MouseItem(Item) then
  begin
    if Option <> '' then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);

      Result := True;
    end;
  end;
end;


function TRSCollectBox.CollectToInventory(): Boolean;
begin
  if Self.GetFullSlots() = [] then
    Exit;

  Result := Self.GetButton(ERSCollectButton.COLLECT_INVENTORY).Click();
end;

function TRSCollectBox.CollectToBank(): Boolean;
begin
  if Self.GetFullSlots() = [] then
    Exit;

  Result := Self.GetButton(ERSCollectButton.COLLECT_BANK).Click();
end;

(*
var CollectBox
~~~~~~~~~~~~~~
  Global CollectBox variable.
*)
var
  CollectBox: TRSCollectBox;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited();

  CollectBox.Setup(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited();

  CollectBox.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited(Bitmap);

  CollectBox.Draw(Bitmap);
end;


{$ENDIF} // INEEDBOT_UTILS_COLLECTBOX

