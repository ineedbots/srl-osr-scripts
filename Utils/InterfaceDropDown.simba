{
  Dropdowns store, from WaspLib
  Author: ineedbot
  Date: 2/27/2023
}

{$IFNDEF INEEDBOT_UTILS_INTERFACEDROPDOWN}
{$DEFINE INEEDBOT_UTILS_INTERFACEDROPDOWN}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

type
  TRSDropDown_Option = record
    Text: String;
    Bounds: TBox;
  end;

  TRSDropDown_OptionArray = array of TRSDropDown_Option;

  TRSDropDown = record
    Index: Int32;
    Bounds: TBox;
    Middle: TPoint;
    PParent: ^TRSInterface;
  end;

  TRSDropDownArray = array of TRSDropDown;

function TRSInterface.FindDropDown(Dimensions: TRSButtonDimensions): TRSDropDownArray;
  function FindArrow(B: TBox; Color: TCTS0Color; Dimensions: TRSButtonDimensions): Boolean;
  var
    TPA: TPointArray;
    ATPA: T2DPointArray;
    I, W, H: Int32;
    Boxes: TBoxArray;
  begin
    if SRL.FindColors(TPA, Color, B) > 0 then
      ATPA += TPA;

    ATPA := ATPA.Merge().Cluster(1);

    for TPA in ATPA do
    begin
      if Length(TPA) < 50 then
        Continue;

      B := TPA.Bounds();
      B.GetDimensions(W, H);

      for I := 0 to High(Dimensions) do
      begin
        if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
           ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and
            (TPA.Frameness() = 100) then
          Boxes += B;
      end;
    end;

    Result := Length(Boxes) = 1;
  end;

var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, W, H: Int32;
  B: TBox;
  Boxes: TBoxArray;
begin
  B := Self.Bounds();

  if SRL.FindColors(TPA, CTS0(4474438, 5), B) > 0 then
    ATPA += TPA;

  ATPA := ATPA.Merge().Cluster(1);

  for TPA in ATPA do
  begin
    if Length(TPA) < 50 then
      Continue;


    B := TPA.Bounds();
    B.GetDimensions(W, H);

    for I := 0 to High(Dimensions) do
    begin
      if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
         ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and
         (TPA.Frameness() > 91) and FindArrow(B, CTS0(65536, 1), [[16, 16]]) then
        Boxes += B;
    end;
  end;

  Boxes.SortByXY(10);

  SetLength(Result, Length(Boxes));
  for I := 0 to High(Boxes) do
  begin
    Result[I].Index := I;
    Result[I].Bounds := Boxes[I];
    Result[I].Middle := Boxes[I].Middle();
    Result[I].PParent := @Self;
  end;
end;

function TRSDropDown.GetText(Font: TFontSet = RS_FONT_PLAIN_11): String; constref;
begin
  Result := OCR.Recognize(Self.Bounds, TOCRColorRule.Create([2070783, 1939197]), Font);
end;

function TRSDropDown.FindText(constref Text: String; constref Font: TFontSet = RS_FONT_PLAIN_11): Boolean; constref;
begin
  Result := OCR.LocateText(Self.Bounds, Text, Font, TOCRAnyColorRule.Create(0), 1);
end;

function TRSDropDown.FindText(Text: TStringArray; out Found: String; constref Font: TFontSet = RS_FONT_PLAIN_11): Boolean; constref; overload;
var
  I: Int32;
begin
  for I := 0 to High(Text) do
    if Self.FindText(Text[I], Font) then
    begin
      Found := Text[I];
      Exit(True);
    end;
end;

function TRSDropDown.IsOpen(out TPA: TPointArray): Boolean; constref;
const
  COLOR: TCTS0Color := CTS0(4540231);
var
  BUp, BDown: TBox;
begin
  if Self = [] then
    Exit;

  BDown := Self.Bounds;
  BUp := BDown;

  BUp.Y1 := Self.PParent^.Bounds().Y1;
  BUp.Y2 := Self.Bounds.Y1 - 1;

  BDown.Y1 := Self.Bounds.Y2 + 1;
  BDown.Y2 := Self.PParent^.Bounds().Y2;

  if (SRL.FindColors(TPA, COLOR, BUp) = 0) and
     (SRL.FindColors(TPA, COLOR, BDown) = 0) then
    Exit;

  Result := (TPA <> []) and (TPA.Bounds().Height() > 18);
end;

function TRSDropDown.IsOpen(): Boolean; constref; overload;
var
  TPA: TPointArray;
begin
  Result := Self.IsOpen(TPA);
end;

function TRSDropDown.Open(out TPA: TPointArray): Boolean; constref;
begin
  if Self = [] then
    Exit;

  if Self.IsOpen(TPA) then
    Exit(True);

  Mouse.Click(Self.Bounds, MOUSE_LEFT);

  Result := WaitUntil(Self.IsOpen(TPA), 100, 2000);
end;

function TRSDropDown.Open(): Boolean; constref; overload;
var
  TPA: TPointArray;
begin
  Result := Self.Open(TPA);
end;

function TRSDropDown.Close(): Boolean; constref;
begin
  if Self = [] then
    Exit;

  if not Self.IsOpen() then
    Exit(True);

  Mouse.Click(Self.Bounds, MOUSE_LEFT);

  Result := WaitUntil(not Self.IsOpen(), 100, 2000);
end;

function TRSDropDown.GetOptions(constref Font: TFontSet = RS_FONT_PLAIN_11): TRSDropDown_OptionArray; constref;
var
  TPA: TPointArray;
  I: Int32;
  Box, B: TBox;
begin
  if Self.Open(TPA) then
  begin
    Box := TPA.Bounds();

    if (Bounds.Height() < 18) then
      Exit;

    Box.Y1 += 1;
    Box.X1 += 1;
    Box.X2 -= 17;

    SetLength(Result, Box.Height() div 15);
    for I := 0 to High(Result) do
    begin
      B := [Box.X1, Box.Y1 + (I * 15), Box.X2, Box.Y1 + (I * 15) + 15];
      if (B.Y2 > Box.Y2) then
        Exit;

      Result[I].Text := OCR.Recognize(B, TOCRColorRule.Create([4110334, 2070783]), Font);
      Result[I].Bounds := B;
    end;
  end;
end;

procedure TRSDropDown.Select(Option: TRSDropDown_Option; MouseAction: Int32 = MOUSE_LEFT); constref;
var
  From: TPoint;
  B: TBox;
  CustomMouse: TMouse;
begin
  B := Option.Bounds;
  B := B.Expand(-1);

  From.X := B.X1;
  From.Y := B.Y1 + (B.Height() div 3);

  CustomMouse := Mouse;
  CustomMouse.MissChance := 0;
  CustomMouse.IdleInterval := 0;
  CustomMouse.Move(SRL.RandomPointEx(From, B));

  if (MouseAction <> MOUSE_MOVE) then
    CustomMouse.Click(MouseAction);
end;

function TRSDropDown.Select(Text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True; constref Font: TFontSet = RS_FONT_PLAIN_11): Boolean; constref; overload;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  Choices := Self.GetOptions(Font);

  for I := 0 to High(Choices) do
    for J := 0 to High(Text) do
      if (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
      begin
        Self.Select(Choices[I], MouseAction);

        Exit(True);
      end;

  if CloseIfNotFound then
  begin
    WaitEx(500, 250);
    Self.Close();
  end;
end;

function TRSDropDown.Select(Text: String; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True; constref Font: TFontSet = RS_FONT_PLAIN_11): Boolean; constref; overload;
begin
  Result := Select([Text], MouseAction, CaseSensitive, CloseIfNotFound, Font);
end;

procedure TMufasaBitmap.DrawDropDowns(DropDowns: TRSDropDownArray);
var
  i: int32;
  Option: TRSDropDown_Option;
  OptionArray: TRSDropDown_OptionArray;
begin
  for i := 0 to High(DropDowns) do
  begin
    Self.SetFontName('Consolas');
    Self.SetFontSize(20);
    Self.SetFontAntialiasing(False);
    Self.DrawBox(DropDowns[i].Bounds, $FFFFFF);
    Self.DrawText(ToStr(DropDowns[i].index), DropDowns[i].Bounds, True, $00FF00);

    if DropDowns[i].IsOpen() then
    begin
      OptionArray := DropDowns[i].GetOptions();
      for Option in OptionArray do
        Self.DrawBox(Option.Bounds, $00FFFF);
    end;
  end;
end;

procedure Debug(DropDowns: TRSDropDownArray); overload;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient();
  BMP.DrawDropDowns(DropDowns);
  BMP.Debug();
  BMP.Free();
end;

{$ENDIF} // INEEDBOT_UTILS_INTERFACEDROPDOWN

