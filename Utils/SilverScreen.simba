{
  Util silverscreen, from SRL-F
  Author: ineedbot
  Date: 2/26/2023
}

{$IFNDEF INEEDBOT_UTILS_SILVERSCREEN}
{$DEFINE INEEDBOT_UTILS_SILVERSCREEN}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

type
  ERSSilverScreenButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL
  );

  TRSSilverScreen = type TRSTitledInteface;

procedure TRSSilverScreen.Setup(); override;
begin
  inherited();

  Self.Name := 'Silver Screen';
end;

procedure TRSSilverScreen.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited(Mode);

  Self.Alignment.Left := [InterfaceArea.X1];
  Self.Alignment.Right := [InterfaceArea.X2];
  Self.Alignment.Top := [InterfaceArea.Y1];
  Self.Alignment.Bottom := [InterfaceArea.Y2];
  Self.Alignment.Center.MaxWidth := 505;
  Self.Alignment.Center.MaxHeight := 323;
end;

function TRSSilverScreen.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[37,37]]);
end;

function TRSSilverScreen.GetButton(Button: ERSSilverScreenButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSSilverScreenButton)) then
    Result := Buttons[Button];
end;

function TRSSilverScreen.GetItemBoxes(): TBoxArray;
var Jewellery: TBoxArray;
begin
  Jewellery := Grid(3, 4, 79, 55, [5, 1], [Self.X1() + 10, Self.Y1() + 40]);
  Result := Jewellery.Combine(Grid(2, 4, 109, 55, [5, 1], [Self.X2() - 233, Self.Y1() + 40]));
end;

(*
TRSSilverScreen.IsOpen
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.IsOpen: Boolean;

Returns true if the silver crafting screen is visible.

Example
-------

  if SilverScreen.IsOpen() then
    SilverScreen.ClickItem('Unstrung symbol', -1);
*)
function TRSSilverScreen.IsOpen(): Boolean; overload;
begin
  try
    Result := Self.GetButtons()[0].Visible();
  except
  end;
end;

(*
TRSSilverScreen.IsOpen(WaitTime: Int32)
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.IsOpen(WaitTime: Int32): Boolean;

Returns true if the silver crafting screen is visible within "WaitTime".

Example
-------

  if SilverScreen.IsOpen(2000) then
    Writeln('Silver screen has been opened within 2 seconds');
*)
function TRSSilverScreen.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

(*
TRSSilverScreen.Close
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.Close(PressEscape: Boolean = False): Boolean;

Closes the silver crafting screen.  Depending on `PressEscape` the function will
either click the button or press backspace.

Example
-------

  if SilverScreen.Close() then
    Writeln('Closed the silver crafting screen');
*)
function TRSSilverScreen.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

(*
TRSSilverScreen.SetQuantity
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.SetQuantity(Amount: Int32): Boolean;

Sets the interface quantity to the set amount.  Acceptable parameters
include 1,5,10,X (custom amount) and -1 for 'All'.

Example
-------

  SilverScreen.SetQuantity(-1);
*)
function TRSSilverScreen.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = 2070783;
var
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  if Amount = -1 then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);
    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;

(*
TRSSilverScreen.CanCraftItem
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.CanCraftItem(Item: TRSItem; out ItemBox: TBox): Boolean;

Returns if the given TRSItem can be crafted.  If so then a TBox of the disired item
is returned.

Example
-------

  if SilverScreen.CanCraftItem('Topaz bracelet', ItmBox) then
    Mouse.Move(ItmBox);
*)
function TRSSilverScreen.CanCraftItem(Item: TRSItem; out ItemBox: TBox): Boolean;
const
  ORANGE_COLOR = 2070783;
  SELECTED_COLOR = $FFFFFF;
var
  Boxes: TBoxArray;
  TPA: TPointArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then Exit;
  Boxes := Self.GetItemBoxes();

  Indices := ItemFinder.Find(Item, Boxes, 1);
  if Indices.Len() < 1 then Exit;

  ItemBox := Boxes[Indices[0]];
  Result := (SRL.FindColors(TPA, ORANGE_COLOR, ItemBox) > 0) or
            (SRL.FindColors(TPA, SELECTED_COLOR, ItemBox) > 0);
end;

(*
TRSSilverScreen.IsItemHighlighted
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.IsItemHighlighted(Item: TRSItem): Boolean;

Returns if the given TRSItem is highlighted on the silver crafting interface.

Example
-------

  if SilverScreen.IsItemHighlighted('Unstrun symbol') then
    Keyboard.PressKey(VK_SPACE);
*)
function TRSSilverScreen.IsItemHighlighted(Item: TRSItem): Boolean;
var
  HighlightCol: TCTS1Color := CTS1(4807018, 2);
  Box: TBox;
  TPA: TPointArray;
begin
  if not Self.IsOpen() then Exit;
  if not Self.CanCraftItem(Item, Box) then Exit;
  Result := SRL.FindColors(TPA, HighlightCol, Box) > 0;
end;

(*
TRSSilverScreen.CraftItem
~~~~~~~~~~~~
.. pascal:: function TRSSilverScreen.CraftItem(Item: TRSItem; Quantity: Int32): Boolean;

Sets the desired quantity then crafts on the given TRSItem on the silver screen interface.
If the item is highlighted (previously crafted) then the spacebar is used,
if not then the interface item is clicked.  Returns false if 'Item' is not found on the interface.

Example
-------

  if SilverScreen.CraftItem('Jade amulet (u)', 10) then
    Writeln('Beginning crafting...');
*)
function TRSSilverScreen.CraftItem(Item: TRSItem; Quantity: Int32): Boolean;
var
  Box: TBox;
begin
  if not Self.CanCraftItem(Item, Box) then Exit;

  Result := Self.SetQuantity(Quantity);
  if Result then
    if Self.IsItemHighlighted(Item) then
      Keyboard.PressKey(VK_SPACE)
    else
      Mouse.Click(Box, MOUSE_LEFT);
end;

procedure TRSSilverScreen.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(GetItemBoxes(), $00FFFF);
end;

var
  SilverScreen: TRSSilverScreen;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited();

  SilverScreen.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited();

  SilverScreen.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited(Bitmap);

  SilverScreen.Draw(Bitmap);
end;

{$ENDIF} // INEEDBOT_UTILS_SILVERSCREEN

