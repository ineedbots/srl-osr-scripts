{
  Util smithscreen, from SRL-F
  Author: ineedbot
  Date: 2/26/2023
}

{$IFNDEF INEEDBOT_UTILS_SMITHSCREEN}
{$DEFINE INEEDBOT_UTILS_SMITHSCREEN}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

type
  ERSSmithScreenButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL
  );

  TRSSmithScreen = type TRSTitledInteface;

procedure TRSSmithScreen.Setup(); override;
begin
  inherited();

  Self.Name := 'Smithing Screen';
end;

procedure TRSSmithScreen.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited(Mode);

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [InterfaceArea.X1];
        Self.Alignment.Right := [InterfaceArea.X2];
        Self.Alignment.Top := [InterfaceArea.Y1];
        Self.Alignment.Bottom := [InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [InterfaceArea.X1];
        Self.Alignment.Right := [InterfaceArea.X2];
        Self.Alignment.Top := [InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 500;
        Self.Alignment.Center.MaxHeight := 320;
      end;
  end;
end;

function TRSSmithScreen.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[37,37]]);
end;

function TRSSmithScreen.GetButton(Button: ERSSmithScreenButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSSmithScreenButton)) then
    Result := Buttons[Button];
end;

function TRSSmithScreen.GetItemBoxes(): TBoxArray;
var
  LastCols: TBoxArray;
begin
  Result   := Grid(4, 5, 80, 42, [0, 13], [Self.X1() + 10, Self.Y1() + 36]);
  LastCols := Grid(2, 5, 58, 42, [6, 13], [Self.X2() - 169, Self.Y1() + 36]);
  Result   += LastCols;
end;

(*
TRSSmithScreen.IsOpen
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.IsOpen: Boolean;

Returns true if the smithing screen is visible.

Example
-------

  if SmithScreen.IsOpen() then
    SmithScreen.ClickItem('Mithril platebody', -1);
*)
function TRSSmithScreen.IsOpen(): Boolean; overload;
begin
  // TODO better
  Result := Self.GetButton(ERSSmithScreenButton.QUANTITY_1).Visible();
end;

(*
TRSSmithScreen.IsOpen(WaitTime: Int32)
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.IsOpen(WaitTime: Int32): Boolean;

Returns true if the smithing screen is visible within "WaitTime".

Example
-------

  if SmithScreen.IsOpen(2000) then
    Writeln('Smithing screen has been opened within 2 seconds');
*)
function TRSSmithScreen.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

(*
TRSSmithScreen.Close
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.Close(PressEscape: Boolean = False): Boolean;

Closes the smithing screen.  Depending on `PressEscape` the function will
either click the button or press backspace.

Example
-------

  if SmithScreen.Close() then
    Writeln('Closed the smithing screen');
*)
function TRSSmithScreen.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

(*
TRSSmithScreen.SetQuantity
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.SetQuantity(Amount: Int32): Boolean;

Sets the interface quantity to the set amount.  Acceptable parameters
include 1,5,10,X (custom amount) and -1 for 'All'.

Example
-------

  SmithScreen.SetQuantity(-1);
*)
function TRSSmithScreen.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = 2070783;
var
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  if Amount = -1 then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);
    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;

(*
TRSSmithScreen.CanSmithItem
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.CanSmithItem(Item: TRSItem; out ItemBox: TBox): Boolean;

Returns if the given TRSItem can be smithed.  If so then a TBox of the disired item
is returned.

Example
-------

  if SmithScreen.CanSmithItem('Iron warhammer', ItmBox) then
    Mouse.Move(ItmBox);
*)
function TRSSmithScreen.CanSmithItem(Item: TRSItem; out ItemBox: TBox): Boolean;
const
  WHITE_COLOR = $FFFFFF;
var
  Boxes: TBoxArray;
  TPA: TPointArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then Exit;
  Boxes := Self.GetItemBoxes();
  Indices := ItemFinder.Find(Item, Boxes);
  if Indices.Len() < 1 then Exit;

  ItemBox := Boxes[Indices[0]];
  Result := SRL.FindColors(TPA, WHITE_COLOR, ItemBox) > 0;
end;

(*
TRSSmithScreen.IsItemHighlighted
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.IsItemHighlighted(Item: TRSItem): Boolean;

Returns if the given TRSItem is highlighted on the smithing interface.

Example
-------

  if SmithScreen.IsItemHighlighted('Steel platebody') then
    Keyboard.PressKey(VK_SPACE);
*)
function TRSSmithScreen.IsItemHighlighted(Item: TRSItem): Boolean;
var
  HighlightCol: TCTS1Color := CTS1(4807018, 2);
  Box: TBox;
  TPA: TPointArray;
begin
  if not Self.IsOpen() then Exit;
  if not Self.CanSmithItem(Item, Box) then Exit;
  Result := SRL.FindColors(TPA, HighlightCol, Box) > 0;
end;

(*
TRSSmithScreen.SmithItem
~~~~~~~~~~~~
.. pascal:: function TRSSmithScreen.SmithItem(Item: TRSItem; Quantity: Int32): Boolean;

Sets the desired quantity then smiths the given TRSItem on the smithing interface.
If the item is highlighted (previously smithed) then the spacebar is used,
if not then the interface item is clicked.  Returns false if 'Item' is not found on the interface.

Example
-------

  if SmithScreen.SmithItem('Adamant platelegs', 5) then
    Writeln('Beginning smithing...');
*)
function TRSSmithScreen.SmithItem(Item: TRSItem; Quantity: Int32): Boolean;
var
  Box: TBox;
begin
  if not Self.CanSmithItem(Item, Box) then Exit;

  Result := Self.SetQuantity(Quantity);
  if Result then
    if Self.IsItemHighlighted(Item) then
      Keyboard.PressKey(VK_SPACE)
    else
      Mouse.Click(Box, MOUSE_LEFT);
end;

procedure TRSSmithScreen.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.GetItemBoxes(), $00FFFF);
end;

var
  SmithScreen: TRSSmithScreen;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited();

  SmithScreen.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited();

  SmithScreen.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited(Bitmap);

  SmithScreen.Draw(Bitmap);
end;

{$ENDIF} // INEEDBOT_UTILS_SMITHSCREEN

