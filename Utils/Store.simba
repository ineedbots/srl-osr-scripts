{
  Util store, from SRL-F
  Author: ineedbot
  Date: 2/26/2023
}

{$IFNDEF INEEDBOT_UTILS_STORE}
{$DEFINE INEEDBOT_UTILS_STORE}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

type
  TRSStore = type TRSTitledInteface;

procedure TRSStore.Setup; override;
begin
  inherited();

  Self.Name := 'Store';
end;

procedure TRSStore.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited(Mode);

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [InterfaceArea.X1];
        Self.Alignment.Right := [InterfaceArea.X2];
        Self.Alignment.Top := [InterfaceArea.Y1];
        Self.Alignment.Bottom := [InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 487;
        Self.Alignment.Center.MaxHeight := 300;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [InterfaceArea.X1];
        Self.Alignment.Right := [InterfaceArea.X2];
        Self.Alignment.Top := [InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 487;
        Self.Alignment.Center.MaxHeight := 300;
      end;
  end;
end;

function TRSStore.GetItemBoxes: TBoxArray;
begin
  Result := Grid(8, 5, 35, 32, [12, 16], [Self.X1() + 61, Self.Y1() + 40])
end;

function TRSStore.IsOpen: Boolean; overload;
var
  B: TBox;
  Txt: String;
begin
  B := Self.Bounds();
  B.X1 += 50;
  B.Y1 := B.Y2 - 26;
  B.X2 -= 50;
  B.Y2 -= 9;
  B.LimitTo(Self.Bounds());

  Txt := OCR.Recognize(B, TOCRThresholdRule.Create(15), RS_FONT_PLAIN_12);
  Result := 'shop' in Txt;
end;

function TRSStore.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSStore.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSStore.FindItem(Item: TRSItem; out Box: TBox): Boolean; overload;
var
  Boxes: TBoxArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then Exit;
  Boxes := Self.GetItemBoxes();

  Indices := ItemFinder.Find(Item, Boxes, 1);
  if Indices.Len() < 1 then Exit;

  Result := True;
  Box := Boxes[Indices[0]];
end;

function TRSStore.CountItemStack(Item: TRSItem): Int32;
var
  Box: TBox;
begin
  if Self.FindItem(Item, Box) then
    Result := SRL.GetItemAmount(Box);
end;

function TRSStore.HoverItem(Item: TRSItem): Boolean;
var
  Box: TBox;
begin
  Result := Self.FindItem(Item, Box);
  if Result then
    Mouse.Move(Box);
end;

function TRSStore.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
begin
  if Self.HoverItem(Item) then
  begin
    if (Option <> '') then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);

      Result := True;
    end;
  end;
end;

procedure TRSStore.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(GetItemBoxes(), $00FFFF);
end;

var
  Store: TRSStore;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited();

  Store.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited();

  Store.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited();

  Store.Draw(Bitmap);
end;

{$ENDIF} // INEEDBOT_UTILS_STORE

