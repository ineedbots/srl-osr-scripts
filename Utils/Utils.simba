{
  utils
  Author: ineedbot
  Date: 10/12/2021

  Shared funcs between all scripts
}

{$IFNDEF INEEDBOT_UTILS}
{$DEFINE INEEDBOT_UTILS}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}
{$SCOPEDENUMS ON}

{$include_once Types.simba}
{$include_once Antiban.simba}

{$include_once Bank.simba}
{$include_once DepositBox.simba}
{$include_once MainScreen.simba}
{$include_once Minimap.simba}
{$include_once Magic.simba}

{$include_once Clan.simba}
{$include_once Store.simba}
{$include_once SmithScreen.simba}
{$include_once CraftScreen.simba}
{$include_once SilverScreen.simba}
{$include_once InterfaceDropDown.simba}
{$include_once XPDrop.simba}
{$include_once TanScreen.simba}
{$include_once XPBarSetup.simba}
{$include_once CollectBox.simba}
{$include_once Achievements.simba}
{$include_once Options.simba}

{
  Debug to a SRL debug image
}
function TRSClient.Image(): TMufasaBitmap; override;
begin
{$IFDEF SRL_USE_REMOTEINPUT}
  Result := inherited();
  exit();
{$ENDIF}

  if Script.DebugImage = nil then
    Script.DebugImage.FromClient();

  Result := Script.DebugImage;
end;

{
  Debug to a SRL debug image
}
procedure TMufasaBitmap.Clear(); constref; override;
begin
  if Self = Script.DebugImage then
  begin
    Script.DebugImage.Debug();
    DisplayDebugImgWindow(Script.DebugImage.getWidth(), Script.DebugImage.getHeight());
    Script.DebugImage.FromClient();
  end
  else
    inherited();
end;

{
  Debug to a SRL debug image
}
procedure TMufasaBitmap.Clear(Area: TBox); constref; override;
begin
  if Self = Script.DebugImage then
  begin
    Script.DebugImage.Debug();
    DisplayDebugImgWindow(Script.DebugImage.getWidth(), Script.DebugImage.getHeight());
    Script.DebugImage.FromClient(Area);
  end
  else
    inherited(Area);
end;

{
  Constref
}
procedure TMufasaBitmap.DrawNewButtons(Buttons: TRSButtonArray); constref;
var
  a: TMufasaBitmap;
begin
  a := Self;
  a.DrawButtons(Buttons);
end;

{
  color
}
procedure TMufasaBitmap.DrawButtons(Buttons: TRSButtonArray); override;
var
  I, C: Int32;
begin
  for I := 0 to High(Buttons) do
  begin
    Self.SetFontSize(20);
    Self.SetFontAntialiasing(False);
    Self.DrawBox(Buttons[I].Bounds, $00FFFF);
    C := $0000FF;
    if Buttons[I].Enabled() then
      C := $00FFFF;
    Self.DrawText(ToStr(Buttons[I].Index), Buttons[I].Bounds, True, C);
  end;
end;

{
  Logs to the console.
}
procedure TScript.WriteMsg(Message: Variant; IsDebug: Boolean = False; Stamp: Boolean = True; Clear: Boolean = False);
var
  Msg: String;
begin
  if Stamp then
  begin
    Msg := SRL.TimeStamp() + ':[' + Self.ScriptName + ']:';

    if IsDebug then
      Msg += '[Debug]:';

    Msg += ' ' + ToStr(Message);
  end
  else
    Msg := ToStr(Message);

  if not Self.Debug and IsDebug then
    exit();

  // pump to console
  if Clear then
    ClearDebug();

  WriteLn(Msg);
end;

{
  Sets the status of the script
}
procedure TScript.SetStatus(S: String);
begin
  if Self.Status = S then
    exit();

  Self.Status := S;

  if Self.Debug then
    Self.WriteMsg(S, True);
end;

{
  Ends the script.
}
procedure TScript.Stop(Reason: String = '');
begin
  Self.WriteMsg(Reason);
  Self.SetStatus('Stopping... ' + Reason);
  Self.StopReason := Reason;
  Self.Running := False;

  Self.TakeScreenshot(Self.ScriptName, Reason + '_');
end;

{
  Draws the stuff onto the screen
}
function TScript.CanDraw(): Boolean;
begin
  if not Self.DrawCounter.IsFinished() or not Self.Drawing then
    exit();

  Self.DrawCounter.Restart();

  Result := True;
end;

{
  Does the proggy report to the console window
}
function TScript.CanReportConsole(): Boolean;
begin
  if not Self.ReportCounter.IsFinished() or not Self.Reporting then
    exit();

  Self.ReportCounter.Restart();

  Result := True;
end;

{
  Returns true if under attack
}
function TScript.CheckUnderAttack(): Boolean;
var
  HP: Int32;
begin
  HP := Minimap.GetHPLevel();

  if (HP < Self.HPAmount) and Self.IsUnderAttack() then
  begin
    Self.SetStatus('Under attack!');
    Self.WriteMsg('UNDER ATTACK!');

    Result := True;
  end;

  Self.HPAmount := HP;
end;

{
  Are we underattack? Checks for a hpbar near our char
}
function TScript.IsUnderAttack(): Boolean;
var
  HPBars: TRSHPBarArray;
  OurBox: TBox;
begin
  OurBox := MainScreen.GetPlayerBox().Expand(MainScreen.ConvertDistance(8));

  if Self.Debug and Self.Drawing then
  begin
    RSClient.Image().DrawBox(OurBox, clRed);
    RSClient.Image().DrawCross(OurBox.Middle(), 5, clRed);
  end;

  HPBars := MainScreen.FindHPBars(OurBox);

  Result := Length(HPBars) > 0;
end;

{
  check if we need to end the script
}
procedure TScript.CheckRunTime();
begin
  if GetTimeRunning() > Self.ShutdownTime then
    Self.Stop('Completed the runtime');
end;

{
  update our mousespeed, when we get tired, slow it down
}
procedure TScript.UpdateMouseSpeed();
begin
  Mouse.Speed := Self.BaseMouseSpeed - Round(Self.MaxTiredMouseSpeed * (1 - (Self.AntiBanEnergy.EnergyLevel(Self.Antiban) / 100)));
end;

{
  Does general checks and does antiban.
}
procedure TScript.DoGeneralChecks();
begin
  Self.CheckRunTime();
  Self.UpdateMouseSpeed();
end;

{
  Flight's screen shooter!! takes a screen shot!
}
procedure TScript.TakeScreenshot(Dir, PreName: String);
var
  i: Int32;
begin
  // flight's screen shotter!
  CreateDirectory(                       'Screenshots/');
  CreateDirectory(                       'Screenshots/ineedbot/');
  CreateDirectory(                       'Screenshots/ineedbot/' + Dir + '/');
  i := Length(GetFiles(                  'Screenshots/ineedbot/' + Dir + '/', 'png'));
  SaveScreenshot(                        'Screenshots/ineedbot/' + Dir + '/' + PreName + IntToStr(i) + '.png');

  Self.WriteMsg('Saving screenshot: ' + ('Screenshots/ineedbot/' + Dir + '/' + PreName + IntToStr(i) + '.png'));
end;

{
  From Flight's AIOFisher
  Pauses the run time
}
procedure PauseRunTime(Task: PBreakTask);
var
  T: PBreakTask;
begin
  Script.TrueRunTime.Pause();
  T := Task;
end;

{
  From Flight's AIOFisher

  Stuff to do after break is over
}
procedure ResumeRunTime(Task: PBreakTask);
var
  T: PBreakTask;
begin
  if GetTimeRunning() > Script.ShutdownTime then
    Script.Stop('Completed the runtime');

  Script.TrueRunTime.Resume();
  T := Task;

  // restart activity watcher
  Script.Activity.Countdown.Restart();
  Script.Activity.NoXPCount := 0;
end;

{
  Should we press the keyboard?
}
function TScript.ShouldPressKeyboard(): Boolean;
begin
  if Self.KeyboardMenuButtons then
    Result := (SRL.TruncatedGauss(0.0, 1.0) < 0.5)
  else
    Result := False;
end;

{
  From SRL-F
}
function TSRL.PercentShift(Area: TBox; WaitTime: Int32): Int32;
var
  tLen,sLen: Int32;
begin
  tLen := length(TPAFromBox(Area));
  sLen := SRL.GetPixelShift(Area, WaitTime);
  Result := Round((sLen/tLen)*100);
end;

{
  Converts heightmap height to mm2ms height
}
function TRSWalker.HeightMapHeightToMM2MSHeight(HeightMapHeight: Int32): Int32;
begin
  Result := HeightMapHeight div 4;
end;

{
  Gets height from heightmap
}
function TRSWalker.GetHeight(Pos: TPoint = [-1, -1]): Int32;
var
  Col: TRGB32;
begin
  if Script.HeightMapBMP = nil then
    exit();

  if Pos.X = -1 then
    Pos := Self.GetMyPos();

  Col := TRGB32(Script.HeightMapBMP.GetPixel(Pos.X, Pos.Y));

  Result := Self.HeightMapHeightToMM2MSHeight(Col.R);
end;

{
  Fix a problem where the walk event could change PlayerPoint
}
function TRSWalker.WalkFinalStep(PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32): Boolean; override;
var
  MinimapPoint: TPoint;
begin
  if (Self.OnWalkEvent <> nil) then
  begin
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
    PlayerPoint := Self.GetMyPos();
  end;

  if (Self.OnWalkEventEx <> nil) then
  begin
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);
    PlayerPoint := Self.GetMyPos();
  end;

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center().DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, 0);
  if Result then
    Self.WaitMoving(WorldPoint, WaitUntilDistance);
end;

{
  Fix a problem where the walk event could change PlayerPoint
}
function TRSWalker.WalkStep(PlayerPoint, WorldPoint: TPoint): Boolean; override;
var
  MinimapPoint: TPoint;
  WaitUntilDistance: Int32;
begin
  if (Self.OnWalkEvent <> nil) then
  begin
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
    PlayerPoint := Self.GetMyPos();
  end;

  if (Self.OnWalkEventEx <> nil) then
  begin
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);
    PlayerPoint := Self.GetMyPos();
  end;

  if not Self.Enabled then
    Exit(True);

  PlayerPoint := Self.GetMyPos();
  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center().DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, Self.ClickRandomness);

  if Result then
  begin
    if (Random() < 0.15) then // 15% chance of randomness else mean
      WaitUntilDistance := Random(Distance(Minimap.Center(), MinimapPoint))
    else
      WaitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center(), MinimapPoint) + 10);

    Self.WaitMoving(WorldPoint, WaitUntilDistance);
  end
end;

{
  Fixes event problems, please fix srl.
}
procedure TRSWalker.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32); override;
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
  awct: Int64;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));

  // initial timeout needs to be longer, as we might not have started walking yet.
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetMyPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    Position.Previous := Position.Current;
    Position.Current := Self.GetMyPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    if (Self.OnWalkingEvent <> nil) then
    begin
      Self.OnWalkingEvent(@Self, Position.Current, Destination);  
      Position.Current := Self.GetMyPos();
    end;

    if (Self.AdaptiveWalk) and (GetTickCount() > awct) then
    begin
      Self.AdaptiveWalkCheck(Position.Current);
      awct := GetTickCount() + 1000;
    end;

    if Self.FancyMouse then
      Self.DoMouseAhead(Position.Current);

    if not Self.Enabled then
      Break;

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

{
  Makes it so it works with items with non left click use
}
function Inventory.SetSelectedSlot(Slot: Int32): Boolean; override;
var
  Selected: Int32;
begin
  Selected := Self.GetSelectedSlot();
  if (Selected = Slot) then
    Exit(True);

  if (Selected > -1) then
    Mouse.Click(Self.GetSlotBox(Selected), MOUSE_LEFT);
  if (Slot > -1) then
  begin
    Mouse.Move(Self.GetSlotBox(Slot));

    if MainScreen.IsUpText('Use') and (Random() < 0.95) then
      Mouse.Click(MOUSE_LEFT)
    else
      ChooseOption.Select('Use');
  end;

  Result := WaitUntil(Self.GetSelectedSlot() = Slot, 50, SRL.TruncatedGauss(1000, 2000));
end;

{
  Stops ALWAYS right clicking
}
function TRSInventory.ClickSlot(Slot: Int32; Option: String = ''): Boolean; override;
begin
  if Self.HoverSlot(Slot) then
  begin
    if (Option <> '') and (not MainScreen.IsUpText(Option) or (Random() > 0.95)) then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);

      Result := True;
    end;
  end;
end;

{
  Stop the meme of closing the bank, add using keyboard!
}
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
var
  Key: Int32 = -1;
begin
  if Bank.IsOpen(False) then
  begin
    if (Tab = ERSGameTab.INVENTORY) then
      exit(True);

    exit(False);
  end;

  if BankPin.IsOpen() then
    exit(False);

  if Self.GetCurrentTab() = Tab then
    exit(True);

  if Script.ShouldPressKeyboard() then
  begin
    case Tab of
      ERSGameTab.COMBAT: Key := GAMETAB_KEY_COMBAT;
      ERSGameTab.STATS: Key := GAMETAB_KEY_STATS;
      ERSGameTab.QUESTS: Key := GAMETAB_KEY_QUESTS;
      ERSGameTab.INVENTORY: Key := GAMETAB_KEY_INVENTORY;
      ERSGameTab.EQUIPMENT: Key := GAMETAB_KEY_EQUIPMENT;
      ERSGameTab.PRAYER: Key := GAMETAB_KEY_PRAYER;
      ERSGameTab.MAGIC: Key := GAMETAB_KEY_MAGIC;
      ERSGameTab.FRIENDS: Key := GAMETAB_KEY_FRIENDS;
      ERSGameTab.ACCOUNT: Key := GAMETAB_KEY_ACCOUNT;
      ERSGameTab.LOGOUT: Key := GAMETAB_KEY_LOGOUT;
      ERSGameTab.OPTIONS: Key := GAMETAB_KEY_OPTIONS;
      ERSGameTab.EMOTES: Key := GAMETAB_KEY_EMOTES;
      ERSGameTab.CLAN: Key := GAMETAB_KEY_CLAN;
      ERSGameTab.MUSIC: Key := GAMETAB_KEY_MUSIC;
      else Key := -1;
    end;
  end;

  if Key <> -1 then
  begin
    Keyboard.PressKey(Key);
    Wait(500, 1000, wdLeft);
  end;

  Result := inherited();
end;

{
  Prevents array out of bounds
}
function TRSMake.Select(Index: Int32; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; override;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.GetItemButtons();

  if Index < Length(Buttons) then
    Result := Self.SelectHelper(Buttons[Index], Quantity, UseKeyboard);
end;

{
  Flight's fix for xpbar!
}
function TRSXPBar.IsOpen(): Boolean; override;

  function FindBorder(): Boolean;
  const
    COLOR_BORDER = $233038;
  var C: Int32;
  begin
    C := SRL.CountColor(COLOR_BORDER, Self.Bounds());
    case Self.Width() of   // With / without progress bar
{Smallest} 119: Result := (C = 292) or (C = 175);
{Medium}   129: Result := (C = 312) or (C = 185);
{Large}    140: Result := (C = 334) or (C = 196);
    end;
  end;

  function UpdateLocation(): Boolean;
  var
    Location: ERSXPBarLocation;
    Size: ERSXPBarSize;
  begin
    for Location in ERSXPBarLocation do
      for Size in ERSXPBarSize do
      begin
        Self.Cache := [];
        Self.Alignment := Self.Alignments[Location][Size];
        if FindBorder() then
        begin
          case Size of
            ERSXPBarSize.SMALL:  Self.Font := RS_FONT_PLAIN_11;
            ERSXPBarSize.MEDIUM: Self.Font := RS_FONT_PLAIN_12;
            ERSXPBarSize.LARGE:  Self.Font := RS_FONT_BOLD_12;
          end;

          Exit(True);
        end;
      end;
  end;

begin
  Result := FindBorder() or UpdateLocation();
end;

{
  The overlapping area of the two boxes
}
function TBox.OverlappingArea(B: TBox): TBox;
begin
  Result := [Max(Self.X1, B.X1), Max(Self.Y1, B.Y1), Min(Self.X2, B.X2), Min(Self.Y2, B.Y2)];
end;

{
  Takes the TPA thats furthest from the point
}
function T2DPointArray.FurthestFrom(From: TPoint): TPointArray; constref;
var
  TPA: TPointArray;
  Found: Boolean;
  Dist, BestDist: Double;
begin
  for TPA in Self do
  begin
    Dist := TPA.Mean().DistanceTo(From);

    if not Found or (Dist > BestDist) then
    begin
      Found := True;
      BestDist := Dist;
      Result := TPA;
    end;
  end;
end;

{
  Takes the TPA thats nearest to the point
}
function T2DPointArray.NearestTo(From: TPoint): TPointArray; constref;
var
  TPA: TPointArray;
  Found: Boolean;
  Dist, BestDist: Double;
begin
  for TPA in Self do
  begin
    Dist := TPA.Mean().DistanceTo(From);

    if not Found or (Dist < BestDist) then
    begin
      Found := True;
      BestDist := Dist;
      Result := TPA;
    end;
  end;
end;

{
  Shift clicks the box
}
function TMouse.ShiftClick(B: TBox = [-1, -1, -1, -1]): Boolean;
begin
  if B.X1 = -1 then
    B := Box(Self.Position(), 1, 1);

  IsKeyDown(VK_SHIFT); // Clear cache

  try
    if not IsKeyDown(VK_SHIFT) then
      KeyDown(VK_SHIFT);

    Wait(100, 250);

    Mouse.Click(B, MOUSE_LEFT);

    Wait(0, 250, wdLeft);
    Result := True;
  finally
    if IsKeyDown(VK_SHIFT) then
      KeyUp(VK_SHIFT);
  end;
end;

{
  Shift clicks the slot
}
function TRSInventory.ShiftClick(Slot: Int32): Boolean;
begin
  if not Self.IsSlotUsed(Slot) then
    exit();
    
  Result := Mouse.ShiftClick(Self.GetSlotBox(Slot));
end;

{
  tries to read the xp bar, makes sure interfaces are not covering it
}
function TRSXPBar.ReadXPBar(): Int32;
begin
  if MainScreen.AnyInterfaceOpen() then
    exit(-1);
    
  if not Self.Open() then
    exit(-1);
    
  Result := Self.Read();
end;

{
  Returns true when the xpbar changes
}
function TRSXPBar.WaitChange(C: Int32 = -1; Tim: Int32 = 1000; Interval: Int32 = -1): Boolean;
var
  T: TCountDown;
  Temp: Int32;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  if C = -1 then
    C := Self.ReadXPBar();

  T.Init(Tim);
  while RSClient.IsLoggedIn() do
  begin
    if T.IsFinished() then
      break;

    Temp := Self.ReadXPBar();
    if Temp = -1 then
      break;

    if Temp <> C then
      exit(True);

    Wait(Interval);
  end;
end;

{
  Returns locations of players
}
function TRSWalker.GetPlayerLocations(OurTile: TPoint = [-1, -1]; CompAng: Double = -1; Dist: Double = -1): TPointArray;
var
  i: Int32;
  MMC: TPoint;
begin
  if OurTile.X = -1 then
    OurTile := Self.GetMyPos();

  if CompAng = -1 then
    CompAng := Minimap.GetCompassAngle(False);

  Result := Minimap.GetDots(ERSMinimapDot.PLAYER);
  MMC := Minimap.Center();

  if Dist <> -1 then
    Result := Result.FilterDist(0, Dist, MMC.X, MMC.Y);

  // -2, -2 offset because the minimap dotfinder returns the top left coord of the 4x4 dot, we want it centered

  for i := High(Result) downto 0 do
  begin
    // check the false positive at the center
    if (Result[i].Offset(2, 2).DistanceTo(MMC) < 3) and
      (SRL.CountColor(CTS1($FEFEFE, 75), Box(MMC.Offset(-1, -1), 1, 1)) <= 4) then
    begin
      Result.Del(i);
      continue;
    end;

    // convert from minimap pixel coord to rsw coord
    Result[i] := Self.MMToWorldEx(OurTile, Result[i], CompAng);
    Result[i] := Result[i].Offset(2, 2);
  end;
end;

{
  Returns locations of items
}
function TRSWalker.GetItemLocations(OurTile: TPoint = [-1, -1]; CompAng: Double = -1; Dist: Double = -1): TPointArray;
var
  i: Int32;
  MMC: TPoint;
begin
  if OurTile.X = -1 then
    OurTile := Self.GetMyPos();

  if CompAng = -1 then
    CompAng := Minimap.GetCompassAngle(False);

  Result := Minimap.GetDots(ERSMinimapDot.ITEM);
  MMC := Minimap.Center();

  if Dist <> -1 then
    Result := Result.FilterDist(0, Dist, MMC.X, MMC.Y);

  // check if we are over an item!
  if (SRL.CountColor(CTS1(255, 75), Box(MMC.Offset(-1, -1), 1, 1)) > 0) then
    Result += MMC.Offset(-2, -2);

  for i := 0 to High(Result) do
  begin
    Result[i] := Self.MMToWorldEx(OurTile, Result[i], CompAng);
    Result[i] := Result[i].Offset(2, 2);
  end;
end;

{
  Returns locations of NPCs
}
function TRSWalker.GetNPCLocations(OurTile: TPoint = [-1, -1]; CompAng: Double = -1; Dist: Double = -1): TPointArray;
var
  i: Int32;
  MMC: TPoint;
begin
  if OurTile.X = -1 then
    OurTile := Self.GetMyPos();

  if CompAng = -1 then
    CompAng := Minimap.GetCompassAngle(False);

  Result := Minimap.GetDots(ERSMinimapDot.NPC);
  MMC := Minimap.Center();

  if Dist <> -1 then
    Result := Result.FilterDist(0, Dist, MMC.X, MMC.Y);

  // check if we are over an npc
  if (SRL.CountColor(CTS1($02FCFC, 75), Box(MMC.Offset(-1, -1), 1, 1)) > 0) then
    Result += MMC.Offset(-2, -2);

  for i := 0 to High(Result) do
  begin
    Result[i] := Self.MMToWorldEx(OurTile, Result[i], CompAng);
    Result[i] := Result[i].Offset(2, 2);
  end;
end;

{
  Converts a MM point to world
}
function TRSWalker.MMToWorldEx(Me, Loc: TPoint; Ang: Double = -1): TPoint;
begin
  if Ang = -1 then
    Ang := Minimap.GetCompassAngle(False);

  Result := Me + (Loc - Minimap.Center());
  Result := Result.Rotate(-Ang, Me);
end;

{
  The original, but allows an array as input
}
function TRSChooseOption.HasOption(Text: TStringArray; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  if Self.Open() then
  begin
    Wait(0, 1000, wdLeft);

    Choices := Self.GetOptions();

    for I := 0 to High(Choices) do
      for J := 0 to High(Text) do
        if (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        begin
          exit(True);
        end;

    if CloseIfNotFound then
    begin
      WaitEx(500, 250);

      Self.Close();
    end;
  end;
end;

{
  Is the string found in the string array?
}
function String.IsInString(A: TStringArray): Boolean;
var
  I: Int32;
begin
  for I := 0 to High(A) do
      if (A[I] in Self) or (A[I] = Self) then
        exit(True);
end;

{
  Returns true when the inventory changed
}
function TRSInventory.WaitChange(C: Int32 = -1; WaitTime: Int32 = 1000; Interval: Int32 = -1): Boolean;
var
  T: TCountDown;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  if C = -1 then
    C := Self.Count();

  T.Init(WaitTime);
  while RSClient.IsLoggedIn() do
  begin
    if T.IsFinished() then
      break;

    if C <> Self.Count() then
      exit(True);

    Wait(Interval);
  end;
end;

{
  From SRL-F;
  Fixes a problem where fixed mode is off
}
function TRSInventory.GetSlotBoxes(): TBoxArray; override;
begin
  Result := Grid(4, 7, 34, 34, [8, 2], [Self.X1() + 13, Self.Y1() + 9]);
end;

{
  Useful for while loops when need to clear an array
}
function TIntegerArray.Clear(): Boolean;
begin
  SetLength(Self, 0);
  exit(True);
end;

{
  Is the point in range of any thing in the array?
}
function TPointArray.InRangeOfAny(PT: TPoint; Dist: Double): Int32;
var
  i: Int32;
begin
  Result := -1;

  for i := Low(Self) to High(Self) do
  begin
    if Self[i].DistanceTo(PT) <= Dist then
      exit(i);
  end;
end;

{
  Randomizes points who is near the point
}
procedure TPointArray.RandomizeNearDists(PT: TPoint; Dist: Double; Chance: Double = 0.5);
var
  i, h: Int32;
begin
  for i := Low(Self) to High(Self) do
  begin
    for h := Low(Self) to High(Self) do
    begin
      if i = h then
        continue;

      if Abs(Self[i].DistanceTo(PT) - Self[h].DistanceTo(PT)) > Dist then
        continue;

      if Random() > Chance then
        continue;

      Swap(Self[i], Self[h]);
    end;
  end;
end;

{
  From upstream srl
}
procedure TMouse.DragTo(X, Y: Int32; Button: Int32 = MOUSE_LEFT); override;
begin
  Self.Hold(Button);
  Wait(50,100,wdLeft); //Wait for Click to be registered before moving the mouse (important).
  Self.Move(X, Y);
  Self.Release(Button);
  Wait(50,100,wdLeft);
end;

{
  From SRL-F
}
function TRSLogout.OpenWorldSwitcher(): Boolean;
begin
  if not Self.Open() then Exit(False);
  if Self.IsWorldSwitcherOpen() then Exit(True);

  if Self.GetButton(ERSLogoutButton.WORLD_SWITCHER).Click() and WaitUntil(Self.IsWorldSwitcherOpen(), 500, 5000 + SRL.NormalRange(-2000, 2000)) then
    Exit(True);
end;

{
  From SRL-F
}
function TRSLogout.GetCurrentWorld(): Int32;
begin
  Self.OpenWorldSwitcher();
  Result := OCR.RecognizeNumber([Self.Bounds().X1+17,Self.Bounds().Y1,Self.Bounds().X1+150,Self.Bounds().Y1+20], TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12);
end;

{
  From SRL-F
}
function TRSLogout.SwitchWorlds(World: Int32; Force: Boolean = False; Up: Boolean = False): Boolean;
var
  B: TBox;
  Min: Int32=0;
  Max: Int32=100;
  Found, WentUp: Boolean;
  ListBox: TBox := [Self.Bounds().X1+17,Self.Bounds().Y1+36,Self.Bounds().X1+42,Self.Bounds().Y2-38];
  VisibleWorld: Int32;
  Timeout: TCountDown;
begin
  if (Self.GetCurrentWorld() = World) then Exit(True);

  // Read the first visible members world from the world list
  VisibleWorld := OCR.RecognizeNumber(ListBox, TOCRColorRule.Create([61680,14737632]), RS_FONT_PLAIN_12);
  Mouse.Move(Self.Bounds().Expand(-5,-36), True);

  Timeout.Init(15000);

  While InRange(Self.GetScrollPosition(), Min, Max) and not Timeout.IsFinished() do
  begin
    if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12,  TOCRColorRule.Create([61680,14737632]), B) = 1 then
    begin
      Found := True;
      Break;
    end;

    if Force then
    begin
      Mouse.Scroll(SRL.NormalRange(1,3), Up);
    end
    else
    begin
      if World > VisibleWorld then
      begin
        Min := Self.GetScrollPosition();
        Mouse.Scroll(SRL.NormalRange(1,3), True);
        WentUp := True;
      end else
      begin
        Max := Self.GetScrollPosition();
        Mouse.Scroll(SRL.NormalRange(1,3), False);
        WentUp := False;
      end;
    end;
  end;

  Result := Found;

  if Result then
  begin
    Mouse.Click(B, MOUSE_LEFT);
    WaitUntil((Self.GetCurrentWorld() = World), 75, 15000);
  end
  else if not Force then // assumes worlds are ordered; it might not be; try the other dir
    Result := Self.SwitchWorlds(World, True, not WentUp);
end;

{
  Updates the zoom level
}
procedure TScript.UpdateZoomLevel();
begin
  if not Options.Open() and (MM2MS.ZoomLevel = -1) then
  begin
    if MainScreen.AnyInterfaceOpen() then
    begin
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      Wait(750, 1250);
    end;
  end;

  if Options.Open() then
    MM2MS.ZoomLevel := Options.GetZoomLevel();
end;

{
  Taken from SRL5

  Returns true if we did the click
}
function TMouse.DidClick(Red: Boolean = True; Time: Integer = 200): Boolean;
var
  CountDown: TCountDown;
  w, h, R, Y: Integer;
  Pos: TPoint;
  B: TBox;
  Once: Boolean;
begin
  Pos := Self.Position();
  GetClientDimensions(w, h);

  B := IntToBox(Pos.X - 15, Pos.Y - 15, Pos.X + 15, Pos.Y + 15);
  B.LimitTo(IntToBox(0, 0, w - 1, h - 1));

  CountDown.Init(Time);
  while not CountDown.IsFinished() or not Once do
  begin
    Once := True;

    R := CountColorTolerance(255, B, 2);
    Y := CountColorTolerance(65535, B, 2);

    if Red then
    begin
      // if Y > 8 then
      //   exit();

      if R > 20 then
        exit(True);
    end
    else
    begin
      if R > 5 then
        exit();

      if Y > 35 then
        exit(True);
    end;
  end;
end;

{
  From SRL-t, fixes scroll position
}
procedure TRSInterface.SetScrollPosition(Value: Int32); override;
var
  ScrollBar: TRSScrollBar;
  Countdown: TCountdown;
begin
  Value := EnsureRange(Value, 0, 100);

  ScrollBar := Self.GetScrollBar();

  if not ScrollBar.IsVisible() or not Self.CanScroll() then
    Exit;

  if ScrollBar.Position = Value then
    Exit;

  Countdown.Init(15000);

  if (ScrollBar.Position < Value) then
  begin
    while ScrollBar.IsVisible() and (ScrollBar.Position < Value) and not Countdown.IsFinished() do
    begin
      Mouse.Scroll(ScrollBar.SliderRegion, Random(1, 3), True);

      ScrollBar := Self.GetScrollBar();
    end;
    Exit;
  end;

  while ScrollBar.IsVisible() and (ScrollBar.Position > Value) and not Countdown.IsFinished() do
  begin
    Mouse.Scroll(ScrollBar.SliderRegion, Random(1, 3), False);

    ScrollBar := Self.GetScrollBar();
  end;
end;

{
  From SRL-t
}
(*
Make.FindHint
~~~~~~~~~~~~~
.. pascal:: function TRSMake.FindHint(): TPointArray;

Returns the hint tooltip has a TPointArray

Example
-------

  Debug(Make.FindHint());
*)
function TRSMake.FindHint(): TPointArray;
const
  HINT_COLOR = $A0FFFF;
begin
  FindColors(Result, HINT_COLOR, Self.Bounds());
end;

{
  From SRL-t
}
(*
Make.GetFreeSpace
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMake.GetFreeSpace(): TPointArray;

Get a TPointArray of the chatbox that does not have a single point in any of the make item buttons.

Example
-------

  Debug(Make.GetFreeSpace());
*)
function TRSMake.GetFreeSpace(): TPointArray;
var
  b: TBox;
  tmp: TPointArray;
begin
  Result := Self.Bounds().ToRectangle().ToTPA().Connect();
  Result.Fill();

  for b in Self.GetItemButtons().ToBoxes() do
    tmp += Result.FilterBox(b.Expand(1));

  Result := ClearTPAFromTPA(Result, tmp);
end;

{
  Fix from srl-t
}
function TRSMake.SetQuantity(Amount: Int32): Boolean; override;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = $203040;
var
  Bounds: TBox;
  P: TPoint;
  HintPoint: TPoint;
  Hint: TBox;
  FreeSpace: TPointArray;
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  Bounds := Self.Bounds();
  Hint := Self.FindHint().Bounds().Expand(1); //Expand(1) because of the border
  P := [Bounds.X2 - 193, Bounds.Y1 + 44];

  HintPoint := [Hint.X2, Hint.Y1];
  if (HintPoint.X > p.X) and (HintPoint.Y < p.Y) then
  begin
    FreeSpace := Self.GetFreeSpace();
    P := FreeSpace[Random(0, High(FreeSpace))];
    Mouse.Move(p);
    WaitUntil(Self.FindHint() = [], 100, 2000);
  end;

  if Amount = MAKE_QUANTITY_ALL then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetQuantityButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);

    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;

{
  Some fix from srl-t
}
function TRSMake.Select(Item: String; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; override;
var
  Buttons: TRSButtonArray;
  TPA: TPointArray;
  I: Int32;
begin
  Buttons := Self.GetItemButtons();

  for I := 0 to High(Self.Items) do
  begin
    if (Self.Items[I].Item = Item) then
    begin
      Result := Self.SelectHelper(Buttons[Self.Items[I].Index], Quantity, UseKeyboard);
      Exit;
    end;
  end;

  for I := 0 to High(Buttons) do
  begin
    Mouse.Move(Buttons[I].Bounds);
    if not WaitUntil((TPA := Self.FindHint()) <> [], SRL.TruncatedGauss(50, 1500), 4000) then
      Continue;

    if SameText(OCR.Recognize(TPA.Bounds(), TOCRColorRule.Create([0]), RS_FONT_PLAIN_12), Item) then
    begin
      Self.Items += [Item, Buttons[I].Index];

      Result := Self.SelectHelper(Buttons[I], Quantity, UseKeyboard);
      Exit;
    end;

    Wait(0, 1000, wdLeft);
  end;
end;

{
  Returns the velocity vector
}
function TScript.GetVelocity(Position: TPoint): TDoubleArray;
var
  TimeDelta: Int32;
  PosDelta: TPoint;
begin
  // calcuate move velocity
  TimeDelta := GetTimeRunning() - Self.LastPosTime;

  if TimeDelta < 100 then
  begin
    // too fast! use last result
    exit(Self.LastVel);
  end;

  PosDelta := Position - Self.LastPos;

  SetLength(Result, 2);
  Result[0] := PosDelta.X / (TimeDelta / 1000);
  Result[1] := PosDelta.Y / (TimeDelta / 1000);

  Self.LastPos := Position;
  Self.LastPosTime := GetTimeRunning();

  // prob junk...
  if TimeDelta > 2500 then
  begin
    Result[0] := 0;
    Result[1] := 0;
  end;

  Self.LastVel := Result;
end;

{
  Converts Walker velocity to MS velocity
}
function TScript.WalkerVelToMSVel(Vel: TDoubleArray): TPoint;
begin
  // velocity is minimap pixels per second

  // convert from MM pixels to tiles
  Vel[0] /= 4;
  Vel[1] /= 4;

  // convert to pixels on mainscreen at normal zoom
  Vel[0] *= 40;
  Vel[1] *= 40;

  // get zoomed
  Result := Point(MainScreen.ConvertDistance(Round(Abs(Vel[0]))),
                MainScreen.ConvertDistance(Round(Abs(Vel[1]))));

  // fix the abs
  if Vel[0] > 0 then
    Result.X := -Result.X;

  if Vel[1] > 0 then
    Result.Y := -Result.Y;

  // rotate it according to compass
  Result := Result.Rotate(Minimap.GetCompassAngle(False), Point(0, 0));
end;

{
  Converts Walker velocity to MM velocity
}
function TScript.WalkerVelToMMVel(Vel: TDoubleArray): TPoint;
begin
  Result := Point(Round(Vel[0]), Round(Vel[1]));

  // fix the abs
  if Vel[0] > 0 then
    Result.X := -Result.X;

  if Vel[1] > 0 then
    Result.Y := -Result.Y;

  // rotate it according to compass
  Result := Result.Rotate(Minimap.GetCompassAngle(False), Point(0, 0));
end;

{
  Returns a predicted offset vector from where the box will be when the mouse finally arrives to it
}
function TScript.GetOffsetForVel(TarBox: TBox; Velocity: TPoint): TPoint;
var
  Dist, TimeForMouse: Double;
begin
  // get the mouse distance to the target
  Dist := TarBox.Middle().DistanceTo(Mouse.Position());

  // predict how long it will take for the mouse to reach the target
  // TODO complete, its some function of Dist, Speed and possibly some constant
  TimeForMouse := 0.25;

  // now apply the velocity and the time to the result
  Result := Point(
    Round(Velocity.X * TimeForMouse),
    Round(Velocity.Y * TimeForMouse)
  );
end;

{
  While the mouse looks for uptext
}
procedure WhileMouseMovesLookForUpText(Sender: PMouse; var X, Y: Double; var Done: Boolean);
var
  UpText: String;
begin
  if Script.OldMouseMovingCallback <> nil then
  begin
    Script.OldMouseMovingCallback(Sender, X, Y, Done);

    if Done then
      exit();
  end;

  if Length(Script.MouseLooksForUpText) <= 0 then
    exit();

  if Script.MouseLooksForUpTextCloseDist > 0 then
  begin
    if MainScreen.ConvertDistance(Round(Sender^.Position().DistanceTo(Script.MouseLooksForUpTextClosePt))) > MainScreen.ConvertDistance(Script.MouseLooksForUpTextCloseDist) then
      exit();
  end;

  X := X;
  Y := Y;

  UpText := MainScreen.GetUpText();
  if UpText.IsInString(Script.MouseLooksForUpText) then
    Done := True;
end;

{
  examines a random item in our inv
}
function TScript.ExamineRandomItem(): Boolean;
var
  i: Int32;
begin
  while RSClient.IsLoggedIn() and (Inventory.Count() > 0) do
  begin
    i := Random(Inventory.LOW_SLOT, Inventory.HIGH_SLOT);

    if not Inventory.IsSlotUsed(i) then
      continue;

    Result := Inventory.ClickSlot(i, 'Examine');
    break;
  end;
end;

{
  Toggles player report option, mainly for pushing chat when no items in inv
}
function TScript.TogglePlayerReportOption(): Boolean;
begin
  Mouse.Move(ChatButtons.GetButton(ERSChatButton.REPORT).Bounds);
  Result := ChooseOption.Select('Toggle player option');
end;

{
  If the point is in any of the areas
}
function T2DPointArray.PointInAnyArea(PT: TPoint): Int32;
var
  i: Int32;
begin       
  Result := -1;
  for i := Low(Self) to High(Self) do
  begin
    if SRL.PointInPoly(PT, Self[i]) then
      exit(i);
  end;
end;

// prayer filters (when it comes out)
// grandexchange

{$ENDIF} // INEEDBOT_UTILS
