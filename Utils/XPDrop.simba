{
  xpdrop, from wasplib
  Author: ineedbot
  Date: 2/27/2023
}

{$IFNDEF INEEDBOT_UTILS_XPDROP}
{$DEFINE INEEDBOT_UTILS_XPDROP}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$F-}

{$include_once Types.simba}
{$include_once Utils.simba}

(*
const XP_COLORS
~~~~~~~~~~~~~~~
XP_COLORS is the constant holding all possible XPDrop colors.
.. pascal::

  XP_COLORS: TIntegerArray = [$FFFFFF, $FFC8C8, $FF00FF, $C8FFC8, $64FF64, $40FFFF, $1F98FF, $C8C8FF];
*)
const
  XP_COLORS: TIntegerArray = [
    $FFFFFF, //white
    $FFC8C8, //lilac
    $FF00FF, //cyan
    $C8FFC8, //jade
    $64FF64, //lime
    $40FFFF, //yellow
    $1F98FF, //orange
    $C8C8FF  //pink
  ];

type
  TRSXPDrop = record(TRSInterface)
    IsSetup: Boolean;
    Color: Int32;
    Alignments: array[ERSXPBarLocation] of TRSInterfaceAlignment;
  end;

(*
XPDrop.Setup
~~~~~~~~~~~~
.. pascal:: procedure TRSXPDrop.Setup;

Setups the XPDrop.

.. note:: This is automatically called on the **XPDrop** variable.
*)
procedure TRSXPDrop.Setup(); override;
begin
  inherited();

  Self.Name := 'XPDrop';

  with Self.Alignments[ERSXPBarLocation.LEFT] do
  begin
    Left := [InterfaceArea.X1, 16];
    Right := [InterfaceArea.X1, 36];
    Top := [InterfaceArea.Y1, 51];
    Bottom := [InterfaceArea.Y1, 128];
  end;

  with Self.Alignments[ERSXPBarLocation.MIDDLE] do
  begin
    Left   := [InterfaceArea.X1, 14];
    Right  := [InterfaceArea.X2];
    Top    := [InterfaceArea.Y1, 51];
    Bottom := [InterfaceArea.Y1, 128];
    Center.MaxWidth  := 20;
  end;

  with Self.Alignments[ERSXPBarLocation.RIGHT] do
  begin
    Left   := [InterfaceArea.X2, -22];
    Right  := [InterfaceArea.X2, -2];
    Top    := [InterfaceArea.Y1, 28];
    Bottom := [InterfaceArea.Y1, 133];
  end;

end;

procedure TRSXPDrop.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited(Mode);

  // Default location
  Self.Alignment := Self.Alignments[ERSXPBarLocation.RIGHT];
end;

(*
XPDrop.IsOpen
~~~~~~~~~~~~~
.. pascal:: function TRSXPDrop.IsOpen: Boolean;

Returns true if the XP Drops are on.
*)
function TRSXPDrop.IsOpen(): Boolean;
var
  TPA: TPointArray;
begin
  if FindColors(TPA, 11592943, Minimap.GetXPCircle().Bounds()) then
    Result := Length(Minimap.GetXPCircle().Filter(TPA)) > 50;

  if Result and not Self.IsSetup and XPBar.IsOpen() then
  begin
    if (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.LEFT][ERSXPBarSize.SMALL]) or
       (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.LEFT][ERSXPBarSize.MEDIUM]) or
       (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.LEFT][ERSXPBarSize.LARGE]) then
      Self.Alignment := Self.Alignments[ERSXPBarLocation.LEFT]

    else if (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.MIDDLE][ERSXPBarSize.SMALL]) or
            (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.MIDDLE][ERSXPBarSize.MEDIUM]) or
            (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.MIDDLE][ERSXPBarSize.LARGE]) then
      Self.Alignment := Self.Alignments[ERSXPBarLocation.MIDDLE]

    else if (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.SMALL]) or
            (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.MEDIUM]) or
            (XPBar.Alignment = XPBar.Alignments[ERSXPBarLocation.RIGHT][ERSXPBarSize.LARGE]) then
      Self.Alignment := Self.Alignments[ERSXPBarLocation.RIGHT];
    Self.IsSetup := True;
  end;
end;

(*
XPDrop.Open
~~~~~~~~~~~
.. pascal:: function TRSXPDrop.Open: Boolean;

Attempts to open the XP Drops if they are closed.
*)
function TRSXPDrop.Open(): Boolean;
begin
  if Self.IsOpen() then
    Exit(True);

  Mouse.Click(Minimap.GetXPCircle(), MOUSE_LEFT);

  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(100, 1000), 3000);
end;

(*
XPDrop._Find
~~~~~~~~~~~~
.. pascal:: function TRSXPDrop._Find: Boolean;

Internal function to find XPDrops.
Searches for all colors in XP_COLORS within the current XPDrops location.
*)
function TRSXPDrop._Find(): Boolean;
var
  i, ColorCount: Int32;
begin
  if Self.Color = 0 then
  begin
    for i := 0 to High(XP_COLORS) do
    begin
      ColorCount := SRL.CountColor(XP_COLORS[i], Self.Bounds());
      if (ColorCount > 0) and (ColorCount < 150) then
      begin
        Self.Color := XP_Colors[i];
        Exit(True);
      end
      else if i = High(XP_COLORS) then
        Self.Color := 0; //not found, reset!
    end;
  end
  else
  begin
    ColorCount := SRL.CountColor(Self.Color, Self.Bounds());
    Exit((ColorCount > 0) and (ColorCount < 150));
  end;
end;

(*
XPDrop.UpdateLocation
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSXPDrop.UpdateLocation: Boolean;

Internal function to update XPDrops location.
*)
function TRSXPDrop.UpdateLocation(): Boolean;
var
  Location: ERSXPBarLocation;
begin
  if Self.IsSetup then
    Exit;

  for Location in ERSXPBarLocation do
  begin
    Self.Cache := [];
    Self.Alignment := Self.Alignments[Location];
    if Self._Find() then
    begin
      Self.IsSetup := True;
      Exit(True);
    end;
  end;
end;

(*
XPDrop.FindDrop
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSXPDrop.FindDrop: Boolean;

Returns true if a XPDrop is found.

Example
-------

 WriteLn XPDrop.FindDrop;
*)
function TRSXPDrop.FindDrop(): Boolean;
begin
  Result :=  (Self.IsSetup and Self._Find()) or Self.UpdateLocation();
end;

(*
XPDrop.WaitDrop
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSXPDrop.WaitDrop: Boolean;

Waits **WaitTime** until an XPDrop is found.

Example
-------

 WriteLn XPDrop.WaitDrop(1000);
*)
function TRSXPDrop.WaitDrop(WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindDrop(), Interval, WaitTime);
end;

procedure TRSXPDrop.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited(Bitmap);

  with Minimap.GetXPCircle() do
    Bitmap.DrawCircle([X, Y], Radius, $00FFFF);

  if Self.IsSetup then
    Bitmap.DrawBox(Self.Bounds(), $00FFFF)
  else
    Self.FindDrop();
end;

(*
var XPDrop
~~~~~~~~
  Global XPDrop variable.
*)
var
  XPDrop: TRSXPDrop;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited();

  XPDrop.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited();

  XPDrop.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited(Bitmap);

  XPDrop.Draw(Bitmap);
end;

{$ENDIF} // INEEDBOT_UTILS_XPDROP

