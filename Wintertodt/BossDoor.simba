{
  Wintertodt
  Author: ineedbot
  Date: 7/1/2022

  Boss door funcs
}

{$IFNDEF INEEDBOT_WINTERTODT_BOSSDOOR}
{$DEFINE INEEDBOT_WINTERTODT_BOSSDOOR}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Find melting pot tile
}
function TBot.FindEntraceTile(OurPos: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.EnterTile);
end;

{
  Gets the search box
}
function TBot.GetEntraceSearchBox(TileRect: TRectangle): TBox;
begin
  Result := TileRect.Expand(Round(TileRect.Radius() * Self.EntranceColor.RadiusExpand)).Bounds();
end;

{
  Finds color
}
function TBot.FindEntraceColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.EntranceColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.EntranceColor.FilterSize), __GT__);
end;

{
  Returns true if the door is visible, B is the bounds of the door on the screen
}
function TBot.FindEnterDoor(OurTile: TPoint; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  // get the colors and the tile boxes
  TileRect := Self.FindEntraceTile(OurTile);

  B := Self.GetEntraceSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindEntraceColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.EntranceColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the bank, WasClicked true if clicked it
}
function TBot.ClickEnterDoor(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  if not Self.FindEnterDoor(OurTile, B) then
  begin
    Script.WriteMsg('ClickEnterDoor: not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickEnterDoor: Found, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickEnterDoor: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.DoorEnterUpText;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(Self.DoorEnterUpText, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickEnterDoor: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickEnterDoor: Good uptext, clicking', True);

  // uptext is the option we want
  if MainScreen.IsUpText(Self.DoorEnterOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.DoorEnterOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickEnterDoor: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickEnterDoor: Clicked', True);
end;

{
  While we walk to the enter door
}
procedure WalkingToEnterDoor(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    if Bot.ClickEnterDoor(WasClicked, Position, MSVel) and WasClicked then
    begin
      Script.WriteMsg('Clicked the enter door while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end
  else if Random() < 0.65 then
    Bot.EatFood(1); // eat food while walking

  // make sure outside the arena
  if Bot.GetWinterTodtEnergyPerc() <> -1 then
    Walker^.Enabled := False;
end;

{
  Walks to the enter door, return true if we clicked it early
}
function TBot.GoToEntrance(Force: Boolean = False; DoClick: Boolean = True): Boolean;
var
  Walked: Boolean;
  PathIdx: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to enter door....', True);
  OurPos := Self.RSW.GetMyPos();

  if Force or (OurPos.DistanceTo(Self.EnterTile) > 50) or not Self.FindEnterDoor(OurPos, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());

    Script.SetStatus('Going to enter door...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if DoClick then
      Self.RSW.OnWalkingEvent := @WalkingToEnterDoor;
    try
      PathIdx := SRL.TruncatedGauss(Low(Self.ToEntranceDoorPaths), High(Self.ToEntranceDoorPaths));

      if OurPos.DistanceTo(Self.ToEntranceDoorPaths[PathIdx][Low(Self.ToEntranceDoorPaths[PathIdx])]) <
        OurPos.DistanceTo(Self.ToEntranceDoorPaths[PathIdx][High(Self.ToEntranceDoorPaths[PathIdx])]) then
        Walked := Self.RSW.WalkPath(Self.ToEntranceDoorPaths[PathIdx], 8)
      else
      begin
        Walked := True;
        Self.RSW.Enabled := True;
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Self.EnterTile.Random(-8, 8, True), 0);
    except
      Walked := False;
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to enter door!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Goes inside the arena
}
function TBot.GoInsideBossArea(): Boolean;
var
  CountDown: TCountDown;
  WasClicked: Boolean;
begin
  if Self.GetWinterTodtEnergyPerc() <> -1 then
  begin
    Script.WriteMsg('Already inside of arena', True);
    exit();
  end;

  if (Self.ClickEnterDoor(WasClicked) and WasClicked) or
    Self.GoToEntrance() or
    (Self.ClickEnterDoor(WasClicked) and WasClicked) or
    Self.GoToEntrance(True) or
    (Self.ClickEnterDoor(WasClicked) and WasClicked) then
  begin
    Self.AfterActionAntiBan(True);

    // wait for the boss bar
    CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
    while RSClient.IsLoggedIn() do
    begin
      if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
      begin
        Script.WriteMsg('GoInsideBossArea: waiting for movment', True);
        CountDown.Restart();
      end;

      if CountDown.IsFinished() then
      begin
        Script.WriteMsg('GoInsideBossArea timeed out', True);
        break;
      end;

      if Self.GetWinterTodtEnergyPerc() <> -1 then
      begin
        Script.WriteMsg('GoInsideBossArea done', True);
        Wait(1000, 2000, wdLeft);
        Result := True;
        break;
      end;

      Self.DoMainLoopStuff('Going inside arena', False);
    end;
  end;
end;

{
  Find melting pot tile
}
function TBot.FindExitTile(OurPos: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.ExitTile);
end;

{
  Gets the search box
}
function TBot.GetExitSearchBox(TileRect: TRectangle): TBox;
begin
  Result := TileRect.Expand(Round(TileRect.Radius() * Self.ExitColor.RadiusExpand)).Bounds();
end;

{
  Finds color
}
function TBot.FindExitColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.ExitColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.ExitColor.FilterSize), __GT__);
end;

{
  Returns true if the door is visible, B is the bounds of the door on the screen
}
function TBot.FindExitDoor(OurTile: TPoint; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  // get the colors and the tile boxes
  TileRect := Self.FindExitTile(OurTile);

  B := Self.GetExitSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindExitColor(B);

  if Length(ATPA) <= 0 then
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.ExitColor.NoColorTileExpand)) // couldnt find color... use the fixd tile
  else
    B := ATPA.Biggest().Bounds();
end;

{
  Returns true if found the bank, WasClicked true if clicked it
}
function TBot.ClickExitDoor(out WasClicked: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  if not Self.FindExitDoor(OurTile, B) then
  begin
    Script.WriteMsg('ClickExitDoor: not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickExitDoor: Found, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickExitDoor: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := Self.DoorExitUpText;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

   if not MainScreen.IsUpText(Self.DoorExitUpText, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickExitDoor: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickExitDoor: Good uptext, clicking', True);

  if MainScreen.IsUpText(Self.DoorExitOptions, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := MainScreen.DidRedClick();
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Self.DoorExitOptions);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickExitDoor: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickExitDoor: Clicked', True);
end;

{
  While we walk to the door
}
procedure WalkingToExitDoor(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    if not Bot.WaitingForDeadBoss or (Bot.GetWinterTodtEnergyPerc() = 0) then
    begin
      // make the mouse fast, because we are moving, its harder to keep up with objs
      S := Mouse.Speed;
      Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

      MSVel := Script.WalkerVelToMSVel(Velocity);

      if Bot.ClickExitDoor(WasClicked, Position, MSVel) and WasClicked then
      begin
        Script.WriteMsg('Clicked the exit door while moving, nice!');
        Walker^.Enabled := False;
      end;

      // reset the mosue speed back
      Mouse.Speed := S;
    end;
  end
  else if Random() < 0.65 then
    Bot.EatFood(1); // eat food while walking

  // make sure outside inside arena
  if Bot.GetWinterTodtEnergyPerc() = -1 then
    Walker^.Enabled := False;
end;

{
  Walks to the door, return true if we clicked it early
}
function TBot.GoToExit(Force: Boolean = False; DoClick: Boolean = True): Boolean;
var
  Walked: Boolean;
  PathIdx: Int32;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
  B: TBox;
begin
  Script.WriteMsg('Going to exit door....', True);
  OurPos := Self.RSW.GetMyPos();

  if Force or (OurPos.DistanceTo(Self.ExitTile) > 50) or not Self.FindEnterDoor(OurPos, B) then
  begin
    // mainscreen bank fix
    if Self.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      
    Script.SetStatus('Going to exit door...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if DoClick then
      Self.RSW.OnWalkingEvent := @WalkingToExitDoor;
    try
      PathIdx := SRL.TruncatedGauss(Low(Self.ToExitDoorPaths), High(Self.ToExitDoorPaths));

      if OurPos.DistanceTo(Self.ToExitDoorPaths[PathIdx][Low(Self.ToExitDoorPaths[PathIdx])]) <
        OurPos.DistanceTo(Self.ToExitDoorPaths[PathIdx][High(Self.ToExitDoorPaths[PathIdx])]) then
        Walked := Self.RSW.WalkPath(Self.ToExitDoorPaths[PathIdx], 8)
      else
      begin
        Walked := True;
        Self.RSW.Enabled := True;
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Self.ExitTile.Random(-8, 8, True), 0);
    except
      Walked := False;
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to exit door!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  Exits the arena
}
function TBot.GoOutsideBossArea(WaitForDeadBoss: Boolean = False): Boolean;
var
  CountDown: TCountDown;
  OurPos: TPoint = [-1, -1];
  WasClicked: Boolean;
begin
  if Self.GetWinterTodtEnergyPerc() = -1 then
  begin
    Script.WriteMsg('Already outside of arena', True);
    exit();
  end;

  if WaitForDeadBoss then
  begin
    Self.WaitingForDeadBoss := True;
    WasClicked := Self.GoToExit();
    Self.WaitingForDeadBoss := False;

    // on mass worlds, we always assume it'll die soon
    while RSClient.IsLoggedIn() and (Self.GetWinterTodtEnergyPerc() > 0) do
      Self.DoMainLoopStuff('Waiting for boss to die', True);
  end;

  if WasClicked or
    (Self.ClickExitDoor(WasClicked) and WasClicked) or
    Self.GoToExit() or
    (Self.ClickExitDoor(WasClicked) and WasClicked) or
    Self.GoToExit(True) or
    (Self.ClickExitDoor(WasClicked) and WasClicked) then
  begin      
    Self.AfterActionAntiBan(True);

    // wait to exit
    CountDown.Init(SRL.SkewedRand(5000, 4000, 6000));
    while RSClient.IsLoggedIn() do
    begin
      if Minimap.HasFlag() and Minimap.IsPlayerMoving() then
      begin
        CountDown.Restart();
        Script.WriteMsg('GoOutsideBossArea: waitting for movement', True);
        OurPos := Point(-1, -1);
      end
      else if OurPos = Point(-1, -1) then
      begin
        OurPos := Self.RSW.GetMyPos();       
        Script.WriteMsg('GoOutsideBossArea: stopped moving', True);
      end;

      if CountDown.IsFinished() then
      begin     
        Script.WriteMsg('GoOutsideBossArea: timed out', True);
        break;
      end;

      if Chat.IsOpen() and Chat.FindOption(Self.ExitChatOptions[0], [CHAT_COLOR_BLACK]) then
      begin
        Script.WriteMsg('GoOutsideBossArea: selecting option', True);
        Chat.ClickOption(Self.ExitChatOptions[0], Script.ShouldPressKeyboard());
        Wait(1000, 2000, wdLeft);         
        CountDown.Restart();
      end;

      if (OurPos <> Point(-1, -1)) and (Self.RSW.GetMyPos().DistanceTo(OurPos) > 16) then
      begin
        Script.WriteMsg('GoOutsideBossArea: done', True);
        Wait(1000, 2000, wdLeft);
        Result := True;
        break;
      end;

      Self.DoMainLoopStuff('Going outside arena', False);
    end;
  end;
end;

{$ENDIF} // INEEDBOT_WINTERTODT_BOSSDOOR

