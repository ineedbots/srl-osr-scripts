{
  Wintertodt
  Author: ineedbot
  Date: 7/1/2022

  Brazier funcs
}

{$IFNDEF INEEDBOT_WINTERTODT_BRAZIER}
{$DEFINE INEEDBOT_WINTERTODT_BRAZIER}

{$IFNDEF SRL_OSR}
  {$I SRL/OSR.simba}
{$ENDIF}

{$include_once ../Utils/Utils.simba}

{$include_once Types.simba}
{$include_once Utils.simba}

{
  Find Brazier tile
}
function TBot.FindBrazierTile(OurPos: TPoint): TRectangle;
begin
  Result := Self.RSW.GetTileMSEx(OurPos, Self.BrazierTile);
end;

{
  Gets the search box
}
function TBot.GetBrazierSearchBox(TileRect: TRectangle): TBox;
begin
  Result := TileRect.Bounds().Expand(
    Round(TileRect.Radius() * Self.UnlitBrazColor.RadiusExpand));
end;

{
  Finds color
}
function TBot.FindLitBrazierColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.LitBrazColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.LitBrazColor.FilterSize), __GT__);
end;

{
  Finds color
}
function TBot.FindUnlitBrazierColor(Area: TBox): T2DPointArray;
begin
  Result := MainScreen.FindObject(Self.UnlitBrazColor.RSObject, Area);
  Result.FilterSize(MainScreen.ConvertDistance(Self.UnlitBrazColor.FilterSize), __GT__);
end;

{
  Returns true if the brazier is visible
}
function TBot.FindBrazier(OurTile: TPoint; out IsLit: Boolean; out B: TBox): Boolean;
var
  TileRect: TRectangle;
  ATPA: T2DPointArray;
begin
  TileRect := Self.FindBrazierTile(OurTile);

  B := Self.GetBrazierSearchBox(TileRect);

  if not MainScreen.IsVisible(B.Middle()) then
    exit();

  Result := True;

  IsLit := False;

  B.LimitTo(MainScreen.Bounds());

  ATPA := Self.FindLitBrazierColor(B);

  if Length(ATPA) > 0 then
  begin
    B := ATPA.Biggest().Bounds();
    IsLit := True;
    exit();
  end;

  ATPA := Self.FindUnlitBrazierColor(B);

  if Length(ATPA) > 0 then
    B := ATPA.Biggest().Bounds()
  else
    B := TileRect.Bounds().Expand(-MainScreen.ConvertDistance(Self.UnlitBrazColor.NoColorTileExpand)); // couldnt find color... use the fixd tile
end;

{
  Returns true if found the brazier, WasClicked true if clicked it
}
function TBot.ClickBrazier(out WasClicked: Boolean; out IsLit: Boolean; OurTile: TPoint = [-1, -1]; Velocity: TPoint = [0, 0]): Boolean;
var
  B: TBox;
  UpTexts, Options: TStringArray;
begin
  if OurTile = Point(-1, -1) then
    OurTile := Self.RSW.GetMyPos();

  if not Self.FindBrazier(OurTile, IsLit, B) then
  begin
    Script.WriteMsg('ClickBrazier: not visible', True);
    exit();
  end;

  Script.WriteMsg('ClickBrazier: Found, checking uptext', True);

  Result := True;

  // now apply velocity and check uptext
  if Velocity <> Point(0, 0) then
  begin
    B := B.Offset(Script.GetOffsetForVel(B, Velocity));

    if not MainScreen.IsVisible(B.Middle()) then
    begin
      Script.WriteMsg('ClickBrazier: Tile velocity no visible', True);
      exit();
    end;

    B.LimitTo(MainScreen.Bounds());

    if Script.Debug and Script.Drawing then
      RSClient.Image.DrawBox(B, clMoneyGreen);
  end;

  Options := Copy(Self.FixBrazOptions);
  Options := Options.Combine(Self.LightBrazOptions);
  Options := Options.Combine(Self.FeedBrazOptions);

  UpTexts := Copy(Self.FixBrazUpText);
  UpTexts := UpTexts.Combine(Self.LightBrazUpText);
  UpTexts := UpTexts.Combine(Self.FeedBrazUpText);

  if Velocity <> Point(0, 0) then
    Script.MouseLooksForUpText := UpTexts;
  Mouse.Move(B);
  Script.MouseLooksForUpText := [];

  Script.RareSmallWait();

  if not MainScreen.IsUpText(UpTexts, Random(100, 250)) then
  begin
    Script.WriteMsg('ClickBrazier: Bad uptext', True);
    exit();
  end;

  Script.WriteMsg('ClickBrazier: Good uptext, clicking', True);

  if MainScreen.IsUpText(Options, Random(100, 250)) and (Random() < 0.9) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WasClicked := Mouse.DidClick(True);
  end
  else if MainScreen.IsUpText('options') then
    WasClicked := ChooseOption.Select(Options);

  if not WasClicked then
  begin
    Script.WriteMsg('ClickBrazier: Didnt click', True);
    exit();
  end;

  Script.WriteMsg('ClickBrazier: Clicked', True);
end;

{
  While we walk to the braz
}
procedure WalkingToBrazier(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
var
  WasClicked, IsLit: Boolean = False;
  S: Int32;
  Velocity: TDoubleArray;
  MSVel: TPoint;
begin
  // calcuate move velocity
  Velocity := Script.GetVelocity(Position);

  // if this is the last node in the path
  if Destination = Walker^.Path[High(Walker^.Path)] then
  begin
    // make the mouse fast, because we are moving, its harder to keep up with objs
    S := Mouse.Speed;
    Mouse.Speed := S + Script.FastMouseAdd + Random(-2, 2);

    MSVel := Script.WalkerVelToMSVel(Velocity);

    if Bot.ClickBrazier(WasClicked, IsLit, Position, MSVel) and WasClicked then
    begin
      Bot.BrazIsLit := IsLit;
      Script.WriteMsg('Clicked the brazier while moving, nice!');
      Walker^.Enabled := False;
    end;

    // reset the mosue speed back
    Mouse.Speed := S;
  end
  else if Random() < 0.65 then
    Bot.EatFood(1); // eat food while walking

  // make sure outside inside arena
  if Bot.GetWinterTodtEnergyPerc() = -1 then
    Walker^.Enabled := False;

  // mainscreen bank fix
  if Bot.RSW.ScreenWalk and MainScreen.AnyInterfaceOpen() then
    MainScreen.CloseInterface(Script.ShouldPressKeyboard());
end;

{
  Gets an offset
}
function TBot.GetBrazierTileWalkOffset(): TPoint;
begin
  Result := Self.BrazierTileWalkOffsets[Self.BrazierTileWalkOffsetIndex];
end;

{
  Walks to the door, return true if we clicked it early
}
function TBot.GoToBrazier(Force: Boolean = False; DoClick: Boolean = True): Boolean;
var
  Walked, IsLit: Boolean;
  PathIdx: Int32;
  B: TBox;
  OurPos: TPoint;
  BeforeCallback: TRSWalker_OnWalkEvent;
begin
  Script.WriteMsg('Going to brazier....', True);
  OurPos := Self.RSW.GetMyPos();

  if Force or (OurPos.DistanceTo(Self.BrazierTile) > 50) or not Self.FindBrazier(OurPos, IsLit, B) then
  begin
    Script.SetStatus('Going to brazier...');

    BeforeCallback := @Self.RSW.OnWalkingEvent;
    if DoClick then
      Self.RSW.OnWalkingEvent := @WalkingToBrazier;
    try
      PathIdx := SRL.TruncatedGauss(Low(Self.ToBrazierPaths), High(Self.ToBrazierPaths));

      if OurPos.DistanceTo(Self.ToBrazierPaths[PathIdx][Low(Self.ToBrazierPaths[PathIdx])]) <
        OurPos.DistanceTo(Self.ToBrazierPaths[PathIdx][High(Self.ToBrazierPaths[PathIdx])]) then
        Walked := Self.RSW.WalkPath(Self.ToBrazierPaths[PathIdx], 8)
      else
      begin
        Walked := True;
        Self.RSW.Enabled := True;
      end;

      if Walked and Self.RSW.Enabled then
        Walked := Self.RSW.WalkBlind(Self.BrazierTile.Offset(Self.GetBrazierTileWalkOffset()).Random(-6, 6, True), 0);
    except
    end;
    Self.RSW.OnWalkingEvent := @BeforeCallback;

    if not Walked then
    begin
      Script.WriteMsg('Failed to go to brazier!');
      MainScreen.CloseInterface(Script.ShouldPressKeyboard());
      exit();
    end;

    // check if the walker was killed early, it must of been it clicked
    if not Self.RSW.Enabled then
      Result := True;
  end;
end;

{
  While offering to the brazier
}
procedure TBot.WhileOffering();
var
  OurHPPerc, HPP, ICount, IC: Int32;
  CountDown: TCountDown;
  FireItemSlots: TIntegerArray;
  _: TBox;
  IsLit: Boolean;
begin
  Self.AfterActionAntiBan(True);

  Script.WriteMsg('OfferLitBrazier: Walking to clicked braz', True);
  while RSClient.IsLoggedIn() and Minimap.HasFlag() and Minimap.IsPlayerMoving() do
    Self.DoMainLoopStuff('Going to clicked brazier', True);

  Script.WriteMsg('OfferLitBrazier: Watching for item changes', True);

  OurHPPerc := Minimap.GetHPPercent();
  Inventory.FindItems([Self.LogItem, Self.KnifedLogItem], FireItemSlots);
  ICount := Length(FireItemSlots);

  CountDown.Init(Self.BurnWaitTime);
  while RSClient.IsLoggedIn() do
  begin
    // check hp
    HPP := Minimap.GetHPPercent();
    if HPP < OurHPPerc then
    begin
      Script.WriteMsg('OfferLitBrazier: HP lowered...', True);
      break;
    end;
    OurHPPerc := HPP;

    // check inv
    FireItemSlots.Clear();
    Inventory.FindItems([Self.LogItem, Self.KnifedLogItem], FireItemSlots);
    IC := Length(FireItemSlots);

    if IC <= 0 then
    begin
      Script.WriteMsg('OfferLitBrazier: No more things to offer', True);
      break;
    end;

    if IC <> ICount then
    begin
      Script.WriteMsg('OfferLitBrazier: InvCount changed, restarting countdown', True);
      CountDown.Restart();
    end;

    ICount := IC;

    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('OfferLitBrazier: Countdown expired', True);
      break;
    end;

    // check if still fired
    if not Self.FindBrazier(Self.RSW.GetMyPos(), IsLit, _) or not IsLit then
    begin
      Script.WriteMsg('OfferLitBrazier: No lit color found', True);
      break;
    end;

    // check levelup
    if Chat.LeveledUp() then
    begin
      Script.WriteMsg('OfferLitBrazier: Leveld', True);
      if Random() < 0.2 then
      begin
        Wait(0, 1500, wdLeft);
        Chat.ChatToOption('doesnt matter');
      end;
      break;
    end;

    Self.DoMainLoopStuff('Offering stuff to the brazier', True);
  end;
end;

{
  Fixes/Lights the unlit brazier
}
procedure TBot.WhileUnlitBrazier();
var
  IsLit: Boolean;
  _: TBox;
  CountDown: TCountDown;
  LastXP: Int32;
begin
  // wait to stop moving
  while RSClient.IsLoggedIn() and Minimap.HasFlag() and Minimap.IsPlayerMoving() do
    Self.DoMainLoopStuff('Going to clicked brazier', False);

  // TODO check pyro

  // catch the xp
  LastXP := XPBar.ReadXPBar();
  if LastXP = -1 then
  begin
    Script.WriteMsg('Bad xpbar amount');
    Wait(2500, 3000);
    exit();
  end;

  CountDown.Init(Self.UnlitWaitTime);
  while RSClient.IsLoggedIn() do
  begin
    // make sure we find it
    if not Self.FindBrazier(Self.RSW.GetMyPos(), IsLit, _) then
    begin
      Script.WriteMsg('Couldn''t find the brazier', True);
      break;
    end;

    // is it lit?
    if IsLit then
    begin
      Script.WriteMsg('Braz is now lit!', True);
      break;
    end;

    // did our xp change?
    if LastXP <> XPBar.ReadXPBar() then
    begin
      Script.WriteMsg('Xp changed state changed for the brazier', True);
      break;
    end;

    // check for timeout
    if CountDown.IsFinished() then
    begin
      Script.WriteMsg('Timeout on repairing brazier', True);
      break;
    end;

    Self.DoMainLoopStuff('Wait for xp change', False);
  end;
end;

{
  Does interactions with the brazier
}
function TBot.OfferStuffToBrazier(): Boolean;
var
  DidClick, IsLit: Boolean;
begin
  Script.WriteMsg('Offering to the brazier...', True);

  if (Self.ClickBrazier(DidClick, IsLit) and DidClick) or
    Self.GoToBrazier() or
    (Self.ClickBrazier(DidClick, IsLit) and DidClick) or
    Self.GoToBrazier(True) or
    (Self.ClickBrazier(DidClick, IsLit) and DidClick) then
  begin
    if DidClick then
      Self.BrazIsLit := IsLit;

    Result := True;

    if Self.BrazIsLit then
      Self.WhileOffering()
    else
      Self.WhileUnlitBrazier();
  end;
end;

{
  Waits for the boss to start
}
procedure TBot.WaitForBossStart();
var
  TimeLeftText: String;
  DidClick, WasLit, isLit: Boolean;
  B: TBox;
  OurPos: TPoint;
begin
  Script.WriteMsg('Waitting for boss start...', True);

  // go to it
  Self.GoToBrazier(True, False);

  // make sure boss hasnt started yet
  if Self.GetWinterTodtEnergyPerc() = 0 then
  begin
    while RSClient.IsLoggedIn() do
    begin
      // make sure boss didnt start
      TimeLeftText := Self.GetWinterTodtRemainingTime();
      if (Self.GetWinterTodtEnergyPerc() <> 0) or
        TimeLeftText.EndsWith('0:00') then
      begin
        Script.WriteMsg('Boss about to start!', True);
        break;
      end;

      // be more attentive when its about to start
      if TimeLeftText.EndsWith('0:01') or TimeLeftText.EndsWith('0:02') or
        TimeLeftText.EndsWith('0:03') or TimeLeftText.EndsWith('0:04') then
      begin
        Mouse.Move(Self.RSW.GetTileMS(Self.BrazierTile).Bounds());
        Self.DoMainLoopStuff('Waiting for boss to start!', False);
      end
      else
      begin
        // do random stuff util then
        Self.DoMainLoopStuff('Waiting for boss to start', True);

        if Random() < 0.65 then
          Self.EatFood(1);
      end;
    end;

    OurPos := Self.RSW.GetMyPos();

    // light the brazier for some free points
    if (OurPos.DistanceTo(Self.BrazierTile) < 12) and
      Self.FindBrazier(OurPos, isLit, B) and not isLit then
    begin
      if Self.ClickBrazier(DidClick, WasLit) and DidClick then
        Self.WhileUnlitBrazier();
    end;
  end;
end;

{$ENDIF} // INEEDBOT_WINTERTODT_BRAZIER

